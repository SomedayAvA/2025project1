// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Interfaces.proto

#include "Interfaces.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgAppIDAndPriority_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgApplicationID_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgBanTicketsReq_Police2RA_msgBannedTickets_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgBanTicketsReq_RA2PCA_msgBannedTickets_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msgBanTicketsRes_PCA2RA_msgBannedTickets_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msgBanTicketsRes_RA2Police_msgBannedTickets_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_msgCAScope_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_msgCertSpecificData_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgECPublicKey_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgError_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgGeographicRegion_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgIDAndDate_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_msgIdentifiedScope_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msgOBUIdentifiedScope_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgPoliceConfig_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_msgPsnymCertFormat_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msgPsnymResolutionRes_PCA2RA_msgPsnymResolution_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msgPsnymResolutionRes_RA2Police_msgPsnymResolution_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgPsnymRevocationStatus_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgReversePsnymResolutionReq_RA2PCA_msgTicket_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgReversePsnymResolutionRes_LTCA2RA_msgTicket_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgReversePsnymResolutionRes_PCA2RA_msgPsnym_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgSignature_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgSignerInfo_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msgToBeSignedCRL_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_msgToBeSignedCSR_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_msgToBeSignedWAVECertificate_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgTwoDLocation_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_msgVPKILibConfig_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgVPKILibConfig_msgPsnymPolicy_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgVPKILibConfig_msgTicketPolicy_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgVehicleAttributes_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgVehicleConfig_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_msgWAVECRL_Interfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Interfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_msgWAVECertificateRequest_Interfaces_2eproto;
namespace interfaces {
class msgReqProfileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgReqProfile> _instance;
} _msgReqProfile_default_instance_;
class msgSignatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgSignature> _instance;
} _msgSignature_default_instance_;
class msgErrorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgError> _instance;
} _msgError_default_instance_;
class msgECPublicKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgECPublicKey> _instance;
} _msgECPublicKey_default_instance_;
class msgSignerIdentifierTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgSignerIdentifierType> _instance;
} _msgSignerIdentifierType_default_instance_;
class msgSubTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgSubType> _instance;
} _msgSubType_default_instance_;
class msgSubTypeFlagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgSubTypeFlags> _instance;
} _msgSubTypeFlags_default_instance_;
class msgAIDTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgAIDType> _instance;
} _msgAIDType_default_instance_;
class msgRegionTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgRegionType> _instance;
} _msgRegionType_default_instance_;
class msgWSASignerScopeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgWSASignerScope> _instance;
} _msgWSASignerScope_default_instance_;
class msgRequestScopeTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgRequestScopeType> _instance;
} _msgRequestScopeType_default_instance_;
class msgVoucherReq_V2LTCADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgVoucherReq_V2LTCA> _instance;
} _msgVoucherReq_V2LTCA_default_instance_;
class msgVoucherRes_LTCA2VDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgVoucherRes_LTCA2V> _instance;
} _msgVoucherRes_LTCA2V_default_instance_;
class msgX509CertReq_V2LTCADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgX509CertReq_V2LTCA> _instance;
} _msgX509CertReq_V2LTCA_default_instance_;
class msgX509CertRes_LTCA2VDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgX509CertRes_LTCA2V> _instance;
} _msgX509CertRes_LTCA2V_default_instance_;
class msgCRLTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgCRLType> _instance;
} _msgCRLType_default_instance_;
class msgTwoDLocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgTwoDLocation> _instance;
} _msgTwoDLocation_default_instance_;
class msgCircularRegionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgCircularRegion> _instance;
} _msgCircularRegion_default_instance_;
class msgRectangularRegionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgRectangularRegion> _instance;
} _msgRectangularRegion_default_instance_;
class msgApplicationIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgApplicationID> _instance;
} _msgApplicationID_default_instance_;
class msgOBUIdentifiedScopeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgOBUIdentifiedScope> _instance;
} _msgOBUIdentifiedScope_default_instance_;
class msgGeographicRegionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgGeographicRegion> _instance;
} _msgGeographicRegion_default_instance_;
class msgIdentifiedScopeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgIdentifiedScope> _instance;
} _msgIdentifiedScope_default_instance_;
class msgAppIDAndPriorityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgAppIDAndPriority> _instance;
} _msgAppIDAndPriority_default_instance_;
class msgCAScopeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgCAScope> _instance;
} _msgCAScope_default_instance_;
class msgCertSpecificDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgCertSpecificData> _instance;
} _msgCertSpecificData_default_instance_;
class msgToBeSignedWAVECertificateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgToBeSignedWAVECertificate> _instance;
} _msgToBeSignedWAVECertificate_default_instance_;
class msgPsnymCertFormatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgPsnymCertFormat> _instance;
} _msgPsnymCertFormat_default_instance_;
class msgSignerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgSignerInfo> _instance;
} _msgSignerInfo_default_instance_;
class msgPsnymKeysStorageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgPsnymKeysStorage> _instance;
} _msgPsnymKeysStorage_default_instance_;
class msgTicketReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgTicketReq> _instance;
} _msgTicketReq_default_instance_;
class msgForeignTicketReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgForeignTicketReq> _instance;
} _msgForeignTicketReq_default_instance_;
class msgVehicleAttributesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgVehicleAttributes> _instance;
} _msgVehicleAttributes_default_instance_;
class msgTicketFormatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgTicketFormat> _instance;
} _msgTicketFormat_default_instance_;
class msgTicketResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgTicketRes> _instance;
} _msgTicketRes_default_instance_;
class msgToBeSignedCSRDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgToBeSignedCSR> _instance;
} _msgToBeSignedCSR_default_instance_;
class msgWAVECertificateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgWAVECertificateRequest> _instance;
} _msgWAVECertificateRequest_default_instance_;
class msgPsnymCertReq_V2PCADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgPsnymCertReq_V2PCA> _instance;
} _msgPsnymCertReq_V2PCA_default_instance_;
class msgPsnymCertRes_PCA2VDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgPsnymCertRes_PCA2V> _instance;
} _msgPsnymCertRes_PCA2V_default_instance_;
class msgPsnymCertAck_V2PCADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgPsnymCertAck_V2PCA> _instance;
} _msgPsnymCertAck_V2PCA_default_instance_;
class msgPsnymCRLFormatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgPsnymCRLFormat> _instance;
} _msgPsnymCRLFormat_default_instance_;
class msgIDAndDateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgIDAndDate> _instance;
} _msgIDAndDate_default_instance_;
class msgToBeSignedCRLDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgToBeSignedCRL> _instance;
} _msgToBeSignedCRL_default_instance_;
class msgWAVECRLDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgWAVECRL> _instance;
} _msgWAVECRL_default_instance_;
class msgWAVECertificateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgWAVECertificateResponse> _instance;
} _msgWAVECertificateResponse_default_instance_;
class msgPsnymCRLReq_V2PCADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgPsnymCRLReq_V2PCA> _instance;
} _msgPsnymCRLReq_V2PCA_default_instance_;
class msgPsnymCRLRes_PCA2VDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgPsnymCRLRes_PCA2V> _instance;
} _msgPsnymCRLRes_PCA2V_default_instance_;
class msgPsnymOCSPReq_V2PCADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgPsnymOCSPReq_V2PCA> _instance;
} _msgPsnymOCSPReq_V2PCA_default_instance_;
class msgPsnymRevocationStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgPsnymRevocationStatus> _instance;
} _msgPsnymRevocationStatus_default_instance_;
class msgPsnymOCSPRes_PCA2VDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgPsnymOCSPRes_PCA2V> _instance;
} _msgPsnymOCSPRes_PCA2V_default_instance_;
class msgRevokePsnymCertReq_P2RADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgRevokePsnymCertReq_P2RA> _instance;
} _msgRevokePsnymCertReq_P2RA_default_instance_;
class msgRevokePsnymCertReq_RA2PCADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgRevokePsnymCertReq_RA2PCA> _instance;
} _msgRevokePsnymCertReq_RA2PCA_default_instance_;
class msgRevokePsnymCertRes_PCA2RADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgRevokePsnymCertRes_PCA2RA> _instance;
} _msgRevokePsnymCertRes_PCA2RA_default_instance_;
class msgRevokeX509CertReq_RA2LTCADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgRevokeX509CertReq_RA2LTCA> _instance;
} _msgRevokeX509CertReq_RA2LTCA_default_instance_;
class msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo> _instance;
} _msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo_default_instance_;
class msgRevokePsnymCertRes_RA2PDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgRevokePsnymCertRes_RA2P> _instance;
} _msgRevokePsnymCertRes_RA2P_default_instance_;
class msgPsnymResolutionReq_Police2RADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgPsnymResolutionReq_Police2RA> _instance;
} _msgPsnymResolutionReq_Police2RA_default_instance_;
class msgPsnymResolutionReq_RA2PCADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgPsnymResolutionReq_RA2PCA> _instance;
} _msgPsnymResolutionReq_RA2PCA_default_instance_;
class msgPsnymResolutionRes_PCA2RA_msgPsnymResolutionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgPsnymResolutionRes_PCA2RA_msgPsnymResolution> _instance;
} _msgPsnymResolutionRes_PCA2RA_msgPsnymResolution_default_instance_;
class msgPsnymResolutionRes_PCA2RADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgPsnymResolutionRes_PCA2RA> _instance;
} _msgPsnymResolutionRes_PCA2RA_default_instance_;
class msgPsnymResolutionReq_RA2LTCA_msgPsnymResolutionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution> _instance;
} _msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution_default_instance_;
class msgPsnymResolutionReq_RA2LTCADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgPsnymResolutionReq_RA2LTCA> _instance;
} _msgPsnymResolutionReq_RA2LTCA_default_instance_;
class msgPsnymResolutionRes_LTCA2RA_msgPsnymResolutionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution> _instance;
} _msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution_default_instance_;
class msgPsnymResolutionRes_LTCA2RADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgPsnymResolutionRes_LTCA2RA> _instance;
} _msgPsnymResolutionRes_LTCA2RA_default_instance_;
class msgPsnymResolutionRes_RA2Police_msgPsnymResolutionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgPsnymResolutionRes_RA2Police_msgPsnymResolution> _instance;
} _msgPsnymResolutionRes_RA2Police_msgPsnymResolution_default_instance_;
class msgPsnymResolutionRes_RA2PoliceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgPsnymResolutionRes_RA2Police> _instance;
} _msgPsnymResolutionRes_RA2Police_default_instance_;
class msgPsnymResolutionAck_Police2RADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgPsnymResolutionAck_Police2RA> _instance;
} _msgPsnymResolutionAck_Police2RA_default_instance_;
class msgBanTicketsReq_Police2RA_msgBannedTicketsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgBanTicketsReq_Police2RA_msgBannedTickets> _instance;
} _msgBanTicketsReq_Police2RA_msgBannedTickets_default_instance_;
class msgBanTicketsReq_Police2RADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgBanTicketsReq_Police2RA> _instance;
} _msgBanTicketsReq_Police2RA_default_instance_;
class msgBanTicketsReq_RA2PCA_msgBannedTicketsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgBanTicketsReq_RA2PCA_msgBannedTickets> _instance;
} _msgBanTicketsReq_RA2PCA_msgBannedTickets_default_instance_;
class msgBanTicketsReq_RA2PCADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgBanTicketsReq_RA2PCA> _instance;
} _msgBanTicketsReq_RA2PCA_default_instance_;
class msgBanTicketsRes_PCA2RA_msgBannedTicketsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgBanTicketsRes_PCA2RA_msgBannedTickets> _instance;
} _msgBanTicketsRes_PCA2RA_msgBannedTickets_default_instance_;
class msgBanTicketsRes_PCA2RADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgBanTicketsRes_PCA2RA> _instance;
} _msgBanTicketsRes_PCA2RA_default_instance_;
class msgBanTicketsRes_RA2Police_msgBannedTicketsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgBanTicketsRes_RA2Police_msgBannedTickets> _instance;
} _msgBanTicketsRes_RA2Police_msgBannedTickets_default_instance_;
class msgBanTicketsRes_RA2PoliceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgBanTicketsRes_RA2Police> _instance;
} _msgBanTicketsRes_RA2Police_default_instance_;
class msgBanTicketsAck_Police2RADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgBanTicketsAck_Police2RA> _instance;
} _msgBanTicketsAck_Police2RA_default_instance_;
class msgVehicleConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgVehicleConfig> _instance;
} _msgVehicleConfig_default_instance_;
class msgPoliceConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgPoliceConfig> _instance;
} _msgPoliceConfig_default_instance_;
class msgVPKILibConfig_msgTicketPolicyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgVPKILibConfig_msgTicketPolicy> _instance;
} _msgVPKILibConfig_msgTicketPolicy_default_instance_;
class msgVPKILibConfig_msgPsnymPolicyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgVPKILibConfig_msgPsnymPolicy> _instance;
} _msgVPKILibConfig_msgPsnymPolicy_default_instance_;
class msgVPKILibConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgVPKILibConfig> _instance;
} _msgVPKILibConfig_default_instance_;
class msgUpgradeConfigurationReq_Client2ServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgUpgradeConfigurationReq_Client2Server> _instance;
} _msgUpgradeConfigurationReq_Client2Server_default_instance_;
class msgUpgradeConfigurationRes_Server2ClientDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgUpgradeConfigurationRes_Server2Client> _instance;
} _msgUpgradeConfigurationRes_Server2Client_default_instance_;
class msgReversePsnymResolutionReq_Police2RADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgReversePsnymResolutionReq_Police2RA> _instance;
} _msgReversePsnymResolutionReq_Police2RA_default_instance_;
class msgReversePsnymResolutionReq_RA2LTCADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgReversePsnymResolutionReq_RA2LTCA> _instance;
} _msgReversePsnymResolutionReq_RA2LTCA_default_instance_;
class msgReversePsnymResolutionRes_LTCA2RA_msgTicketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgReversePsnymResolutionRes_LTCA2RA_msgTicket> _instance;
} _msgReversePsnymResolutionRes_LTCA2RA_msgTicket_default_instance_;
class msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolutionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution> _instance;
} _msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution_default_instance_;
class msgReversePsnymResolutionRes_LTCA2RADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgReversePsnymResolutionRes_LTCA2RA> _instance;
} _msgReversePsnymResolutionRes_LTCA2RA_default_instance_;
class msgReversePsnymResolutionReq_RA2PCA_msgTicketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgReversePsnymResolutionReq_RA2PCA_msgTicket> _instance;
} _msgReversePsnymResolutionReq_RA2PCA_msgTicket_default_instance_;
class msgReversePsnymResolutionReq_RA2PCA_msgTicketResolutionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution> _instance;
} _msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution_default_instance_;
class msgReversePsnymResolutionReq_RA2PCADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgReversePsnymResolutionReq_RA2PCA> _instance;
} _msgReversePsnymResolutionReq_RA2PCA_default_instance_;
class msgReversePsnymResolutionRes_PCA2RA_msgPsnymDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgReversePsnymResolutionRes_PCA2RA_msgPsnym> _instance;
} _msgReversePsnymResolutionRes_PCA2RA_msgPsnym_default_instance_;
class msgReversePsnymResolutionRes_PCA2RA_msgTicketResolutionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution> _instance;
} _msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution_default_instance_;
class msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolutionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution> _instance;
} _msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution_default_instance_;
class msgReversePsnymResolutionRes_PCA2RADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgReversePsnymResolutionRes_PCA2RA> _instance;
} _msgReversePsnymResolutionRes_PCA2RA_default_instance_;
class msgReversePsnymResolutionRes_RA2Police_msgPsnymResolutionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution> _instance;
} _msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution_default_instance_;
class msgReversePsnymResolutionRes_RA2PoliceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgReversePsnymResolutionRes_RA2Police> _instance;
} _msgReversePsnymResolutionRes_RA2Police_default_instance_;
class msgTicketProvisionValidationReq_LTCA2TVRDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgTicketProvisionValidationReq_LTCA2TVR> _instance;
} _msgTicketProvisionValidationReq_LTCA2TVR_default_instance_;
class msgTicketProvisionValidationRes_TVR2LTCADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgTicketProvisionValidationRes_TVR2LTCA> _instance;
} _msgTicketProvisionValidationRes_TVR2LTCA_default_instance_;
class msgPsnymProvisionValidationReq_PCA2PVRDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgPsnymProvisionValidationReq_PCA2PVR> _instance;
} _msgPsnymProvisionValidationReq_PCA2PVR_default_instance_;
class msgPsnymProvisionValidationRes_PVR2PCADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgPsnymProvisionValidationRes_PVR2PCA> _instance;
} _msgPsnymProvisionValidationRes_PVR2PCA_default_instance_;
}  // namespace interfaces
static void InitDefaultsscc_info_msgAIDType_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgAIDType_default_instance_;
    new (ptr) ::interfaces::msgAIDType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgAIDType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgAIDType_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgAIDType_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgAppIDAndPriority_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgAppIDAndPriority_default_instance_;
    new (ptr) ::interfaces::msgAppIDAndPriority();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgAppIDAndPriority::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgAppIDAndPriority_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgAppIDAndPriority_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgApplicationID_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgApplicationID_default_instance_;
    new (ptr) ::interfaces::msgApplicationID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgApplicationID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgApplicationID_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgApplicationID_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgBanTicketsAck_Police2RA_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgBanTicketsAck_Police2RA_default_instance_;
    new (ptr) ::interfaces::msgBanTicketsAck_Police2RA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgBanTicketsAck_Police2RA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_msgBanTicketsAck_Police2RA_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_msgBanTicketsAck_Police2RA_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgError_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgBanTicketsReq_Police2RA_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgBanTicketsReq_Police2RA_default_instance_;
    new (ptr) ::interfaces::msgBanTicketsReq_Police2RA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgBanTicketsReq_Police2RA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_msgBanTicketsReq_Police2RA_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_msgBanTicketsReq_Police2RA_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgBanTicketsReq_Police2RA_msgBannedTickets_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgBanTicketsReq_Police2RA_msgBannedTickets_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgBanTicketsReq_Police2RA_msgBannedTickets_default_instance_;
    new (ptr) ::interfaces::msgBanTicketsReq_Police2RA_msgBannedTickets();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgBanTicketsReq_Police2RA_msgBannedTickets::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgBanTicketsReq_Police2RA_msgBannedTickets_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgBanTicketsReq_Police2RA_msgBannedTickets_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgBanTicketsReq_RA2PCA_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgBanTicketsReq_RA2PCA_default_instance_;
    new (ptr) ::interfaces::msgBanTicketsReq_RA2PCA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgBanTicketsReq_RA2PCA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_msgBanTicketsReq_RA2PCA_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_msgBanTicketsReq_RA2PCA_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgBanTicketsReq_RA2PCA_msgBannedTickets_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgBanTicketsReq_RA2PCA_msgBannedTickets_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgBanTicketsReq_RA2PCA_msgBannedTickets_default_instance_;
    new (ptr) ::interfaces::msgBanTicketsReq_RA2PCA_msgBannedTickets();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgBanTicketsReq_RA2PCA_msgBannedTickets::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgBanTicketsReq_RA2PCA_msgBannedTickets_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgBanTicketsReq_RA2PCA_msgBannedTickets_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgBanTicketsRes_PCA2RA_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgBanTicketsRes_PCA2RA_default_instance_;
    new (ptr) ::interfaces::msgBanTicketsRes_PCA2RA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgBanTicketsRes_PCA2RA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_msgBanTicketsRes_PCA2RA_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_msgBanTicketsRes_PCA2RA_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgBanTicketsRes_PCA2RA_msgBannedTickets_Interfaces_2eproto.base,
      &scc_info_msgError_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgBanTicketsRes_PCA2RA_msgBannedTickets_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgBanTicketsRes_PCA2RA_msgBannedTickets_default_instance_;
    new (ptr) ::interfaces::msgBanTicketsRes_PCA2RA_msgBannedTickets();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgBanTicketsRes_PCA2RA_msgBannedTickets::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msgBanTicketsRes_PCA2RA_msgBannedTickets_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msgBanTicketsRes_PCA2RA_msgBannedTickets_Interfaces_2eproto}, {
      &scc_info_msgError_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgBanTicketsRes_RA2Police_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgBanTicketsRes_RA2Police_default_instance_;
    new (ptr) ::interfaces::msgBanTicketsRes_RA2Police();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgBanTicketsRes_RA2Police::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_msgBanTicketsRes_RA2Police_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_msgBanTicketsRes_RA2Police_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgBanTicketsRes_RA2Police_msgBannedTickets_Interfaces_2eproto.base,
      &scc_info_msgError_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgBanTicketsRes_RA2Police_msgBannedTickets_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgBanTicketsRes_RA2Police_msgBannedTickets_default_instance_;
    new (ptr) ::interfaces::msgBanTicketsRes_RA2Police_msgBannedTickets();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgBanTicketsRes_RA2Police_msgBannedTickets::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msgBanTicketsRes_RA2Police_msgBannedTickets_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msgBanTicketsRes_RA2Police_msgBannedTickets_Interfaces_2eproto}, {
      &scc_info_msgError_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgCAScope_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgCAScope_default_instance_;
    new (ptr) ::interfaces::msgCAScope();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgCAScope::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_msgCAScope_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_msgCAScope_Interfaces_2eproto}, {
      &scc_info_msgApplicationID_Interfaces_2eproto.base,
      &scc_info_msgAppIDAndPriority_Interfaces_2eproto.base,
      &scc_info_msgGeographicRegion_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgCRLType_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgCRLType_default_instance_;
    new (ptr) ::interfaces::msgCRLType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgCRLType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgCRLType_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgCRLType_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgCertSpecificData_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgCertSpecificData_default_instance_;
    new (ptr) ::interfaces::msgCertSpecificData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgCertSpecificData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_msgCertSpecificData_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_msgCertSpecificData_Interfaces_2eproto}, {
      &scc_info_msgCAScope_Interfaces_2eproto.base,
      &scc_info_msgIdentifiedScope_Interfaces_2eproto.base,
      &scc_info_msgOBUIdentifiedScope_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgCircularRegion_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgCircularRegion_default_instance_;
    new (ptr) ::interfaces::msgCircularRegion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgCircularRegion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msgCircularRegion_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msgCircularRegion_Interfaces_2eproto}, {
      &scc_info_msgTwoDLocation_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgECPublicKey_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgECPublicKey_default_instance_;
    new (ptr) ::interfaces::msgECPublicKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgECPublicKey::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgECPublicKey_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgECPublicKey_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgError_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgError_default_instance_;
    new (ptr) ::interfaces::msgError();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgError::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgError_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgError_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgForeignTicketReq_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgForeignTicketReq_default_instance_;
    new (ptr) ::interfaces::msgForeignTicketReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgForeignTicketReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_msgForeignTicketReq_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_msgForeignTicketReq_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgGeographicRegion_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgGeographicRegion_default_instance_;
    new (ptr) ::interfaces::msgGeographicRegion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgGeographicRegion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgGeographicRegion_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgGeographicRegion_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgIDAndDate_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgIDAndDate_default_instance_;
    new (ptr) ::interfaces::msgIDAndDate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgIDAndDate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgIDAndDate_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgIDAndDate_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgIdentifiedScope_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgIdentifiedScope_default_instance_;
    new (ptr) ::interfaces::msgIdentifiedScope();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgIdentifiedScope::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_msgIdentifiedScope_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_msgIdentifiedScope_Interfaces_2eproto}, {
      &scc_info_msgApplicationID_Interfaces_2eproto.base,
      &scc_info_msgGeographicRegion_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgOBUIdentifiedScope_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgOBUIdentifiedScope_default_instance_;
    new (ptr) ::interfaces::msgOBUIdentifiedScope();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgOBUIdentifiedScope::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msgOBUIdentifiedScope_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msgOBUIdentifiedScope_Interfaces_2eproto}, {
      &scc_info_msgApplicationID_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgPoliceConfig_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgPoliceConfig_default_instance_;
    new (ptr) ::interfaces::msgPoliceConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgPoliceConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgPoliceConfig_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgPoliceConfig_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgPsnymCRLFormat_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgPsnymCRLFormat_default_instance_;
    new (ptr) ::interfaces::msgPsnymCRLFormat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgPsnymCRLFormat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgPsnymCRLFormat_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgPsnymCRLFormat_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgPsnymCRLReq_V2PCA_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgPsnymCRLReq_V2PCA_default_instance_;
    new (ptr) ::interfaces::msgPsnymCRLReq_V2PCA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgPsnymCRLReq_V2PCA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_msgPsnymCRLReq_V2PCA_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_msgPsnymCRLReq_V2PCA_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgPsnymCRLRes_PCA2V_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgPsnymCRLRes_PCA2V_default_instance_;
    new (ptr) ::interfaces::msgPsnymCRLRes_PCA2V();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgPsnymCRLRes_PCA2V::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_msgPsnymCRLRes_PCA2V_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_msgPsnymCRLRes_PCA2V_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgError_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgPsnymCertAck_V2PCA_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgPsnymCertAck_V2PCA_default_instance_;
    new (ptr) ::interfaces::msgPsnymCertAck_V2PCA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgPsnymCertAck_V2PCA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msgPsnymCertAck_V2PCA_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msgPsnymCertAck_V2PCA_Interfaces_2eproto}, {
      &scc_info_msgError_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgPsnymCertFormat_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgPsnymCertFormat_default_instance_;
    new (ptr) ::interfaces::msgPsnymCertFormat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgPsnymCertFormat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_msgPsnymCertFormat_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_msgPsnymCertFormat_Interfaces_2eproto}, {
      &scc_info_msgToBeSignedWAVECertificate_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgPsnymCertReq_V2PCA_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgPsnymCertReq_V2PCA_default_instance_;
    new (ptr) ::interfaces::msgPsnymCertReq_V2PCA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgPsnymCertReq_V2PCA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msgPsnymCertReq_V2PCA_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msgPsnymCertReq_V2PCA_Interfaces_2eproto}, {
      &scc_info_msgWAVECertificateRequest_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgPsnymCertRes_PCA2V_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgPsnymCertRes_PCA2V_default_instance_;
    new (ptr) ::interfaces::msgPsnymCertRes_PCA2V();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgPsnymCertRes_PCA2V::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_msgPsnymCertRes_PCA2V_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_msgPsnymCertRes_PCA2V_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgPsnymCertFormat_Interfaces_2eproto.base,
      &scc_info_msgError_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgPsnymKeysStorage_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgPsnymKeysStorage_default_instance_;
    new (ptr) ::interfaces::msgPsnymKeysStorage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgPsnymKeysStorage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msgPsnymKeysStorage_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msgPsnymKeysStorage_Interfaces_2eproto}, {
      &scc_info_msgPsnymCertFormat_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgPsnymOCSPReq_V2PCA_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgPsnymOCSPReq_V2PCA_default_instance_;
    new (ptr) ::interfaces::msgPsnymOCSPReq_V2PCA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgPsnymOCSPReq_V2PCA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_msgPsnymOCSPReq_V2PCA_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_msgPsnymOCSPReq_V2PCA_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgPsnymOCSPRes_PCA2V_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgPsnymOCSPRes_PCA2V_default_instance_;
    new (ptr) ::interfaces::msgPsnymOCSPRes_PCA2V();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgPsnymOCSPRes_PCA2V::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_msgPsnymOCSPRes_PCA2V_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_msgPsnymOCSPRes_PCA2V_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgPsnymRevocationStatus_Interfaces_2eproto.base,
      &scc_info_msgError_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgPsnymProvisionValidationReq_PCA2PVR_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgPsnymProvisionValidationReq_PCA2PVR_default_instance_;
    new (ptr) ::interfaces::msgPsnymProvisionValidationReq_PCA2PVR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgPsnymProvisionValidationReq_PCA2PVR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_msgPsnymProvisionValidationReq_PCA2PVR_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_msgPsnymProvisionValidationReq_PCA2PVR_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgPsnymProvisionValidationRes_PVR2PCA_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgPsnymProvisionValidationRes_PVR2PCA_default_instance_;
    new (ptr) ::interfaces::msgPsnymProvisionValidationRes_PVR2PCA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgPsnymProvisionValidationRes_PVR2PCA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_msgPsnymProvisionValidationRes_PVR2PCA_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_msgPsnymProvisionValidationRes_PVR2PCA_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgError_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgPsnymResolutionAck_Police2RA_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgPsnymResolutionAck_Police2RA_default_instance_;
    new (ptr) ::interfaces::msgPsnymResolutionAck_Police2RA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgPsnymResolutionAck_Police2RA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_msgPsnymResolutionAck_Police2RA_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_msgPsnymResolutionAck_Police2RA_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgError_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgPsnymResolutionReq_Police2RA_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgPsnymResolutionReq_Police2RA_default_instance_;
    new (ptr) ::interfaces::msgPsnymResolutionReq_Police2RA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgPsnymResolutionReq_Police2RA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_msgPsnymResolutionReq_Police2RA_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_msgPsnymResolutionReq_Police2RA_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgPsnymResolutionReq_RA2LTCA_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgPsnymResolutionReq_RA2LTCA_default_instance_;
    new (ptr) ::interfaces::msgPsnymResolutionReq_RA2LTCA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgPsnymResolutionReq_RA2LTCA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_msgPsnymResolutionReq_RA2LTCA_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_msgPsnymResolutionReq_RA2LTCA_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution_default_instance_;
    new (ptr) ::interfaces::msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgPsnymResolutionReq_RA2PCA_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgPsnymResolutionReq_RA2PCA_default_instance_;
    new (ptr) ::interfaces::msgPsnymResolutionReq_RA2PCA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgPsnymResolutionReq_RA2PCA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_msgPsnymResolutionReq_RA2PCA_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_msgPsnymResolutionReq_RA2PCA_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgPsnymResolutionRes_LTCA2RA_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgPsnymResolutionRes_LTCA2RA_default_instance_;
    new (ptr) ::interfaces::msgPsnymResolutionRes_LTCA2RA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgPsnymResolutionRes_LTCA2RA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_msgPsnymResolutionRes_LTCA2RA_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_msgPsnymResolutionRes_LTCA2RA_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution_Interfaces_2eproto.base,
      &scc_info_msgError_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution_default_instance_;
    new (ptr) ::interfaces::msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution_Interfaces_2eproto}, {
      &scc_info_msgError_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgPsnymResolutionRes_PCA2RA_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgPsnymResolutionRes_PCA2RA_default_instance_;
    new (ptr) ::interfaces::msgPsnymResolutionRes_PCA2RA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgPsnymResolutionRes_PCA2RA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_msgPsnymResolutionRes_PCA2RA_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_msgPsnymResolutionRes_PCA2RA_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgPsnymResolutionRes_PCA2RA_msgPsnymResolution_Interfaces_2eproto.base,
      &scc_info_msgError_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgPsnymResolutionRes_PCA2RA_msgPsnymResolution_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgPsnymResolutionRes_PCA2RA_msgPsnymResolution_default_instance_;
    new (ptr) ::interfaces::msgPsnymResolutionRes_PCA2RA_msgPsnymResolution();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgPsnymResolutionRes_PCA2RA_msgPsnymResolution::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msgPsnymResolutionRes_PCA2RA_msgPsnymResolution_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msgPsnymResolutionRes_PCA2RA_msgPsnymResolution_Interfaces_2eproto}, {
      &scc_info_msgError_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgPsnymResolutionRes_RA2Police_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgPsnymResolutionRes_RA2Police_default_instance_;
    new (ptr) ::interfaces::msgPsnymResolutionRes_RA2Police();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgPsnymResolutionRes_RA2Police::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_msgPsnymResolutionRes_RA2Police_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_msgPsnymResolutionRes_RA2Police_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgPsnymResolutionRes_RA2Police_msgPsnymResolution_Interfaces_2eproto.base,
      &scc_info_msgError_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgPsnymResolutionRes_RA2Police_msgPsnymResolution_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgPsnymResolutionRes_RA2Police_msgPsnymResolution_default_instance_;
    new (ptr) ::interfaces::msgPsnymResolutionRes_RA2Police_msgPsnymResolution();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgPsnymResolutionRes_RA2Police_msgPsnymResolution::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msgPsnymResolutionRes_RA2Police_msgPsnymResolution_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msgPsnymResolutionRes_RA2Police_msgPsnymResolution_Interfaces_2eproto}, {
      &scc_info_msgError_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgPsnymRevocationStatus_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgPsnymRevocationStatus_default_instance_;
    new (ptr) ::interfaces::msgPsnymRevocationStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgPsnymRevocationStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgPsnymRevocationStatus_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgPsnymRevocationStatus_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgRectangularRegion_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgRectangularRegion_default_instance_;
    new (ptr) ::interfaces::msgRectangularRegion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgRectangularRegion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msgRectangularRegion_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msgRectangularRegion_Interfaces_2eproto}, {
      &scc_info_msgTwoDLocation_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgRegionType_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgRegionType_default_instance_;
    new (ptr) ::interfaces::msgRegionType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgRegionType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgRegionType_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgRegionType_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgReqProfile_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgReqProfile_default_instance_;
    new (ptr) ::interfaces::msgReqProfile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgReqProfile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgReqProfile_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgReqProfile_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgRequestScopeType_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgRequestScopeType_default_instance_;
    new (ptr) ::interfaces::msgRequestScopeType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgRequestScopeType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgRequestScopeType_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgRequestScopeType_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgReversePsnymResolutionReq_Police2RA_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgReversePsnymResolutionReq_Police2RA_default_instance_;
    new (ptr) ::interfaces::msgReversePsnymResolutionReq_Police2RA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgReversePsnymResolutionReq_Police2RA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_msgReversePsnymResolutionReq_Police2RA_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_msgReversePsnymResolutionReq_Police2RA_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgReversePsnymResolutionReq_RA2LTCA_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgReversePsnymResolutionReq_RA2LTCA_default_instance_;
    new (ptr) ::interfaces::msgReversePsnymResolutionReq_RA2LTCA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgReversePsnymResolutionReq_RA2LTCA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_msgReversePsnymResolutionReq_RA2LTCA_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_msgReversePsnymResolutionReq_RA2LTCA_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgReversePsnymResolutionReq_RA2PCA_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgReversePsnymResolutionReq_RA2PCA_default_instance_;
    new (ptr) ::interfaces::msgReversePsnymResolutionReq_RA2PCA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgReversePsnymResolutionReq_RA2PCA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_msgReversePsnymResolutionReq_RA2PCA_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_msgReversePsnymResolutionReq_RA2PCA_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgReversePsnymResolutionReq_RA2PCA_msgTicket_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgReversePsnymResolutionReq_RA2PCA_msgTicket_default_instance_;
    new (ptr) ::interfaces::msgReversePsnymResolutionReq_RA2PCA_msgTicket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgReversePsnymResolutionReq_RA2PCA_msgTicket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgReversePsnymResolutionReq_RA2PCA_msgTicket_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgReversePsnymResolutionReq_RA2PCA_msgTicket_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution_default_instance_;
    new (ptr) ::interfaces::msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution_Interfaces_2eproto}, {
      &scc_info_msgReversePsnymResolutionReq_RA2PCA_msgTicket_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgReversePsnymResolutionRes_LTCA2RA_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgReversePsnymResolutionRes_LTCA2RA_default_instance_;
    new (ptr) ::interfaces::msgReversePsnymResolutionRes_LTCA2RA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgReversePsnymResolutionRes_LTCA2RA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_msgReversePsnymResolutionRes_LTCA2RA_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_msgReversePsnymResolutionRes_LTCA2RA_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution_Interfaces_2eproto.base,
      &scc_info_msgError_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgReversePsnymResolutionRes_LTCA2RA_msgTicket_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgReversePsnymResolutionRes_LTCA2RA_msgTicket_default_instance_;
    new (ptr) ::interfaces::msgReversePsnymResolutionRes_LTCA2RA_msgTicket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgReversePsnymResolutionRes_LTCA2RA_msgTicket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgReversePsnymResolutionRes_LTCA2RA_msgTicket_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgReversePsnymResolutionRes_LTCA2RA_msgTicket_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution_default_instance_;
    new (ptr) ::interfaces::msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution_Interfaces_2eproto}, {
      &scc_info_msgReversePsnymResolutionRes_LTCA2RA_msgTicket_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgReversePsnymResolutionRes_PCA2RA_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgReversePsnymResolutionRes_PCA2RA_default_instance_;
    new (ptr) ::interfaces::msgReversePsnymResolutionRes_PCA2RA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgReversePsnymResolutionRes_PCA2RA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_msgReversePsnymResolutionRes_PCA2RA_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_msgReversePsnymResolutionRes_PCA2RA_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution_Interfaces_2eproto.base,
      &scc_info_msgError_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgReversePsnymResolutionRes_PCA2RA_msgPsnym_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgReversePsnymResolutionRes_PCA2RA_msgPsnym_default_instance_;
    new (ptr) ::interfaces::msgReversePsnymResolutionRes_PCA2RA_msgPsnym();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgReversePsnymResolutionRes_PCA2RA_msgPsnym::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgReversePsnymResolutionRes_PCA2RA_msgPsnym_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgReversePsnymResolutionRes_PCA2RA_msgPsnym_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution_default_instance_;
    new (ptr) ::interfaces::msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution_default_instance_;
    new (ptr) ::interfaces::msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution_Interfaces_2eproto}, {
      &scc_info_msgReversePsnymResolutionRes_PCA2RA_msgPsnym_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgReversePsnymResolutionRes_RA2Police_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgReversePsnymResolutionRes_RA2Police_default_instance_;
    new (ptr) ::interfaces::msgReversePsnymResolutionRes_RA2Police();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgReversePsnymResolutionRes_RA2Police::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_msgReversePsnymResolutionRes_RA2Police_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_msgReversePsnymResolutionRes_RA2Police_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution_Interfaces_2eproto.base,
      &scc_info_msgError_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution_default_instance_;
    new (ptr) ::interfaces::msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgRevokePsnymCertReq_P2RA_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgRevokePsnymCertReq_P2RA_default_instance_;
    new (ptr) ::interfaces::msgRevokePsnymCertReq_P2RA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgRevokePsnymCertReq_P2RA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_msgRevokePsnymCertReq_P2RA_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_msgRevokePsnymCertReq_P2RA_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgRevokePsnymCertReq_RA2PCA_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgRevokePsnymCertReq_RA2PCA_default_instance_;
    new (ptr) ::interfaces::msgRevokePsnymCertReq_RA2PCA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgRevokePsnymCertReq_RA2PCA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_msgRevokePsnymCertReq_RA2PCA_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_msgRevokePsnymCertReq_RA2PCA_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgRevokePsnymCertRes_PCA2RA_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgRevokePsnymCertRes_PCA2RA_default_instance_;
    new (ptr) ::interfaces::msgRevokePsnymCertRes_PCA2RA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgRevokePsnymCertRes_PCA2RA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msgRevokePsnymCertRes_PCA2RA_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msgRevokePsnymCertRes_PCA2RA_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgRevokePsnymCertRes_RA2P_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgRevokePsnymCertRes_RA2P_default_instance_;
    new (ptr) ::interfaces::msgRevokePsnymCertRes_RA2P();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgRevokePsnymCertRes_RA2P::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_msgRevokePsnymCertRes_RA2P_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_msgRevokePsnymCertRes_RA2P_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo_Interfaces_2eproto.base,
      &scc_info_msgError_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo_default_instance_;
    new (ptr) ::interfaces::msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo_Interfaces_2eproto}, {
      &scc_info_msgError_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgRevokeX509CertReq_RA2LTCA_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgRevokeX509CertReq_RA2LTCA_default_instance_;
    new (ptr) ::interfaces::msgRevokeX509CertReq_RA2LTCA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgRevokeX509CertReq_RA2LTCA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_msgRevokeX509CertReq_RA2LTCA_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_msgRevokeX509CertReq_RA2LTCA_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgSignature_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgSignature_default_instance_;
    new (ptr) ::interfaces::msgSignature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgSignature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgSignature_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgSignature_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgSignerIdentifierType_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgSignerIdentifierType_default_instance_;
    new (ptr) ::interfaces::msgSignerIdentifierType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgSignerIdentifierType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgSignerIdentifierType_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgSignerIdentifierType_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgSignerInfo_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgSignerInfo_default_instance_;
    new (ptr) ::interfaces::msgSignerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgSignerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgSignerInfo_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgSignerInfo_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgSubType_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgSubType_default_instance_;
    new (ptr) ::interfaces::msgSubType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgSubType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgSubType_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgSubType_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgSubTypeFlags_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgSubTypeFlags_default_instance_;
    new (ptr) ::interfaces::msgSubTypeFlags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgSubTypeFlags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgSubTypeFlags_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgSubTypeFlags_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgTicketFormat_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgTicketFormat_default_instance_;
    new (ptr) ::interfaces::msgTicketFormat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgTicketFormat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_msgTicketFormat_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_msgTicketFormat_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgVehicleAttributes_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgTicketProvisionValidationReq_LTCA2TVR_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgTicketProvisionValidationReq_LTCA2TVR_default_instance_;
    new (ptr) ::interfaces::msgTicketProvisionValidationReq_LTCA2TVR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgTicketProvisionValidationReq_LTCA2TVR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_msgTicketProvisionValidationReq_LTCA2TVR_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_msgTicketProvisionValidationReq_LTCA2TVR_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgTicketProvisionValidationRes_TVR2LTCA_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgTicketProvisionValidationRes_TVR2LTCA_default_instance_;
    new (ptr) ::interfaces::msgTicketProvisionValidationRes_TVR2LTCA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgTicketProvisionValidationRes_TVR2LTCA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_msgTicketProvisionValidationRes_TVR2LTCA_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_msgTicketProvisionValidationRes_TVR2LTCA_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgError_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgTicketReq_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgTicketReq_default_instance_;
    new (ptr) ::interfaces::msgTicketReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgTicketReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_msgTicketReq_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_msgTicketReq_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgTicketRes_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgTicketRes_default_instance_;
    new (ptr) ::interfaces::msgTicketRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgTicketRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_msgTicketRes_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_msgTicketRes_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgError_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgToBeSignedCRL_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgToBeSignedCRL_default_instance_;
    new (ptr) ::interfaces::msgToBeSignedCRL();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgToBeSignedCRL::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msgToBeSignedCRL_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msgToBeSignedCRL_Interfaces_2eproto}, {
      &scc_info_msgIDAndDate_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgToBeSignedCSR_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgToBeSignedCSR_default_instance_;
    new (ptr) ::interfaces::msgToBeSignedCSR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgToBeSignedCSR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_msgToBeSignedCSR_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_msgToBeSignedCSR_Interfaces_2eproto}, {
      &scc_info_msgCertSpecificData_Interfaces_2eproto.base,
      &scc_info_msgECPublicKey_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgToBeSignedWAVECertificate_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgToBeSignedWAVECertificate_default_instance_;
    new (ptr) ::interfaces::msgToBeSignedWAVECertificate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgToBeSignedWAVECertificate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_msgToBeSignedWAVECertificate_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_msgToBeSignedWAVECertificate_Interfaces_2eproto}, {
      &scc_info_msgCertSpecificData_Interfaces_2eproto.base,
      &scc_info_msgECPublicKey_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgTwoDLocation_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgTwoDLocation_default_instance_;
    new (ptr) ::interfaces::msgTwoDLocation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgTwoDLocation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgTwoDLocation_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgTwoDLocation_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgUpgradeConfigurationReq_Client2Server_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgUpgradeConfigurationReq_Client2Server_default_instance_;
    new (ptr) ::interfaces::msgUpgradeConfigurationReq_Client2Server();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgUpgradeConfigurationReq_Client2Server::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msgUpgradeConfigurationReq_Client2Server_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msgUpgradeConfigurationReq_Client2Server_Interfaces_2eproto}, {
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgUpgradeConfigurationRes_Server2Client_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgUpgradeConfigurationRes_Server2Client_default_instance_;
    new (ptr) ::interfaces::msgUpgradeConfigurationRes_Server2Client();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgUpgradeConfigurationRes_Server2Client::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_msgUpgradeConfigurationRes_Server2Client_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_msgUpgradeConfigurationRes_Server2Client_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgVehicleConfig_Interfaces_2eproto.base,
      &scc_info_msgPoliceConfig_Interfaces_2eproto.base,
      &scc_info_msgVPKILibConfig_Interfaces_2eproto.base,
      &scc_info_msgError_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgVPKILibConfig_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgVPKILibConfig_default_instance_;
    new (ptr) ::interfaces::msgVPKILibConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgVPKILibConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_msgVPKILibConfig_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_msgVPKILibConfig_Interfaces_2eproto}, {
      &scc_info_msgVPKILibConfig_msgTicketPolicy_Interfaces_2eproto.base,
      &scc_info_msgVPKILibConfig_msgPsnymPolicy_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgVPKILibConfig_msgPsnymPolicy_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgVPKILibConfig_msgPsnymPolicy_default_instance_;
    new (ptr) ::interfaces::msgVPKILibConfig_msgPsnymPolicy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgVPKILibConfig_msgPsnymPolicy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgVPKILibConfig_msgPsnymPolicy_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgVPKILibConfig_msgPsnymPolicy_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgVPKILibConfig_msgTicketPolicy_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgVPKILibConfig_msgTicketPolicy_default_instance_;
    new (ptr) ::interfaces::msgVPKILibConfig_msgTicketPolicy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgVPKILibConfig_msgTicketPolicy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgVPKILibConfig_msgTicketPolicy_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgVPKILibConfig_msgTicketPolicy_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgVehicleAttributes_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgVehicleAttributes_default_instance_;
    new (ptr) ::interfaces::msgVehicleAttributes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgVehicleAttributes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgVehicleAttributes_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgVehicleAttributes_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgVehicleConfig_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgVehicleConfig_default_instance_;
    new (ptr) ::interfaces::msgVehicleConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgVehicleConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgVehicleConfig_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgVehicleConfig_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgVoucherReq_V2LTCA_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgVoucherReq_V2LTCA_default_instance_;
    new (ptr) ::interfaces::msgVoucherReq_V2LTCA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgVoucherReq_V2LTCA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgVoucherReq_V2LTCA_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgVoucherReq_V2LTCA_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgVoucherRes_LTCA2V_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgVoucherRes_LTCA2V_default_instance_;
    new (ptr) ::interfaces::msgVoucherRes_LTCA2V();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgVoucherRes_LTCA2V::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_msgVoucherRes_LTCA2V_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_msgVoucherRes_LTCA2V_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgError_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgWAVECRL_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgWAVECRL_default_instance_;
    new (ptr) ::interfaces::msgWAVECRL();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgWAVECRL::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_msgWAVECRL_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_msgWAVECRL_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgToBeSignedCRL_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgWAVECertificateRequest_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgWAVECertificateRequest_default_instance_;
    new (ptr) ::interfaces::msgWAVECertificateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgWAVECertificateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_msgWAVECertificateRequest_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_msgWAVECertificateRequest_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgToBeSignedCSR_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgWAVECertificateResponse_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgWAVECertificateResponse_default_instance_;
    new (ptr) ::interfaces::msgWAVECertificateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgWAVECertificateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msgWAVECertificateResponse_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msgWAVECertificateResponse_Interfaces_2eproto}, {
      &scc_info_msgWAVECRL_Interfaces_2eproto.base,}};

static void InitDefaultsscc_info_msgWSASignerScope_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgWSASignerScope_default_instance_;
    new (ptr) ::interfaces::msgWSASignerScope();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgWSASignerScope::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgWSASignerScope_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgWSASignerScope_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgX509CertReq_V2LTCA_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgX509CertReq_V2LTCA_default_instance_;
    new (ptr) ::interfaces::msgX509CertReq_V2LTCA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgX509CertReq_V2LTCA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgX509CertReq_V2LTCA_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgX509CertReq_V2LTCA_Interfaces_2eproto}, {}};

static void InitDefaultsscc_info_msgX509CertRes_LTCA2V_Interfaces_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_msgX509CertRes_LTCA2V_default_instance_;
    new (ptr) ::interfaces::msgX509CertRes_LTCA2V();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::msgX509CertRes_LTCA2V::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_msgX509CertRes_LTCA2V_Interfaces_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_msgX509CertRes_LTCA2V_Interfaces_2eproto}, {
      &scc_info_msgSignerInfo_Interfaces_2eproto.base,
      &scc_info_msgError_Interfaces_2eproto.base,
      &scc_info_msgSignature_Interfaces_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Interfaces_2eproto[101];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Interfaces_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Interfaces_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Interfaces_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReqProfile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReqProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReqProfile, strreqidentification_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReqProfile, inonce_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgSignature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgSignature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgSignature, uicurveorderoctets_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgSignature, uisignlen_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgSignature, strsignature_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgError, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgError, ierrcode_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgError, strerrmsgdes_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgECPublicKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgECPublicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgECPublicKey, uipsnympublickeylen_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgECPublicKey, strpsnympublickey_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgSignerIdentifierType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgSubType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgSubTypeFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgAIDType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRegionType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgWSASignerScope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRequestScopeType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVoucherReq_V2LTCA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVoucherReq_V2LTCA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVoucherReq_V2LTCA, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVoucherReq_V2LTCA, strusername_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVoucherReq_V2LTCA, strpwd_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVoucherReq_V2LTCA, stremailaddress_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVoucherReq_V2LTCA, strcaptcha_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVoucherReq_V2LTCA, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVoucherReq_V2LTCA, ttimestamp_),
  4,
  0,
  1,
  2,
  3,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVoucherRes_LTCA2V, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVoucherRes_LTCA2V, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVoucherRes_LTCA2V, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVoucherRes_LTCA2V, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVoucherRes_LTCA2V, strvoucher_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVoucherRes_LTCA2V, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVoucherRes_LTCA2V, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVoucherRes_LTCA2V, sterrinfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVoucherRes_LTCA2V, stsign_),
  4,
  1,
  0,
  5,
  6,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgX509CertReq_V2LTCA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgX509CertReq_V2LTCA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgX509CertReq_V2LTCA, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgX509CertReq_V2LTCA, iltcaidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgX509CertReq_V2LTCA, strproofofpossessionvoucher_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgX509CertReq_V2LTCA, strdnsextension_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgX509CertReq_V2LTCA, strkeyusage_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgX509CertReq_V2LTCA, strextendedkeyusage_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgX509CertReq_V2LTCA, strx509certreq_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgX509CertReq_V2LTCA, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgX509CertReq_V2LTCA, ttimestamp_),
  6,
  7,
  0,
  1,
  2,
  3,
  4,
  5,
  8,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgX509CertRes_LTCA2V, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgX509CertRes_LTCA2V, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgX509CertRes_LTCA2V, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgX509CertRes_LTCA2V, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgX509CertRes_LTCA2V, strreqidentification_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgX509CertRes_LTCA2V, strx509cert_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgX509CertRes_LTCA2V, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgX509CertRes_LTCA2V, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgX509CertRes_LTCA2V, sterrinfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgX509CertRes_LTCA2V, stsign_),
  5,
  2,
  0,
  1,
  6,
  7,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgCRLType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTwoDLocation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTwoDLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTwoDLocation, latitude_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTwoDLocation, longitude_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgCircularRegion, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgCircularRegion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgCircularRegion, stcenter_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgCircularRegion, radius_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRectangularRegion, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRectangularRegion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRectangularRegion, stupperleft_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRectangularRegion, stlowerright_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgApplicationID, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgApplicationID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgApplicationID, type_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgApplicationID, acid_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgApplicationID, acm_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgOBUIdentifiedScope, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgOBUIdentifiedScope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgOBUIdentifiedScope, certspecificdata_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgOBUIdentifiedScope, stappid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgGeographicRegion, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgGeographicRegion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgGeographicRegion, regiontype_),
  0,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgIdentifiedScope, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgIdentifiedScope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgIdentifiedScope, subjectname_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgIdentifiedScope, stappid_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgIdentifiedScope, stgeoregion_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgAppIDAndPriority, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgAppIDAndPriority, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgAppIDAndPriority, type_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgAppIDAndPriority, acid_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgAppIDAndPriority, acm_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgAppIDAndPriority, maxpriority_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgCAScope, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgCAScope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgCAScope, tf_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgCAScope, stappid_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgCAScope, stappsandpriorities_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgCAScope, stgeoregion_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgCertSpecificData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgCertSpecificData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgCertSpecificData, subjecttype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgCertSpecificData, scopeca_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgCertSpecificData, responsiblecrlseries_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgCertSpecificData, wsascope_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgCertSpecificData, scopeid_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgCertSpecificData, scopeobu_),
  3,
  0,
  4,
  5,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgToBeSignedWAVECertificate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgToBeSignedWAVECertificate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgToBeSignedWAVECertificate, uicertificateversion_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgToBeSignedWAVECertificate, subjecttype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgToBeSignedWAVECertificate, isignerid_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgToBeSignedWAVECertificate, stcertscope_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgToBeSignedWAVECertificate, uicrlseries_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgToBeSignedWAVECertificate, strpsnymcertserialno_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgToBeSignedWAVECertificate, strpsnymcertidentifiablekey_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgToBeSignedWAVECertificate, tisvalidfrom_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgToBeSignedWAVECertificate, tisvalidto_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgToBeSignedWAVECertificate, stpsnympublickey_),
  4,
  5,
  7,
  2,
  6,
  0,
  1,
  8,
  9,
  3,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertFormat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertFormat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertFormat, uicertificateversion_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertFormat, stcertificate_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertFormat, stsign_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgSignerInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgSignerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgSignerInfo, type_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgSignerInfo, strcertificate_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgSignerInfo, strdigest_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgSignerInfo, strcertificateschain_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymKeysStorage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymKeysStorage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymKeysStorage, ipsnymprivatekeylen_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymKeysStorage, strpsnymprivatekey_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymKeysStorage, stpsnymcert_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketReq, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketReq, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketReq, uiservices_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketReq, uipsnymcertnorequest_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketReq, iltcaidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketReq, ipcaidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketReq, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketReq, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketReq, tpsnymstarttime_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketReq, tpsnymendtime_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketReq, strx509cert_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketReq, stsign_),
  5,
  1,
  3,
  4,
  6,
  7,
  8,
  9,
  10,
  11,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgForeignTicketReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgForeignTicketReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgForeignTicketReq, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgForeignTicketReq, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgForeignTicketReq, uiservices_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgForeignTicketReq, inativeltcacertlength_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgForeignTicketReq, strnativeltcacert_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgForeignTicketReq, inativeticketlength_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgForeignTicketReq, strnativeticket_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgForeignTicketReq, uipsnymcertnorequest_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgForeignTicketReq, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgForeignTicketReq, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgForeignTicketReq, stsign_),
  6,
  2,
  4,
  7,
  0,
  8,
  1,
  5,
  9,
  10,
  3,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVehicleAttributes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVehicleAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVehicleAttributes, chrole_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVehicleAttributes, uiservices_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVehicleAttributes, chtypeofvehicle_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVehicleAttributes, chpolicyid_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketFormat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketFormat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketFormat, itickettype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketFormat, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketFormat, strticketserialno_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketFormat, strticketidentifiablekey_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketFormat, iltcaidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketFormat, ipcaidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketFormat, uimaxnopsnymcert_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketFormat, stvehiclerole_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketFormat, bisforeignticket_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketFormat, tticketstarttime_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketFormat, tticketlifetime_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketFormat, tpsnymstarttime_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketFormat, tpsnymexpirytime_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketFormat, stsign_),
  8,
  2,
  0,
  1,
  9,
  7,
  5,
  3,
  6,
  10,
  11,
  12,
  13,
  4,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketRes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketRes, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketRes, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketRes, iticketsize_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketRes, strticket_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketRes, uimaxnopsnymcert_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketRes, iltcaidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketRes, ipcaidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketRes, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketRes, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketRes, sterrinfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketRes, stsign_),
  6,
  1,
  7,
  0,
  4,
  8,
  9,
  5,
  10,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgToBeSignedCSR, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgToBeSignedCSR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgToBeSignedCSR, csrversion_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgToBeSignedCSR, subjecttype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgToBeSignedCSR, requesttype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgToBeSignedCSR, typespecificdata_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgToBeSignedCSR, stecpsnympublickey_),
  2,
  3,
  4,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgWAVECertificateRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgWAVECertificateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgWAVECertificateRequest, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgWAVECertificateRequest, unsignedcsr_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgWAVECertificateRequest, stsign_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertReq_V2PCA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertReq_V2PCA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertReq_V2PCA, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertReq_V2PCA, iticketsize_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertReq_V2PCA, strticket_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertReq_V2PCA, iltcaidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertReq_V2PCA, ipcaidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertReq_V2PCA, ilocation_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertReq_V2PCA, uipsnymcertno_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertReq_V2PCA, pstpsnymcertreq_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertReq_V2PCA, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertReq_V2PCA, ttimestamp_),
  2,
  3,
  0,
  4,
  5,
  6,
  1,
  ~0u,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertRes_PCA2V, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertRes_PCA2V, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertRes_PCA2V, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertRes_PCA2V, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertRes_PCA2V, strreqidentification_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertRes_PCA2V, iltcaidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertRes_PCA2V, ipcaidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertRes_PCA2V, uipsnymcertno_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertRes_PCA2V, stpsnymcert_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertRes_PCA2V, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertRes_PCA2V, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertRes_PCA2V, sterrinfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertRes_PCA2V, stsign_),
  5,
  1,
  0,
  6,
  7,
  4,
  ~0u,
  8,
  9,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertAck_V2PCA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertAck_V2PCA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertAck_V2PCA, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertAck_V2PCA, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertAck_V2PCA, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCertAck_V2PCA, sterrinfo_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCRLFormat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCRLFormat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCRLFormat, strpsnymcrlserialno_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCRLFormat, uirevokedpsnymcertno_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCRLFormat, strrevokedpsnymcertserialno_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCRLFormat, ttimestamp_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgIDAndDate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgIDAndDate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgIDAndDate, strid_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgIDAndDate, expiry_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgToBeSignedCRL, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgToBeSignedCRL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgToBeSignedCRL, type_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgToBeSignedCRL, crlseries_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgToBeSignedCRL, icaid_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgToBeSignedCRL, crlserial_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgToBeSignedCRL, tstartperiod_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgToBeSignedCRL, tissuedate_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgToBeSignedCRL, tnextcrl_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgToBeSignedCRL, uirevokedpsnymno_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgToBeSignedCRL, strrevokedpsnymcertserialno_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgToBeSignedCRL, stentriesidanddate_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgWAVECRL, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgWAVECRL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgWAVECRL, uiwavecrlversion_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgWAVECRL, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgWAVECRL, sttobesignedcrl_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgWAVECRL, stsign_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgWAVECertificateResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgWAVECertificateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgWAVECertificateResponse, stcrlpath_),
  0,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCRLReq_V2PCA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCRLReq_V2PCA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCRLReq_V2PCA, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCRLReq_V2PCA, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCRLReq_V2PCA, uicurrentcrlversion_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCRLReq_V2PCA, ipcaidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCRLReq_V2PCA, iregionid_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCRLReq_V2PCA, ipsnymcertlen_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCRLReq_V2PCA, strpsnymcert_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCRLReq_V2PCA, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCRLReq_V2PCA, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCRLReq_V2PCA, stsign_),
  5,
  1,
  3,
  6,
  7,
  8,
  0,
  4,
  9,
  2,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCRLRes_PCA2V, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCRLRes_PCA2V, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCRLRes_PCA2V, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCRLRes_PCA2V, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCRLRes_PCA2V, ipcaidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCRLRes_PCA2V, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCRLRes_PCA2V, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCRLRes_PCA2V, sterrinfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCRLRes_PCA2V, strwavecrlres_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymCRLRes_PCA2V, stsign_),
  5,
  1,
  6,
  4,
  7,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymOCSPReq_V2PCA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymOCSPReq_V2PCA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymOCSPReq_V2PCA, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymOCSPReq_V2PCA, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymOCSPReq_V2PCA, ipcaidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymOCSPReq_V2PCA, iregionid_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymOCSPReq_V2PCA, uinoofpsnymstobechecked_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymOCSPReq_V2PCA, strpsnymsserialnotobechecked_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymOCSPReq_V2PCA, ipsnymcertlen_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymOCSPReq_V2PCA, strpsnymcert_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymOCSPReq_V2PCA, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymOCSPReq_V2PCA, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymOCSPReq_V2PCA, stsign_),
  5,
  1,
  6,
  7,
  3,
  ~0u,
  8,
  0,
  4,
  9,
  2,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymRevocationStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymRevocationStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymRevocationStatus, strpsnymserialno_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymRevocationStatus, brevocationstatus_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymOCSPRes_PCA2V, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymOCSPRes_PCA2V, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymOCSPRes_PCA2V, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymOCSPRes_PCA2V, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymOCSPRes_PCA2V, ipcaidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymOCSPRes_PCA2V, uinoofpsnymstobechecked_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymOCSPRes_PCA2V, strevocationstatus_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymOCSPRes_PCA2V, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymOCSPRes_PCA2V, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymOCSPRes_PCA2V, sterrinfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymOCSPRes_PCA2V, stsign_),
  5,
  0,
  6,
  3,
  ~0u,
  4,
  7,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertReq_P2RA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertReq_P2RA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertReq_P2RA, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertReq_P2RA, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertReq_P2RA, ipcaidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertReq_P2RA, strecsecmanecpubkey_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertReq_P2RA, uinoofpsnymstoberevoked_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertReq_P2RA, strrevokedpsnymcert_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertReq_P2RA, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertReq_P2RA, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertReq_P2RA, stsign_),
  5,
  1,
  6,
  0,
  3,
  ~0u,
  4,
  7,
  2,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertReq_RA2PCA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertReq_RA2PCA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertReq_RA2PCA, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertReq_RA2PCA, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertReq_RA2PCA, uinoofpsnymstoberevoked_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertReq_RA2PCA, strrevokedpsnymcert_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertReq_RA2PCA, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertReq_RA2PCA, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertReq_RA2PCA, stsign_),
  3,
  0,
  2,
  ~0u,
  4,
  5,
  1,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertRes_PCA2RA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertRes_PCA2RA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertRes_PCA2RA, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertRes_PCA2RA, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertRes_PCA2RA, uinoofpsnymstoberevoked_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertRes_PCA2RA, uinoofsuccessfullyrevokedpsnyms_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertRes_PCA2RA, uinoofsuccessfullyrevokedtickets_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokeX509CertReq_RA2LTCA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokeX509CertReq_RA2LTCA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokeX509CertReq_RA2LTCA, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokeX509CertReq_RA2LTCA, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokeX509CertReq_RA2LTCA, uinoofpsnymstoberevoked_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokeX509CertReq_RA2LTCA, strticketserialno_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokeX509CertReq_RA2LTCA, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokeX509CertReq_RA2LTCA, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokeX509CertReq_RA2LTCA, stsign_),
  3,
  0,
  2,
  ~0u,
  4,
  5,
  1,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo, ierrgensource_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo, stdetailederrinfo_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertRes_RA2P, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertRes_RA2P, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertRes_RA2P, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertRes_RA2P, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertRes_RA2P, uinoofpsnymstoberevoked_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertRes_RA2P, uinoofsuccessfullyrevokedx509cert_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertRes_RA2P, uinoofsuccessfullyrevokedpsnyms_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertRes_RA2P, pstpsnymrevocationerrinfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertRes_RA2P, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertRes_RA2P, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertRes_RA2P, sterrinfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgRevokePsnymCertRes_RA2P, stsign_),
  6,
  0,
  3,
  4,
  5,
  ~0u,
  7,
  8,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_Police2RA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_Police2RA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_Police2RA, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_Police2RA, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_Police2RA, uinoofpsnymstoberesolved_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_Police2RA, strpsnymsserialnotoberesolved_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_Police2RA, ipoliceid_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_Police2RA, iraidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_Police2RA, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_Police2RA, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_Police2RA, stsign_),
  3,
  0,
  2,
  ~0u,
  4,
  5,
  6,
  7,
  1,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_RA2PCA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_RA2PCA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_RA2PCA, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_RA2PCA, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_RA2PCA, uinoofpsnymstoberesolved_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_RA2PCA, strpsnymsserialnotoberesolved_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_RA2PCA, iraidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_RA2PCA, ipcaidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_RA2PCA, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_RA2PCA, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_RA2PCA, stsign_),
  3,
  0,
  2,
  ~0u,
  4,
  5,
  6,
  7,
  1,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_PCA2RA_msgPsnymResolution, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_PCA2RA_msgPsnymResolution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_PCA2RA_msgPsnymResolution, strpsnymcertserialno_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_PCA2RA_msgPsnymResolution, strticketserialno_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_PCA2RA_msgPsnymResolution, strticketidentifiablekey_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_PCA2RA_msgPsnymResolution, sterrinfo_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_PCA2RA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_PCA2RA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_PCA2RA, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_PCA2RA, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_PCA2RA, uinoofpsnymstoberesolved_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_PCA2RA, pstpsnymresolutioninfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_PCA2RA, iraidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_PCA2RA, ipcaidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_PCA2RA, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_PCA2RA, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_PCA2RA, sterrinfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_PCA2RA, stsign_),
  4,
  0,
  3,
  ~0u,
  5,
  6,
  7,
  8,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution, strticketserialno_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution, strticketidentifiablekey_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_RA2LTCA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_RA2LTCA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_RA2LTCA, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_RA2LTCA, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_RA2LTCA, uinoofpsnymstoberesolved_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_RA2LTCA, pstpsnymresolutioninfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_RA2LTCA, iraidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_RA2LTCA, iltcaidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_RA2LTCA, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_RA2LTCA, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionReq_RA2LTCA, stsign_),
  3,
  0,
  2,
  ~0u,
  4,
  5,
  6,
  7,
  1,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution, strticketserialno_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution, strvehx509certserialno_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution, strticketidentifiablekey_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution, sterrinfo_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_LTCA2RA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_LTCA2RA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_LTCA2RA, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_LTCA2RA, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_LTCA2RA, uinoofpsnymstoberesolved_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_LTCA2RA, pstpsnymresolutioninfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_LTCA2RA, iraidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_LTCA2RA, iltcaidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_LTCA2RA, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_LTCA2RA, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_LTCA2RA, sterrinfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_LTCA2RA, stsign_),
  4,
  0,
  3,
  ~0u,
  5,
  6,
  7,
  8,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_RA2Police_msgPsnymResolution, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_RA2Police_msgPsnymResolution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_RA2Police_msgPsnymResolution, strpsnymserialno_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_RA2Police_msgPsnymResolution, strvehx509certserialno_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_RA2Police_msgPsnymResolution, sterrinfo_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_RA2Police, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_RA2Police, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_RA2Police, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_RA2Police, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_RA2Police, uinoofpsnymstoberesolved_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_RA2Police, pstpsnymresolutioninfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_RA2Police, iraidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_RA2Police, iltcaidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_RA2Police, ipcaidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_RA2Police, ipoliceid_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_RA2Police, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_RA2Police, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_RA2Police, sterrinfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionRes_RA2Police, stsign_),
  4,
  0,
  3,
  ~0u,
  5,
  6,
  7,
  8,
  9,
  10,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionAck_Police2RA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionAck_Police2RA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionAck_Police2RA, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionAck_Police2RA, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionAck_Police2RA, uinoofpsnymstoberesolved_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionAck_Police2RA, ipoliceid_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionAck_Police2RA, iraidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionAck_Police2RA, pstpsnymresolutionerrinfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionAck_Police2RA, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionAck_Police2RA, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionAck_Police2RA, sterrinfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymResolutionAck_Police2RA, stsign_),
  4,
  0,
  3,
  5,
  6,
  ~0u,
  7,
  8,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsReq_Police2RA_msgBannedTickets, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsReq_Police2RA_msgBannedTickets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsReq_Police2RA_msgBannedTickets, strserialno_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsReq_Police2RA_msgBannedTickets, strticket_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsReq_Police2RA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsReq_Police2RA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsReq_Police2RA, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsReq_Police2RA, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsReq_Police2RA, chpolicyid_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsReq_Police2RA, uinoofticketstobebanned_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsReq_Police2RA, pstbannedticketsinfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsReq_Police2RA, ipoliceid_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsReq_Police2RA, iraidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsReq_Police2RA, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsReq_Police2RA, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsReq_Police2RA, stsign_),
  4,
  0,
  2,
  3,
  ~0u,
  5,
  6,
  7,
  8,
  1,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsReq_RA2PCA_msgBannedTickets, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsReq_RA2PCA_msgBannedTickets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsReq_RA2PCA_msgBannedTickets, strserialno_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsReq_RA2PCA_msgBannedTickets, strticket_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsReq_RA2PCA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsReq_RA2PCA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsReq_RA2PCA, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsReq_RA2PCA, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsReq_RA2PCA, chpolicyid_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsReq_RA2PCA, uinoofticketstobebanned_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsReq_RA2PCA, pstbannedticketsinfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsReq_RA2PCA, iraidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsReq_RA2PCA, iltcaidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsReq_RA2PCA, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsReq_RA2PCA, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsReq_RA2PCA, stsign_),
  4,
  0,
  2,
  3,
  ~0u,
  5,
  6,
  7,
  8,
  1,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_PCA2RA_msgBannedTickets, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_PCA2RA_msgBannedTickets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_PCA2RA_msgBannedTickets, strticketserialno_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_PCA2RA_msgBannedTickets, sterrinfo_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_PCA2RA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_PCA2RA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_PCA2RA, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_PCA2RA, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_PCA2RA, uinoofticketstobebanned_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_PCA2RA, uinoofsuccessfullybannedtickets_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_PCA2RA, pstbannedticketsinfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_PCA2RA, iraidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_PCA2RA, iltcaidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_PCA2RA, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_PCA2RA, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_PCA2RA, sterrinfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_PCA2RA, stsign_),
  5,
  0,
  3,
  4,
  ~0u,
  6,
  7,
  8,
  9,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_RA2Police_msgBannedTickets, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_RA2Police_msgBannedTickets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_RA2Police_msgBannedTickets, strticketserialno_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_RA2Police_msgBannedTickets, iticketlen_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_RA2Police_msgBannedTickets, strticket_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_RA2Police_msgBannedTickets, sterrinfo_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_RA2Police, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_RA2Police, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_RA2Police, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_RA2Police, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_RA2Police, uinoofticketstobebanned_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_RA2Police, uinoofsuccessfullybannedtickets_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_RA2Police, pstbannedticketsinfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_RA2Police, iraidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_RA2Police, iltcaidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_RA2Police, ipcaidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_RA2Police, ipoliceid_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_RA2Police, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_RA2Police, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_RA2Police, sterrinfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsRes_RA2Police, stsign_),
  5,
  0,
  3,
  4,
  ~0u,
  6,
  7,
  8,
  9,
  10,
  11,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsAck_Police2RA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsAck_Police2RA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsAck_Police2RA, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsAck_Police2RA, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsAck_Police2RA, uinoofticketstobebanned_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsAck_Police2RA, ipoliceid_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsAck_Police2RA, iraidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsAck_Police2RA, pstticketerrinfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsAck_Police2RA, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsAck_Police2RA, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsAck_Police2RA, sterrinfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgBanTicketsAck_Police2RA, stsign_),
  4,
  0,
  3,
  5,
  6,
  ~0u,
  7,
  8,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVehicleConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVehicleConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVehicleConfig, strltcaserverurl_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVehicleConfig, strpcaserverurl_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVehicleConfig, strraserverurl_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVehicleConfig, strltcamethodname_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVehicleConfig, strpcamethodname_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVehicleConfig, strramethodname_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVehicleConfig, lmaxxmlrpclimitbuffersize_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVehicleConfig, fversion_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPoliceConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPoliceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPoliceConfig, strltcaserverurl_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPoliceConfig, strpcaserverurl_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPoliceConfig, strraserverurl_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPoliceConfig, strltcamethodname_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPoliceConfig, strpcamethodname_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPoliceConfig, strramethodname_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPoliceConfig, lmaxxmlrpclimitbuffersize_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPoliceConfig, fversion_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig_msgTicketPolicy, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig_msgTicketPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig_msgTicketPolicy, bticketreusability_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig_msgTicketPolicy, uimaxnoofticketstoobtainperhour_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig_msgTicketPolicy, uiminnoofticketstoreq_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig_msgTicketPolicy, uimaxnoofticketstoreq_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig_msgTicketPolicy, uiminnoofticketstorevoke_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig_msgTicketPolicy, uimaxnoofticketstorevoke_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig_msgTicketPolicy, uiminnoofticketstoban_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig_msgTicketPolicy, uimaxnoofticketstoban_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig_msgTicketPolicy, uibanticketperiod_),
  8,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig_msgPsnymPolicy, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig_msgPsnymPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig_msgPsnymPolicy, strresponsiblenodetorevokepsnyms_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig_msgPsnymPolicy, uimaxnoofpsnymcerttoobtainperhour_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig_msgPsnymPolicy, uimaxnoofpsnymcertrequsingaticket_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig_msgPsnymPolicy, uiminnoofpsnymcerttoreq_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig_msgPsnymPolicy, uimaxnoofpsnymcerttoreq_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig_msgPsnymPolicy, uiminnoofpsnymcerttoresolve_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig_msgPsnymPolicy, uimaxnoofpsnymcerttoresolve_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig_msgPsnymPolicy, uiminnoofpsnymcerttorevoke_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig_msgPsnymPolicy, uimaxnoofpsnymcerttorevoke_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig_msgPsnymPolicy, uimaxnumofpsnymcerttoobtainperreq_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig_msgPsnymPolicy, strpsnymoverlappingmechanism_),
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  1,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig, ircaid_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig, ipcaid_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig, iltcaid_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig, iraid_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig, ipoliceid_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig, iregionid_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig, ilocationid_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig, strgethelpcommandname_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig, stticketpolicies_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig, stpsnympolicies_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig, imaxdelaythreashold_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig, ipsnymissuancevalidityperiod_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig, iticketvalidityperiod_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig, irandvaluethreashold_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig, icryptobuffsize_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig, uisignaturesize_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig, itimestamplowerbound_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig, itimestampupperbound_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig, icurrentcrlversion_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig, inonceincreasingvalue_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgVPKILibConfig, fvpkiversion_),
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  0,
  ~0u,
  ~0u,
  10,
  11,
  12,
  13,
  14,
  1,
  15,
  16,
  17,
  18,
  2,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgUpgradeConfigurationReq_Client2Server, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgUpgradeConfigurationReq_Client2Server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgUpgradeConfigurationReq_Client2Server, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgUpgradeConfigurationReq_Client2Server, ipcaidrange_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgUpgradeConfigurationReq_Client2Server, iregionid_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgUpgradeConfigurationReq_Client2Server, ipsnymcertlen_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgUpgradeConfigurationReq_Client2Server, strpsnymcert_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgUpgradeConfigurationReq_Client2Server, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgUpgradeConfigurationReq_Client2Server, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgUpgradeConfigurationReq_Client2Server, stsign_),
  3,
  4,
  5,
  6,
  0,
  2,
  7,
  1,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgUpgradeConfigurationRes_Server2Client, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgUpgradeConfigurationRes_Server2Client, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgUpgradeConfigurationRes_Server2Client, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgUpgradeConfigurationRes_Server2Client, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgUpgradeConfigurationRes_Server2Client, stvehconfig_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgUpgradeConfigurationRes_Server2Client, stpoliceconfig_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgUpgradeConfigurationRes_Server2Client, stvpkilibconfig_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgUpgradeConfigurationRes_Server2Client, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgUpgradeConfigurationRes_Server2Client, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgUpgradeConfigurationRes_Server2Client, sterrinfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgUpgradeConfigurationRes_Server2Client, stsign_),
  6,
  0,
  1,
  2,
  3,
  7,
  8,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_Police2RA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_Police2RA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_Police2RA, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_Police2RA, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_Police2RA, inoofx509certtoberesolved_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_Police2RA, strx509cert_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_Police2RA, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_Police2RA, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_Police2RA, stsign_),
  3,
  0,
  4,
  ~0u,
  2,
  5,
  1,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_RA2LTCA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_RA2LTCA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_RA2LTCA, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_RA2LTCA, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_RA2LTCA, inoofx509certtoberesolved_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_RA2LTCA, strx509cert_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_RA2LTCA, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_RA2LTCA, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_RA2LTCA, stsign_),
  3,
  0,
  4,
  ~0u,
  2,
  5,
  1,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_LTCA2RA_msgTicket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_LTCA2RA_msgTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_LTCA2RA_msgTicket, strticketserialno_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_LTCA2RA_msgTicket, strticket_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution, strvehx509certserialno_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution, inoofresolvedticket_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution, pstticketinfo_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_LTCA2RA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_LTCA2RA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_LTCA2RA, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_LTCA2RA, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_LTCA2RA, inoofx509certtoberesolved_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_LTCA2RA, pstticketresolutioninfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_LTCA2RA, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_LTCA2RA, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_LTCA2RA, sterrinfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_LTCA2RA, stsign_),
  4,
  0,
  5,
  ~0u,
  3,
  6,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_RA2PCA_msgTicket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_RA2PCA_msgTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_RA2PCA_msgTicket, strticketserialno_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_RA2PCA_msgTicket, strticket_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution, inoofresolvedticket_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution, pstticketinfo_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_RA2PCA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_RA2PCA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_RA2PCA, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_RA2PCA, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_RA2PCA, inoofx509certtoberesolved_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_RA2PCA, pstticketresolutioninfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_RA2PCA, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_RA2PCA, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionReq_RA2PCA, stsign_),
  3,
  0,
  4,
  ~0u,
  2,
  5,
  1,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_PCA2RA_msgPsnym, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_PCA2RA_msgPsnym, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_PCA2RA_msgPsnym, strticketserialno_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_PCA2RA_msgPsnym, strpsnym_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution, inoofresolvedpsnyms_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution, pstticketinfo_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution, strpsnymcertserialno_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution, strticketserialno_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution, strticketidentifiablekey_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_PCA2RA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_PCA2RA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_PCA2RA, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_PCA2RA, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_PCA2RA, inoofx509certtoberesolved_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_PCA2RA, pstticketresolutioninfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_PCA2RA, pstpsnymresolutioninfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_PCA2RA, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_PCA2RA, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_PCA2RA, sterrinfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_PCA2RA, stsign_),
  4,
  0,
  5,
  ~0u,
  ~0u,
  3,
  6,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution, inoofresolvedpsnyms_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution, strpsnymcert_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_RA2Police, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_RA2Police, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_RA2Police, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_RA2Police, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_RA2Police, inoofx509certtoberesolved_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_RA2Police, pstpsnymresolutioninfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_RA2Police, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_RA2Police, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_RA2Police, sterrinfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgReversePsnymResolutionRes_RA2Police, stsign_),
  4,
  0,
  5,
  ~0u,
  3,
  6,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketProvisionValidationReq_LTCA2TVR, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketProvisionValidationReq_LTCA2TVR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketProvisionValidationReq_LTCA2TVR, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketProvisionValidationReq_LTCA2TVR, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketProvisionValidationReq_LTCA2TVR, strltcaecpubkey_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketProvisionValidationReq_LTCA2TVR, strhashedvehiltcert_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketProvisionValidationReq_LTCA2TVR, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketProvisionValidationReq_LTCA2TVR, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketProvisionValidationReq_LTCA2TVR, stsign_),
  4,
  2,
  0,
  1,
  5,
  6,
  3,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketProvisionValidationRes_TVR2LTCA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketProvisionValidationRes_TVR2LTCA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketProvisionValidationRes_TVR2LTCA, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketProvisionValidationRes_TVR2LTCA, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketProvisionValidationRes_TVR2LTCA, chstatus_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketProvisionValidationRes_TVR2LTCA, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketProvisionValidationRes_TVR2LTCA, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketProvisionValidationRes_TVR2LTCA, sterrinfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgTicketProvisionValidationRes_TVR2LTCA, stsign_),
  4,
  0,
  3,
  5,
  6,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymProvisionValidationReq_PCA2PVR, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymProvisionValidationReq_PCA2PVR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymProvisionValidationReq_PCA2PVR, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymProvisionValidationReq_PCA2PVR, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymProvisionValidationReq_PCA2PVR, strpcaecpubkey_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymProvisionValidationReq_PCA2PVR, strhashedticket_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymProvisionValidationReq_PCA2PVR, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymProvisionValidationReq_PCA2PVR, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymProvisionValidationReq_PCA2PVR, stsign_),
  4,
  2,
  0,
  1,
  5,
  6,
  3,
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymProvisionValidationRes_PVR2PCA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymProvisionValidationRes_PVR2PCA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymProvisionValidationRes_PVR2PCA, ireqtype_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymProvisionValidationRes_PVR2PCA, stsigner_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymProvisionValidationRes_PVR2PCA, chstatus_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymProvisionValidationRes_PVR2PCA, inonce_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymProvisionValidationRes_PVR2PCA, ttimestamp_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymProvisionValidationRes_PVR2PCA, sterrinfo_),
  PROTOBUF_FIELD_OFFSET(::interfaces::msgPsnymProvisionValidationRes_PVR2PCA, stsign_),
  4,
  0,
  3,
  5,
  6,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::interfaces::msgReqProfile)},
  { 9, 17, sizeof(::interfaces::msgSignature)},
  { 20, 27, sizeof(::interfaces::msgError)},
  { 29, 36, sizeof(::interfaces::msgECPublicKey)},
  { 38, -1, sizeof(::interfaces::msgSignerIdentifierType)},
  { 43, -1, sizeof(::interfaces::msgSubType)},
  { 48, -1, sizeof(::interfaces::msgSubTypeFlags)},
  { 53, -1, sizeof(::interfaces::msgAIDType)},
  { 58, -1, sizeof(::interfaces::msgRegionType)},
  { 63, -1, sizeof(::interfaces::msgWSASignerScope)},
  { 68, -1, sizeof(::interfaces::msgRequestScopeType)},
  { 73, 85, sizeof(::interfaces::msgVoucherReq_V2LTCA)},
  { 92, 104, sizeof(::interfaces::msgVoucherRes_LTCA2V)},
  { 111, 125, sizeof(::interfaces::msgX509CertReq_V2LTCA)},
  { 134, 147, sizeof(::interfaces::msgX509CertRes_LTCA2V)},
  { 155, -1, sizeof(::interfaces::msgCRLType)},
  { 160, 167, sizeof(::interfaces::msgTwoDLocation)},
  { 169, 176, sizeof(::interfaces::msgCircularRegion)},
  { 178, 185, sizeof(::interfaces::msgRectangularRegion)},
  { 187, 195, sizeof(::interfaces::msgApplicationID)},
  { 198, 205, sizeof(::interfaces::msgOBUIdentifiedScope)},
  { 207, 213, sizeof(::interfaces::msgGeographicRegion)},
  { 214, 222, sizeof(::interfaces::msgIdentifiedScope)},
  { 225, 234, sizeof(::interfaces::msgAppIDAndPriority)},
  { 238, 247, sizeof(::interfaces::msgCAScope)},
  { 251, 262, sizeof(::interfaces::msgCertSpecificData)},
  { 268, 283, sizeof(::interfaces::msgToBeSignedWAVECertificate)},
  { 293, 301, sizeof(::interfaces::msgPsnymCertFormat)},
  { 304, 313, sizeof(::interfaces::msgSignerInfo)},
  { 317, 325, sizeof(::interfaces::msgPsnymKeysStorage)},
  { 328, 345, sizeof(::interfaces::msgTicketReq)},
  { 357, 373, sizeof(::interfaces::msgForeignTicketReq)},
  { 384, 393, sizeof(::interfaces::msgVehicleAttributes)},
  { 397, 416, sizeof(::interfaces::msgTicketFormat)},
  { 430, 446, sizeof(::interfaces::msgTicketRes)},
  { 457, 467, sizeof(::interfaces::msgToBeSignedCSR)},
  { 472, 480, sizeof(::interfaces::msgWAVECertificateRequest)},
  { 483, 498, sizeof(::interfaces::msgPsnymCertReq_V2PCA)},
  { 508, 524, sizeof(::interfaces::msgPsnymCertRes_PCA2V)},
  { 535, 544, sizeof(::interfaces::msgPsnymCertAck_V2PCA)},
  { 548, 557, sizeof(::interfaces::msgPsnymCRLFormat)},
  { 561, 568, sizeof(::interfaces::msgIDAndDate)},
  { 570, 585, sizeof(::interfaces::msgToBeSignedCRL)},
  { 595, 604, sizeof(::interfaces::msgWAVECRL)},
  { 608, 614, sizeof(::interfaces::msgWAVECertificateResponse)},
  { 615, 630, sizeof(::interfaces::msgPsnymCRLReq_V2PCA)},
  { 640, 653, sizeof(::interfaces::msgPsnymCRLRes_PCA2V)},
  { 661, 677, sizeof(::interfaces::msgPsnymOCSPReq_V2PCA)},
  { 688, 695, sizeof(::interfaces::msgPsnymRevocationStatus)},
  { 697, 711, sizeof(::interfaces::msgPsnymOCSPRes_PCA2V)},
  { 720, 734, sizeof(::interfaces::msgRevokePsnymCertReq_P2RA)},
  { 743, 755, sizeof(::interfaces::msgRevokePsnymCertReq_RA2PCA)},
  { 762, 772, sizeof(::interfaces::msgRevokePsnymCertRes_PCA2RA)},
  { 777, 789, sizeof(::interfaces::msgRevokeX509CertReq_RA2LTCA)},
  { 796, 803, sizeof(::interfaces::msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo)},
  { 805, 820, sizeof(::interfaces::msgRevokePsnymCertRes_RA2P)},
  { 830, 844, sizeof(::interfaces::msgPsnymResolutionReq_Police2RA)},
  { 853, 867, sizeof(::interfaces::msgPsnymResolutionReq_RA2PCA)},
  { 876, 885, sizeof(::interfaces::msgPsnymResolutionRes_PCA2RA_msgPsnymResolution)},
  { 889, 904, sizeof(::interfaces::msgPsnymResolutionRes_PCA2RA)},
  { 914, 921, sizeof(::interfaces::msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution)},
  { 923, 937, sizeof(::interfaces::msgPsnymResolutionReq_RA2LTCA)},
  { 946, 955, sizeof(::interfaces::msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution)},
  { 959, 974, sizeof(::interfaces::msgPsnymResolutionRes_LTCA2RA)},
  { 984, 992, sizeof(::interfaces::msgPsnymResolutionRes_RA2Police_msgPsnymResolution)},
  { 995, 1012, sizeof(::interfaces::msgPsnymResolutionRes_RA2Police)},
  { 1024, 1039, sizeof(::interfaces::msgPsnymResolutionAck_Police2RA)},
  { 1049, 1056, sizeof(::interfaces::msgBanTicketsReq_Police2RA_msgBannedTickets)},
  { 1058, 1073, sizeof(::interfaces::msgBanTicketsReq_Police2RA)},
  { 1083, 1090, sizeof(::interfaces::msgBanTicketsReq_RA2PCA_msgBannedTickets)},
  { 1092, 1107, sizeof(::interfaces::msgBanTicketsReq_RA2PCA)},
  { 1117, 1124, sizeof(::interfaces::msgBanTicketsRes_PCA2RA_msgBannedTickets)},
  { 1126, 1142, sizeof(::interfaces::msgBanTicketsRes_PCA2RA)},
  { 1153, 1162, sizeof(::interfaces::msgBanTicketsRes_RA2Police_msgBannedTickets)},
  { 1166, 1184, sizeof(::interfaces::msgBanTicketsRes_RA2Police)},
  { 1197, 1212, sizeof(::interfaces::msgBanTicketsAck_Police2RA)},
  { 1222, 1235, sizeof(::interfaces::msgVehicleConfig)},
  { 1243, 1256, sizeof(::interfaces::msgPoliceConfig)},
  { 1264, 1278, sizeof(::interfaces::msgVPKILibConfig_msgTicketPolicy)},
  { 1287, 1303, sizeof(::interfaces::msgVPKILibConfig_msgPsnymPolicy)},
  { 1314, 1340, sizeof(::interfaces::msgVPKILibConfig)},
  { 1361, 1374, sizeof(::interfaces::msgUpgradeConfigurationReq_Client2Server)},
  { 1382, 1396, sizeof(::interfaces::msgUpgradeConfigurationRes_Server2Client)},
  { 1405, 1417, sizeof(::interfaces::msgReversePsnymResolutionReq_Police2RA)},
  { 1424, 1436, sizeof(::interfaces::msgReversePsnymResolutionReq_RA2LTCA)},
  { 1443, 1450, sizeof(::interfaces::msgReversePsnymResolutionRes_LTCA2RA_msgTicket)},
  { 1452, 1460, sizeof(::interfaces::msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution)},
  { 1463, 1476, sizeof(::interfaces::msgReversePsnymResolutionRes_LTCA2RA)},
  { 1484, 1491, sizeof(::interfaces::msgReversePsnymResolutionReq_RA2PCA_msgTicket)},
  { 1493, 1500, sizeof(::interfaces::msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution)},
  { 1502, 1514, sizeof(::interfaces::msgReversePsnymResolutionReq_RA2PCA)},
  { 1521, 1528, sizeof(::interfaces::msgReversePsnymResolutionRes_PCA2RA_msgPsnym)},
  { 1530, 1537, sizeof(::interfaces::msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution)},
  { 1539, 1547, sizeof(::interfaces::msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution)},
  { 1550, 1564, sizeof(::interfaces::msgReversePsnymResolutionRes_PCA2RA)},
  { 1573, 1580, sizeof(::interfaces::msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution)},
  { 1582, 1595, sizeof(::interfaces::msgReversePsnymResolutionRes_RA2Police)},
  { 1603, 1615, sizeof(::interfaces::msgTicketProvisionValidationReq_LTCA2TVR)},
  { 1622, 1634, sizeof(::interfaces::msgTicketProvisionValidationRes_TVR2LTCA)},
  { 1641, 1653, sizeof(::interfaces::msgPsnymProvisionValidationReq_PCA2PVR)},
  { 1660, 1672, sizeof(::interfaces::msgPsnymProvisionValidationRes_PVR2PCA)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgReqProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgSignature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgECPublicKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgSignerIdentifierType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgSubType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgSubTypeFlags_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgAIDType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgRegionType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgWSASignerScope_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgRequestScopeType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgVoucherReq_V2LTCA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgVoucherRes_LTCA2V_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgX509CertReq_V2LTCA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgX509CertRes_LTCA2V_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgCRLType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgTwoDLocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgCircularRegion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgRectangularRegion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgApplicationID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgOBUIdentifiedScope_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgGeographicRegion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgIdentifiedScope_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgAppIDAndPriority_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgCAScope_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgCertSpecificData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgToBeSignedWAVECertificate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgPsnymCertFormat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgSignerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgPsnymKeysStorage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgTicketReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgForeignTicketReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgVehicleAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgTicketFormat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgTicketRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgToBeSignedCSR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgWAVECertificateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgPsnymCertReq_V2PCA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgPsnymCertRes_PCA2V_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgPsnymCertAck_V2PCA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgPsnymCRLFormat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgIDAndDate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgToBeSignedCRL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgWAVECRL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgWAVECertificateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgPsnymCRLReq_V2PCA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgPsnymCRLRes_PCA2V_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgPsnymOCSPReq_V2PCA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgPsnymRevocationStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgPsnymOCSPRes_PCA2V_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgRevokePsnymCertReq_P2RA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgRevokePsnymCertReq_RA2PCA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgRevokePsnymCertRes_PCA2RA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgRevokeX509CertReq_RA2LTCA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgRevokePsnymCertRes_RA2P_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgPsnymResolutionReq_Police2RA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgPsnymResolutionReq_RA2PCA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgPsnymResolutionRes_PCA2RA_msgPsnymResolution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgPsnymResolutionRes_PCA2RA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgPsnymResolutionReq_RA2LTCA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgPsnymResolutionRes_LTCA2RA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgPsnymResolutionRes_RA2Police_msgPsnymResolution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgPsnymResolutionRes_RA2Police_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgPsnymResolutionAck_Police2RA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgBanTicketsReq_Police2RA_msgBannedTickets_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgBanTicketsReq_Police2RA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgBanTicketsReq_RA2PCA_msgBannedTickets_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgBanTicketsReq_RA2PCA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgBanTicketsRes_PCA2RA_msgBannedTickets_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgBanTicketsRes_PCA2RA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgBanTicketsRes_RA2Police_msgBannedTickets_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgBanTicketsRes_RA2Police_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgBanTicketsAck_Police2RA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgVehicleConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgPoliceConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgVPKILibConfig_msgTicketPolicy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgVPKILibConfig_msgPsnymPolicy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgVPKILibConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgUpgradeConfigurationReq_Client2Server_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgUpgradeConfigurationRes_Server2Client_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgReversePsnymResolutionReq_Police2RA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgReversePsnymResolutionReq_RA2LTCA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgReversePsnymResolutionRes_LTCA2RA_msgTicket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgReversePsnymResolutionRes_LTCA2RA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgReversePsnymResolutionReq_RA2PCA_msgTicket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgReversePsnymResolutionReq_RA2PCA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgReversePsnymResolutionRes_PCA2RA_msgPsnym_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgReversePsnymResolutionRes_PCA2RA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgReversePsnymResolutionRes_RA2Police_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgTicketProvisionValidationReq_LTCA2TVR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgTicketProvisionValidationRes_TVR2LTCA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgPsnymProvisionValidationReq_PCA2PVR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_msgPsnymProvisionValidationRes_PVR2PCA_default_instance_),
};

const char descriptor_table_protodef_Interfaces_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020Interfaces.proto\022\ninterfaces\"C\n\rmsgReq"
  "Profile\022\036\n\024strReqIdentification\030\001 \002(\t:\000\022"
  "\022\n\006iNonce\030\002 \002(\005:\002-1\"[\n\014msgSignature\022\035\n\022u"
  "iCurveOrderOctets\030\001 \001(\r:\0010\022\024\n\tuiSignLen\030"
  "\002 \001(\r:\0010\022\026\n\014strSignature\030\003 \001(\t:\000\"9\n\010msgE"
  "rror\022\025\n\010iErrCode\030\001 \002(\005:\003100\022\026\n\014strErrMsg"
  "Des\030\002 \002(\t:\000\"M\n\016msgECPublicKey\022\036\n\023uiPsnym"
  "PublicKeyLen\030\001 \002(\r:\0010\022\033\n\021strPsnymPublicK"
  "ey\030\002 \002(\t:\000\"y\n\027msgSignerIdentifierType\"^\n"
  "\024SignerIdentifierType\022\017\n\013certificate\020\000\022\025"
  "\n\021certificateDigest\020\001\022\024\n\020certificateChai"
  "n\020\002\022\010\n\004self\020\004\"\226\001\n\nmsgSubType\"\207\001\n\013Subject"
  "Type\022\013\n\007wsa_ca1\020\000\022\006\n\002ca\020\001\022\016\n\nwsa_signer\020"
  "\002\022\007\n\003rsu\020\003\022\t\n\005psobu\020\004\022\022\n\016obu_identified\020"
  "\005\022\016\n\ncrl_signer\020\006\022\016\n\ncsr_signer\020\010\022\013\n\007roo"
  "t_ca\020\t\"\215\001\n\017msgSubTypeFlags\"z\n\020SubjectTyp"
  "eFlags\022\n\n\006wsa_ca\020\000\022\006\n\002ca\020\001\022\r\n\twsaSigner\020"
  "\002\022\007\n\003rsu\020\003\022\t\n\005psobu\020\004\022\021\n\robuIdentified\020\005"
  "\022\r\n\tcrlSigner\020\006\022\r\n\tcsrSigner\020\010\"L\n\nmsgAID"
  "Type\">\n\007AIDType\022\022\n\016fullySpecified\020\000\022\017\n\013m"
  "atchAnyAcm\020\001\022\016\n\nfromIssuer\020\002\"_\n\rmsgRegio"
  "nType\"N\n\nRegionType\022\016\n\nfromIssuer\020\000\022\n\n\006c"
  "ircle\020\001\022\r\n\trectangle\020\002\022\013\n\007polygon\020\003\022\010\n\004n"
  "one\020\004\"\237\001\n\021msgWSASignerScope\"\211\001\n\016WSASigne"
  "rScope\022,\n(wsaSignerAdvertisingSpecificAp"
  "plications\020\000\022%\n!wsaSignerOperateWithinCe"
  "rtainArea\020\001\022\"\n\036wsaSignerUniqueIdentifyin"
  "gName\020\002\"T\n\023msgRequestScopeType\"=\n\020Reques"
  "tScopeType\022\026\n\022specifiedInRequest\020\000\022\021\n\rsp"
  "ecifiedByCA\020\001\"\262\001\n\024msgVoucherReq_V2LTCA\022\024"
  "\n\010iReqType\030\001 \002(\005:\002-1\022\025\n\013strUserName\030\002 \002("
  "\t:\000\022\020\n\006strPwd\030\003 \002(\t:\000\022\031\n\017strEmailAddress"
  "\030\004 \002(\t:\000\022\024\n\nstrCaptcha\030\005 \002(\t:\000\022\022\n\006iNonce"
  "\030\006 \002(\005:\002-1\022\026\n\ntTimeStamp\030\007 \002(\003:\002-1\"\356\001\n\024m"
  "sgVoucherRes_LTCA2V\022\024\n\010iReqType\030\001 \002(\005:\002-"
  "1\022+\n\010stSigner\030\002 \001(\0132\031.interfaces.msgSign"
  "erInfo\022\024\n\nstrVoucher\030\003 \002(\t:\000\022\022\n\006iNonce\030\004"
  " \002(\005:\002-1\022\026\n\ntTimeStamp\030\005 \002(\003:\002-1\022\'\n\tstEr"
  "rInfo\030\006 \002(\0132\024.interfaces.msgError\022(\n\006stS"
  "ign\030\007 \001(\0132\030.interfaces.msgSignature\"\205\002\n\025"
  "msgX509CertReq_V2LTCA\022\024\n\010iReqType\030\001 \002(\005:"
  "\002-1\022\030\n\014iLTCAIdRange\030\002 \002(\005:\002-1\022%\n\033strProo"
  "fOfPossessionVoucher\030\003 \002(\t:\000\022\031\n\017strDNSEx"
  "tension\030\004 \002(\t:\000\022\025\n\013strKeyUsage\030\005 \001(\t:\000\022\035"
  "\n\023strExtendedKeyUsage\030\006 \001(\t:\000\022\030\n\016strX509"
  "CertReq\030\007 \002(\t:\000\022\022\n\006iNonce\030\010 \002(\005:\002-1\022\026\n\nt"
  "TimeStamp\030\t \002(\003:\002-1\"\220\002\n\025msgX509CertRes_L"
  "TCA2V\022\024\n\010iReqType\030\001 \002(\005:\002-1\022+\n\010stSigner\030"
  "\002 \001(\0132\031.interfaces.msgSignerInfo\022\036\n\024strR"
  "eqIdentification\030\003 \002(\t:\000\022\025\n\013strX509Cert\030"
  "\004 \002(\t:\000\022\022\n\006iNonce\030\005 \002(\005:\002-1\022\026\n\ntTimeStam"
  "p\030\006 \002(\003:\002-1\022\'\n\tstErrInfo\030\007 \002(\0132\024.interfa"
  "ces.msgError\022(\n\006stSign\030\010 \001(\0132\030.interface"
  "s.msgSignature\"4\n\nmsgCRLType\"&\n\007CRLType\022"
  "\n\n\006idOnly\020\000\022\017\n\013idAndExpiry\020\001\">\n\017msgTwoDL"
  "ocation\022\024\n\010latitude\030\001 \002(\005:\002-1\022\025\n\tlongitu"
  "de\030\002 \002(\005:\002-1\"U\n\021msgCircularRegion\022-\n\010stC"
  "enter\030\001 \002(\0132\033.interfaces.msgTwoDLocation"
  "\022\021\n\006radius\030\002 \002(\r:\0010\"{\n\024msgRectangularReg"
  "ion\0220\n\013stUpperLeft\030\001 \002(\0132\033.interfaces.ms"
  "gTwoDLocation\0221\n\014stLowerRight\030\002 \002(\0132\033.in"
  "terfaces.msgTwoDLocation\"q\n\020msgApplicati"
  "onID\022<\n\004type\030\001 \002(\0162\036.interfaces.msgAIDTy"
  "pe.AIDType:\016fullySpecified\022\017\n\004acid\030\002 \002(\r"
  ":\0010\022\016\n\003acm\030\003 \002(\r:\0010\"c\n\025msgOBUIdentifiedS"
  "cope\022\033\n\020certSpecificData\030\001 \002(\r:\0010\022-\n\007stA"
  "ppID\030\002 \002(\0132\034.interfaces.msgApplicationID"
  "\"U\n\023msgGeographicRegion\022>\n\nregionType\030\001 "
  "\002(\0162$.interfaces.msgRegionType.RegionTyp"
  "e:\004none\"\221\001\n\022msgIdentifiedScope\022\026\n\013subjec"
  "tName\030\001 \002(\r:\0010\022-\n\007stAppID\030\002 \002(\0132\034.interf"
  "aces.msgApplicationID\0224\n\013stGeoRegion\030\003 \002"
  "(\0132\037.interfaces.msgGeographicRegion\"\214\001\n\023"
  "msgAppIDAndPriority\022<\n\004type\030\001 \002(\0162\036.inte"
  "rfaces.msgAIDType.AIDType:\016fullySpecifie"
  "d\022\017\n\004acid\030\002 \002(\r:\0010\022\016\n\003acm\030\003 \002(\r:\0010\022\026\n\013ma"
  "xPriority\030\004 \002(\r:\0010\"\361\001\n\nmsgCAScope\022@\n\002TF\030"
  "\001 \002(\0162,.interfaces.msgSubTypeFlags.Subje"
  "ctTypeFlags:\006wsa_ca\022-\n\007stAppID\030\002 \002(\0132\034.i"
  "nterfaces.msgApplicationID\022<\n\023stAppsAndP"
  "riorities\030\003 \002(\0132\037.interfaces.msgAppIDAnd"
  "Priority\0224\n\013stGeoRegion\030\004 \002(\0132\037.interfac"
  "es.msgGeographicRegion\"\361\002\n\023msgCertSpecif"
  "icData\022@\n\013subjectType\030\001 \002(\0162\".interfaces"
  ".msgSubType.SubjectType:\007wsa_ca1\022\'\n\007scop"
  "eCA\030\002 \002(\0132\026.interfaces.msgCAScope\022\037\n\024res"
  "ponsibleCrlSeries\030\003 \002(\r:\0010\022h\n\010wsaScope\030\004"
  " \002(\0162,.interfaces.msgWSASignerScope.WSAS"
  "ignerScope:(wsaSignerAdvertisingSpecific"
  "Applications\022/\n\007scopeId\030\005 \002(\0132\036.interfac"
  "es.msgIdentifiedScope\0223\n\010scopeOBU\030\006 \002(\0132"
  "!.interfaces.msgOBUIdentifiedScope\"\225\003\n\034m"
  "sgToBeSignedWAVECertificate\022\037\n\024uiCertifi"
  "cateVersion\030\001 \002(\r:\0010\022@\n\013subjectType\030\002 \002("
  "\0162\".interfaces.msgSubType.SubjectType:\007w"
  "sa_ca1\022\025\n\tiSignerId\030\003 \002(\005:\002-1\0224\n\013stCertS"
  "cope\030\004 \002(\0132\037.interfaces.msgCertSpecificD"
  "ata\022\026\n\013uiCrlSeries\030\005 \002(\r:\0010\022\036\n\024strPsnymC"
  "ertSerialNo\030\006 \002(\t:\000\022%\n\033strPsnymCertIdent"
  "ifiableKey\030\007 \002(\t:\000\022\030\n\014tIsValidFrom\030\010 \002(\003"
  ":\002-1\022\026\n\ntIsValidTo\030\t \002(\003:\002-1\0224\n\020stPsnymP"
  "ublicKey\030\n \002(\0132\032.interfaces.msgECPublicK"
  "ey\"\240\001\n\022msgPsnymCertFormat\022\037\n\024uiCertifica"
  "teVersion\030\001 \002(\r:\0010\022\?\n\rstCertificate\030\002 \002("
  "\0132(.interfaces.msgToBeSignedWAVECertific"
  "ate\022(\n\006stSign\030\003 \001(\0132\030.interfaces.msgSign"
  "ature\"\254\001\n\rmsgSignerInfo\022L\n\004type\030\001 \002(\01628."
  "interfaces.msgSignerIdentifierType.Signe"
  "rIdentifierType:\004self\022\030\n\016strCertificate\030"
  "\002 \002(\t:\000\022\023\n\tstrDigest\030\003 \001(\t:\000\022\036\n\024strCerti"
  "ficatesChain\030\004 \001(\t:\000\"\211\001\n\023msgPsnymKeysSto"
  "rage\022\037\n\023iPsnymPrivateKeyLen\030\001 \002(\005:\002-1\022\034\n"
  "\022strPsnymPrivateKey\030\002 \002(\t:\000\0223\n\013stPsnymCe"
  "rt\030\003 \002(\0132\036.interfaces.msgPsnymCertFormat"
  "\"\341\002\n\014msgTicketReq\022\024\n\010iReqType\030\001 \002(\005:\002-1\022"
  "+\n\010stSigner\030\002 \001(\0132\031.interfaces.msgSigner"
  "Info\022\025\n\nuiServices\030\003 \002(\r:\0010\022\037\n\024uiPsnymCe"
  "rtNoRequest\030\004 \002(\r:\0010\022\030\n\014iLTCAIdRange\030\005 \002"
  "(\005:\002-1\022\027\n\013iPCAIdRange\030\006 \002(\005:\002-1\022\022\n\006iNonc"
  "e\030\007 \002(\005:\002-1\022\026\n\ntTimeStamp\030\010 \002(\003:\002-1\022\033\n\017t"
  "PsnymStartTime\030\t \002(\003:\002-1\022\031\n\rtPsnymEndTim"
  "e\030\n \002(\003:\002-1\022\025\n\013strX509Cert\030\013 \002(\t:\000\022(\n\006st"
  "Sign\030\014 \001(\0132\030.interfaces.msgSignature\"\342\002\n"
  "\023msgForeignTicketReq\022\024\n\010iReqType\030\001 \002(\005:\002"
  "-1\022+\n\010stSigner\030\002 \001(\0132\031.interfaces.msgSig"
  "nerInfo\022\025\n\nuiServices\030\003 \002(\r:\0010\022!\n\025iNativ"
  "eLTCACertLength\030\006 \002(\005:\002-1\022\033\n\021strNativeLT"
  "CACert\030\007 \002(\t:\000\022\037\n\023iNativeTicketLength\030\010 "
  "\002(\005:\002-1\022\031\n\017strNativeTicket\030\t \002(\t:\000\022\037\n\024ui"
  "PsnymCertNoRequest\030\n \002(\r:\0010\022\022\n\006iNonce\030\013 "
  "\002(\005:\002-1\022\026\n\ntTimeStamp\030\014 \002(\003:\002-1\022(\n\006stSig"
  "n\030\r \001(\0132\030.interfaces.msgSignature\"s\n\024msg"
  "VehicleAttributes\022\021\n\006chRole\030\001 \002(\r:\0010\022\025\n\n"
  "uiServices\030\002 \002(\r:\0010\022\032\n\017chTypeOfVehicle\030\003"
  " \002(\r:\0010\022\025\n\nchPolicyId\030\004 \002(\r:\0010\"\342\003\n\017msgTi"
  "cketFormat\022\027\n\013iTicketType\030\001 \002(\005:\002-1\022+\n\010s"
  "tSigner\030\002 \001(\0132\031.interfaces.msgSignerInfo"
  "\022\033\n\021strTicketSerialNo\030\003 \002(\t:\000\022\"\n\030strTick"
  "etIdentifiableKey\030\004 \002(\t:\000\022\030\n\014iLTCAIdRang"
  "e\030\005 \002(\005:\002-1\022\027\n\013iPCAIdRange\030\006 \002(\005:\002-1\022\033\n\020"
  "uiMaxNoPsnymCert\030\007 \002(\r:\0010\0227\n\rstVehicleRo"
  "le\030\010 \002(\0132 .interfaces.msgVehicleAttribut"
  "es\022\037\n\020bIsForeignTicket\030\t \002(\010:\005false\022\034\n\020t"
  "TicketStartTime\030\n \002(\003:\002-1\022\033\n\017tTicketLife"
  "Time\030\013 \002(\003:\002-1\022\033\n\017tPsnymStartTime\030\014 \002(\003:"
  "\002-1\022\034\n\020tPsnymExpiryTime\030\r \002(\003:\002-1\022(\n\006stS"
  "ign\030\016 \001(\0132\030.interfaces.msgSignature\"\316\002\n\014"
  "msgTicketRes\022\024\n\010iReqType\030\001 \002(\005:\002-1\022+\n\010st"
  "Signer\030\002 \001(\0132\031.interfaces.msgSignerInfo\022"
  "\027\n\013iTicketSize\030\003 \002(\005:\002-1\022\023\n\tstrTicket\030\004 "
  "\002(\t:\000\022\033\n\020uiMaxNoPsnymCert\030\005 \002(\r:\0010\022\030\n\014iL"
  "TCAIdRange\030\006 \002(\005:\002-1\022\027\n\013iPCAIdRange\030\007 \002("
  "\005:\002-1\022\022\n\006iNonce\030\010 \002(\005:\002-1\022\026\n\ntTimeStamp\030"
  "\t \002(\003:\002-1\022\'\n\tstErrInfo\030\n \002(\0132\024.interface"
  "s.msgError\022(\n\006stSign\030\013 \001(\0132\030.interfaces."
  "msgSignature\"\271\002\n\020msgToBeSignedCSR\022\025\n\ncsr"
  "Version\030\001 \002(\r:\0010\022@\n\013subjectType\030\002 \002(\0162\"."
  "interfaces.msgSubType.SubjectType:\007wsa_c"
  "a1\022Y\n\013requestType\030\003 \002(\01620.interfaces.msg"
  "RequestScopeType.RequestScopeType:\022speci"
  "fiedInRequest\0229\n\020typeSpecificData\030\004 \001(\0132"
  "\037.interfaces.msgCertSpecificData\0226\n\022stEC"
  "PsnymPublicKey\030\005 \002(\0132\032.interfaces.msgECP"
  "ublicKey\"\245\001\n\031msgWAVECertificateRequest\022+"
  "\n\010stSigner\030\001 \001(\0132\031.interfaces.msgSignerI"
  "nfo\0221\n\013unsignedCsr\030\002 \002(\0132\034.interfaces.ms"
  "gToBeSignedCSR\022(\n\006stSign\030\003 \001(\0132\030.interfa"
  "ces.msgSignature\"\253\002\n\025msgPsnymCertReq_V2P"
  "CA\022\024\n\010iReqType\030\001 \002(\005:\002-1\022\027\n\013iTicketSize\030"
  "\002 \002(\005:\002-1\022\023\n\tstrTicket\030\003 \002(\t:\000\022\030\n\014iLTCAI"
  "dRange\030\004 \002(\005:\002-1\022\027\n\013iPCAIdRange\030\005 \002(\005:\002-"
  "1\022\025\n\tiLocation\030\006 \002(\005:\002-1\022\030\n\ruiPsnymCertN"
  "o\030\007 \002(\r:\0010\022>\n\017pstPsnymCertReq\030\010 \003(\0132%.in"
  "terfaces.msgWAVECertificateRequest\022\022\n\006iN"
  "once\030\t \002(\005:\002-1\022\026\n\ntTimeStamp\030\n \002(\003:\002-1\"\373"
  "\002\n\025msgPsnymCertRes_PCA2V\022\024\n\010iReqType\030\001 \002"
  "(\005:\002-1\022+\n\010stSigner\030\002 \001(\0132\031.interfaces.ms"
  "gSignerInfo\022\036\n\024strReqIdentification\030\003 \002("
  "\t:\000\022\030\n\014iLTCAIdRange\030\004 \002(\005:\002-1\022\027\n\013iPCAIdR"
  "ange\030\005 \002(\005:\002-1\022\030\n\ruiPsnymCertNo\030\006 \002(\r:\0010"
  "\0223\n\013stPsnymCert\030\007 \003(\0132\036.interfaces.msgPs"
  "nymCertFormat\022\022\n\006iNonce\030\010 \002(\005:\002-1\022\026\n\ntTi"
  "meStamp\030\t \002(\003:\002-1\022\'\n\tstErrInfo\030\n \002(\0132\024.i"
  "nterfaces.msgError\022(\n\006stSign\030\013 \001(\0132\030.int"
  "erfaces.msgSignature\"\202\001\n\025msgPsnymCertAck"
  "_V2PCA\022\024\n\010iReqType\030\001 \002(\005:\002-1\022\022\n\006iNonce\030\002"
  " \002(\005:\002-1\022\026\n\ntTimeStamp\030\003 \002(\003:\002-1\022\'\n\tstEr"
  "rInfo\030\004 \002(\0132\024.interfaces.msgError\"\220\001\n\021ms"
  "gPsnymCRLFormat\022\035\n\023strPsnymCRLSerialNo\030\001"
  " \002(\t:\000\022\037\n\024uiRevokedPsnymCertNo\030\002 \002(\r:\0010\022"
  "#\n\033strRevokedPsnymCertSerialNo\030\003 \003(\t\022\026\n\n"
  "tTimeStamp\030\004 \002(\003:\002-1\"3\n\014msgIDAndDate\022\017\n\005"
  "strID\030\001 \002(\t:\000\022\022\n\006expiry\030\002 \002(\003:\002-1\"\303\002\n\020ms"
  "gToBeSignedCRL\0224\n\004type\030\001 \002(\0162\036.interface"
  "s.msgCRLType.CRLType:\006idOnly\022\024\n\tcrlSerie"
  "s\030\002 \002(\r:\0010\022\020\n\005iCAID\030\003 \002(\r:\0010\022\024\n\tcrlSeria"
  "l\030\004 \002(\r:\0010\022\027\n\014tStartPeriod\030\005 \002(\004:\0010\022\025\n\nt"
  "IssueDate\030\006 \002(\004:\0010\022\023\n\010tNextCRL\030\007 \002(\004:\0010\022"
  "\033\n\020uiRevokedPsnymNo\030\010 \002(\004:\0010\022#\n\033strRevok"
  "edPsnymCertSerialNo\030\t \003(\t\0224\n\022stEntriesID"
  "AndDate\030\n \002(\0132\030.interfaces.msgIDAndDate\""
  "\267\001\n\nmsgWAVECRL\022\033\n\020uiWaveCRLVersion\030\001 \002(\r"
  ":\0010\022+\n\010stSigner\030\002 \001(\0132\031.interfaces.msgSi"
  "gnerInfo\0225\n\017stToBeSignedCRL\030\003 \002(\0132\034.inte"
  "rfaces.msgToBeSignedCRL\022(\n\006stSign\030\004 \001(\0132"
  "\030.interfaces.msgSignature\"G\n\032msgWAVECert"
  "ificateResponse\022)\n\tstCRLPath\030\001 \002(\0132\026.int"
  "erfaces.msgWAVECRL\"\262\002\n\024msgPsnymCRLReq_V2"
  "PCA\022\024\n\010iReqType\030\001 \002(\005:\002-1\022+\n\010stSigner\030\002 "
  "\001(\0132\031.interfaces.msgSignerInfo\022\036\n\023uiCurr"
  "entCRLVersion\030\003 \002(\r:\0010\022\027\n\013iPCAIdRange\030\004 "
  "\002(\005:\002-1\022\025\n\tiRegionId\030\005 \002(\005:\002-1\022\031\n\riPsnym"
  "CertLen\030\006 \002(\005:\002-1\022\026\n\014strPsnymCert\030\007 \002(\t:"
  "\000\022\022\n\006iNonce\030\010 \002(\005:\002-1\022\026\n\ntTimeStamp\030\t \002("
  "\003:\002-1\022(\n\006stSign\030\n \001(\0132\030.interfaces.msgSi"
  "gnature\"\210\002\n\024msgPsnymCRLRes_PCA2V\022\024\n\010iReq"
  "Type\030\001 \002(\005:\002-1\022+\n\010stSigner\030\002 \001(\0132\031.inter"
  "faces.msgSignerInfo\022\027\n\013iPCAIdRange\030\003 \002(\005"
  ":\002-1\022\022\n\006iNonce\030\004 \002(\005:\002-1\022\026\n\ntTimeStamp\030\005"
  " \002(\003:\002-1\022\'\n\tstErrInfo\030\006 \002(\0132\024.interfaces"
  ".msgError\022\025\n\rstrWAVECRLRes\030\007 \001(\t\022(\n\006stSi"
  "gn\030\010 \001(\0132\030.interfaces.msgSignature\"\335\002\n\025m"
  "sgPsnymOCSPReq_V2PCA\022\024\n\010iReqType\030\001 \002(\005:\002"
  "-1\022+\n\010stSigner\030\002 \001(\0132\031.interfaces.msgSig"
  "nerInfo\022\027\n\013iPCAIdRange\030\003 \002(\005:\002-1\022\025\n\tiReg"
  "ionId\030\004 \002(\005:\002-1\022\"\n\027uiNoOfPsnymsToBeCheck"
  "ed\030\005 \002(\r:\0010\022$\n\034strPsnymsSerialNoToBeChec"
  "ked\030\006 \003(\t\022\031\n\riPsnymCertLen\030\007 \002(\005:\002-1\022\026\n\014"
  "strPsnymCert\030\010 \002(\t:\000\022\022\n\006iNonce\030\t \002(\005:\002-1"
  "\022\026\n\ntTimeStamp\030\n \002(\003:\002-1\022(\n\006stSign\030\013 \001(\013"
  "2\030.interfaces.msgSignature\"X\n\030msgPsnymRe"
  "vocationStatus\022\032\n\020strPsnymSerialNo\030\001 \002(\t"
  ":\000\022 \n\021bRevocationStatus\030\002 \002(\010:\005false\"\330\002\n"
  "\025msgPsnymOCSPRes_PCA2V\022\024\n\010iReqType\030\001 \002(\005"
  ":\002-1\022+\n\010stSigner\030\002 \001(\0132\031.interfaces.msgS"
  "ignerInfo\022\027\n\013iPCAIdRange\030\003 \002(\005:\002-1\022\"\n\027ui"
  "NoOfPsnymsToBeChecked\030\004 \002(\r:\0010\022@\n\022stRevo"
  "cationStatus\030\005 \003(\0132$.interfaces.msgPsnym"
  "RevocationStatus\022\022\n\006iNonce\030\006 \002(\005:\002-1\022\026\n\n"
  "tTimeStamp\030\007 \002(\003:\002-1\022\'\n\tstErrInfo\030\010 \002(\0132"
  "\024.interfaces.msgError\022(\n\006stSign\030\t \001(\0132\030."
  "interfaces.msgSignature\"\256\002\n\032msgRevokePsn"
  "ymCertReq_P2RA\022\024\n\010iReqType\030\001 \002(\005:\002-1\022+\n\010"
  "stSigner\030\002 \001(\0132\031.interfaces.msgSignerInf"
  "o\022\027\n\013iPCAIdRange\030\003 \002(\005:\002-1\022\035\n\023strECSecMa"
  "nECPubKey\030\004 \002(\t:\000\022\"\n\027uiNoOfPsnymsToBeRev"
  "oked\030\005 \002(\r:\0010\022\033\n\023strRevokedPsnymCert\030\006 \003"
  "(\t\022\022\n\006iNonce\030\007 \002(\005:\002-1\022\026\n\ntTimeStamp\030\010 \002"
  "(\003:\002-1\022(\n\006stSign\030\t \001(\0132\030.interfaces.msgS"
  "ignature\"\370\001\n\034msgRevokePsnymCertReq_RA2PC"
  "A\022\024\n\010iReqType\030\001 \002(\005:\002-1\022+\n\010stSigner\030\002 \001("
  "\0132\031.interfaces.msgSignerInfo\022\"\n\027uiNoOfPs"
  "nymsToBeRevoked\030\003 \002(\r:\0010\022\033\n\023strRevokedPs"
  "nymCert\030\004 \003(\t\022\022\n\006iNonce\030\005 \002(\005:\002-1\022\026\n\ntTi"
  "meStamp\030\006 \002(\003:\002-1\022(\n\006stSign\030\007 \001(\0132\030.inte"
  "rfaces.msgSignature\"\336\001\n\034msgRevokePsnymCe"
  "rtRes_PCA2RA\022\024\n\010iReqType\030\001 \002(\005:\002-1\022+\n\010st"
  "Signer\030\002 \001(\0132\031.interfaces.msgSignerInfo\022"
  "\"\n\027uiNoOfPsnymsToBeRevoked\030\003 \002(\r:\0010\022*\n\037u"
  "iNoOfSuccessfullyRevokedPsnyms\030\004 \002(\r:\0010\022"
  "+\n uiNoOfSuccessfullyRevokedTickets\030\005 \002("
  "\r:\0010\"\366\001\n\034msgRevokeX509CertReq_RA2LTCA\022\024\n"
  "\010iReqType\030\001 \002(\005:\002-1\022+\n\010stSigner\030\002 \001(\0132\031."
  "interfaces.msgSignerInfo\022\"\n\027uiNoOfPsnyms"
  "ToBeRevoked\030\003 \002(\r:\0010\022\031\n\021strTicketSerialN"
  "o\030\004 \003(\t\022\022\n\006iNonce\030\005 \002(\005:\002-1\022\026\n\ntTimeStam"
  "p\030\006 \002(\003:\002-1\022(\n\006stSign\030\007 \001(\0132\030.interfaces"
  ".msgSignature\"\252\004\n\032msgRevokePsnymCertRes_"
  "RA2P\022\024\n\010iReqType\030\001 \002(\005:\002-1\022+\n\010stSigner\030\002"
  " \001(\0132\031.interfaces.msgSignerInfo\022\"\n\027uiNoO"
  "fPsnymsToBeRevoked\030\003 \002(\r:\0010\022,\n!uiNoOfSuc"
  "cessfullyRevokedX509Cert\030\004 \002(\r:\0010\022*\n\037uiN"
  "oOfSuccessfullyRevokedPsnyms\030\005 \002(\r:\0010\022c\n"
  "\031pstPsnymRevocationErrInfo\030\006 \003(\0132@.inter"
  "faces.msgRevokePsnymCertRes_RA2P.msgPsny"
  "mRevocationErrInfo\022\022\n\006iNonce\030\007 \002(\005:\002-1\022\026"
  "\n\ntTimeStamp\030\010 \002(\003:\002-1\022\'\n\tstErrInfo\030\t \002("
  "\0132\024.interfaces.msgError\022(\n\006stSign\030\n \001(\0132"
  "\030.interfaces.msgSignature\032g\n\031msgPsnymRev"
  "ocationErrInfo\022\031\n\riErrGenSource\030\001 \002(\005:\002-"
  "1\022/\n\021stDetailedErrInfo\030\002 \002(\0132\024.interface"
  "s.msgError\"\265\002\n\037msgPsnymResolutionReq_Pol"
  "ice2RA\022\024\n\010iReqType\030\001 \002(\005:\002-1\022+\n\010stSigner"
  "\030\002 \001(\0132\031.interfaces.msgSignerInfo\022#\n\030uiN"
  "oOfPsnymsToBeResolved\030\003 \002(\r:\0010\022%\n\035strPsn"
  "ymsSerialNoToBeResolved\030\004 \003(\t\022\025\n\tiPolice"
  "Id\030\005 \002(\005:\002-1\022\026\n\niRAIdRange\030\006 \002(\005:\002-1\022\022\n\006"
  "iNonce\030\007 \002(\005:\002-1\022\026\n\ntTimeStamp\030\010 \002(\003:\002-1"
  "\022(\n\006stSign\030\t \001(\0132\030.interfaces.msgSignatu"
  "re\"\264\002\n\034msgPsnymResolutionReq_RA2PCA\022\024\n\010i"
  "ReqType\030\001 \002(\005:\002-1\022+\n\010stSigner\030\002 \001(\0132\031.in"
  "terfaces.msgSignerInfo\022#\n\030uiNoOfPsnymsTo"
  "BeResolved\030\003 \002(\r:\0010\022%\n\035strPsnymsSerialNo"
  "ToBeResolved\030\004 \003(\t\022\026\n\niRAIdRange\030\005 \002(\005:\002"
  "-1\022\027\n\013iPCAIdRange\030\006 \002(\005:\002-1\022\022\n\006iNonce\030\007 "
  "\002(\005:\002-1\022\026\n\ntTimeStamp\030\010 \002(\003:\002-1\022(\n\006stSig"
  "n\030\t \001(\0132\030.interfaces.msgSignature\"\264\004\n\034ms"
  "gPsnymResolutionRes_PCA2RA\022\024\n\010iReqType\030\001"
  " \002(\005:\002-1\022+\n\010stSigner\030\002 \001(\0132\031.interfaces."
  "msgSignerInfo\022#\n\030uiNoOfPsnymsToBeResolve"
  "d\030\003 \002(\r:\0010\022[\n\026pstPsnymResolutionInfo\030\004 \003"
  "(\0132;.interfaces.msgPsnymResolutionRes_PC"
  "A2RA.msgPsnymResolution\022\026\n\niRAIdRange\030\005 "
  "\002(\005:\002-1\022\027\n\013iPCAIdRange\030\006 \002(\005:\002-1\022\022\n\006iNon"
  "ce\030\007 \002(\005:\002-1\022\026\n\ntTimeStamp\030\010 \002(\003:\002-1\022\'\n\t"
  "stErrInfo\030\t \002(\0132\024.interfaces.msgError\022(\n"
  "\006stSign\030\n \001(\0132\030.interfaces.msgSignature\032"
  "\236\001\n\022msgPsnymResolution\022\036\n\024strPsnymCertSe"
  "rialNo\030\001 \002(\t:\000\022\033\n\021strTicketSerialNo\030\002 \002("
  "\t:\000\022\"\n\030strTicketIdentifiableKey\030\003 \002(\t:\000\022"
  "\'\n\tstErrInfo\030\004 \002(\0132\024.interfaces.msgError"
  "\"\304\003\n\035msgPsnymResolutionReq_RA2LTCA\022\024\n\010iR"
  "eqType\030\001 \002(\005:\002-1\022+\n\010stSigner\030\002 \001(\0132\031.int"
  "erfaces.msgSignerInfo\022#\n\030uiNoOfPsnymsToB"
  "eResolved\030\003 \002(\r:\0010\022\\\n\026pstPsnymResolution"
  "Info\030\004 \003(\0132<.interfaces.msgPsnymResoluti"
  "onReq_RA2LTCA.msgPsnymResolution\022\026\n\niRAI"
  "dRange\030\005 \002(\005:\002-1\022\030\n\014iLTCAIdRange\030\006 \002(\005:\002"
  "-1\022\022\n\006iNonce\030\007 \002(\005:\002-1\022\026\n\ntTimeStamp\030\010 \002"
  "(\003:\002-1\022(\n\006stSign\030\t \001(\0132\030.interfaces.msgS"
  "ignature\032U\n\022msgPsnymResolution\022\033\n\021strTic"
  "ketSerialNo\030\001 \002(\t:\000\022\"\n\030strTicketIdentifi"
  "ableKey\030\002 \002(\t:\000\"\271\004\n\035msgPsnymResolutionRe"
  "s_LTCA2RA\022\024\n\010iReqType\030\001 \002(\005:\002-1\022+\n\010stSig"
  "ner\030\002 \001(\0132\031.interfaces.msgSignerInfo\022#\n\030"
  "uiNoOfPsnymsToBeResolved\030\003 \002(\r:\0010\022\\\n\026pst"
  "PsnymResolutionInfo\030\004 \003(\0132<.interfaces.m"
  "sgPsnymResolutionRes_LTCA2RA.msgPsnymRes"
  "olution\022\026\n\niRAIdRange\030\005 \002(\005:\002-1\022\030\n\014iLTCA"
  "IdRange\030\006 \002(\005:\002-1\022\022\n\006iNonce\030\007 \002(\005:\002-1\022\026\n"
  "\ntTimeStamp\030\010 \002(\003:\002-1\022\'\n\tstErrInfo\030\t \002(\013"
  "2\024.interfaces.msgError\022(\n\006stSign\030\n \001(\0132\030"
  ".interfaces.msgSignature\032\240\001\n\022msgPsnymRes"
  "olution\022\033\n\021strTicketSerialNo\030\001 \002(\t:\000\022 \n\026"
  "strVehX509CertSerialNo\030\002 \002(\t:\000\022\"\n\030strTic"
  "ketIdentifiableKey\030\003 \002(\t:\000\022\'\n\tstErrInfo\030"
  "\005 \002(\0132\024.interfaces.msgError\"\307\004\n\037msgPsnym"
  "ResolutionRes_RA2Police\022\024\n\010iReqType\030\001 \002("
  "\005:\002-1\022+\n\010stSigner\030\002 \001(\0132\031.interfaces.msg"
  "SignerInfo\022#\n\030uiNoOfPsnymsToBeResolved\030\003"
  " \002(\r:\0010\022^\n\026pstPsnymResolutionInfo\030\004 \003(\0132"
  ">.interfaces.msgPsnymResolutionRes_RA2Po"
  "lice.msgPsnymResolution\022\026\n\niRAIdRange\030\005 "
  "\002(\005:\002-1\022\030\n\014iLTCAIdRange\030\006 \002(\005:\002-1\022\027\n\013iPC"
  "AIdRange\030\007 \002(\005:\002-1\022\025\n\tiPoliceId\030\010 \002(\005:\002-"
  "1\022\022\n\006iNonce\030\t \002(\005:\002-1\022\026\n\ntTimeStamp\030\n \002("
  "\003:\002-1\022\'\n\tstErrInfo\030\013 \002(\0132\024.interfaces.ms"
  "gError\022(\n\006stSign\030\014 \001(\0132\030.interfaces.msgS"
  "ignature\032{\n\022msgPsnymResolution\022\032\n\020strPsn"
  "ymSerialNo\030\001 \002(\t:\000\022 \n\026strVehX509CertSeri"
  "alNo\030\002 \002(\t:\000\022\'\n\tstErrInfo\030\003 \002(\0132\024.interf"
  "aces.msgError\"\360\002\n\037msgPsnymResolutionAck_"
  "Police2RA\022\024\n\010iReqType\030\001 \002(\005:\002-1\022+\n\010stSig"
  "ner\030\002 \001(\0132\031.interfaces.msgSignerInfo\022#\n\030"
  "uiNoOfPsnymsToBeResolved\030\003 \002(\r:\0010\022\025\n\tiPo"
  "liceId\030\004 \002(\005:\002-1\022\026\n\niRAIdRange\030\005 \002(\005:\002-1"
  "\0227\n\031pstPsnymResolutionErrInfo\030\006 \003(\0132\024.in"
  "terfaces.msgError\022\022\n\006iNonce\030\007 \002(\005:\002-1\022\026\n"
  "\ntTimeStamp\030\010 \002(\003:\002-1\022\'\n\tstErrInfo\030\t \002(\013"
  "2\024.interfaces.msgError\022(\n\006stSign\030\n \001(\0132\030"
  ".interfaces.msgSignature\"\266\003\n\032msgBanTicke"
  "tsReq_Police2RA\022\024\n\010iReqType\030\001 \002(\005:\002-1\022+\n"
  "\010stSigner\030\002 \001(\0132\031.interfaces.msgSignerIn"
  "fo\022\025\n\nchPolicyId\030\003 \002(\r:\0010\022\"\n\027uiNoOfTicke"
  "tsToBeBanned\030\004 \002(\r:\0010\022U\n\024pstBannedTicket"
  "sInfo\030\005 \003(\01327.interfaces.msgBanTicketsRe"
  "q_Police2RA.msgBannedTickets\022\025\n\tiPoliceI"
  "d\030\006 \002(\005:\002-1\022\026\n\niRAIdRange\030\007 \002(\005:\002-1\022\022\n\006i"
  "Nonce\030\010 \002(\005:\002-1\022\026\n\ntTimeStamp\030\t \002(\003:\002-1\022"
  "(\n\006stSign\030\n \001(\0132\030.interfaces.msgSignatur"
  "e\032>\n\020msgBannedTickets\022\025\n\013strSerialNo\030\001 \002"
  "(\t:\000\022\023\n\tstrTicket\030\002 \002(\t:\000\"\263\003\n\027msgBanTick"
  "etsReq_RA2PCA\022\024\n\010iReqType\030\001 \002(\005:\002-1\022+\n\010s"
  "tSigner\030\002 \001(\0132\031.interfaces.msgSignerInfo"
  "\022\025\n\nchPolicyId\030\003 \002(\r:\0010\022\"\n\027uiNoOfTickets"
  "ToBeBanned\030\004 \002(\r:\0010\022R\n\024pstBannedTicketsI"
  "nfo\030\005 \003(\01324.interfaces.msgBanTicketsReq_"
  "RA2PCA.msgBannedTickets\022\026\n\niRAIdRange\030\006 "
  "\002(\005:\002-1\022\030\n\014iLTCAIdRange\030\007 \002(\005:\002-1\022\022\n\006iNo"
  "nce\030\010 \002(\005:\002-1\022\026\n\ntTimeStamp\030\t \002(\003:\002-1\022(\n"
  "\006stSign\030\n \001(\0132\030.interfaces.msgSignature\032"
  ">\n\020msgBannedTickets\022\025\n\013strSerialNo\030\001 \002(\t"
  ":\000\022\023\n\tstrTicket\030\002 \002(\t:\000\"\213\004\n\027msgBanTicket"
  "sRes_PCA2RA\022\024\n\010iReqType\030\001 \002(\005:\002-1\022+\n\010stS"
  "igner\030\002 \001(\0132\031.interfaces.msgSignerInfo\022\""
  "\n\027uiNoOfTicketsToBeBanned\030\003 \002(\r:\0010\022*\n\037ui"
  "NoOfSuccessfullyBannedTickets\030\004 \002(\r:\0010\022R"
  "\n\024pstBannedTicketsInfo\030\005 \003(\01324.interface"
  "s.msgBanTicketsRes_PCA2RA.msgBannedTicke"
  "ts\022\026\n\niRAIdRange\030\006 \002(\005:\002-1\022\030\n\014iLTCAIdRan"
  "ge\030\007 \002(\005:\002-1\022\022\n\006iNonce\030\010 \002(\005:\002-1\022\026\n\ntTim"
  "eStamp\030\t \002(\003:\002-1\022\'\n\tstErrInfo\030\n \002(\0132\024.in"
  "terfaces.msgError\022(\n\006stSign\030\013 \001(\0132\030.inte"
  "rfaces.msgSignature\032X\n\020msgBannedTickets\022"
  "\033\n\021strTicketSerialNo\030\001 \002(\t:\000\022\'\n\tstErrInf"
  "o\030\002 \002(\0132\024.interfaces.msgError\"\357\004\n\032msgBan"
  "TicketsRes_RA2Police\022\024\n\010iReqType\030\001 \002(\005:\002"
  "-1\022+\n\010stSigner\030\002 \001(\0132\031.interfaces.msgSig"
  "nerInfo\022\"\n\027uiNoOfTicketsToBeBanned\030\003 \002(\r"
  ":\0010\022*\n\037uiNoOfSuccessfullyBannedTickets\030\004"
  " \002(\r:\0010\022U\n\024pstBannedTicketsInfo\030\005 \003(\01327."
  "interfaces.msgBanTicketsRes_RA2Police.ms"
  "gBannedTickets\022\026\n\niRAIdRange\030\006 \002(\005:\002-1\022\030"
  "\n\014iLTCAIdRange\030\007 \002(\005:\002-1\022\027\n\013iPCAIdRange\030"
  "\010 \002(\005:\002-1\022\025\n\tiPoliceId\030\t \002(\005:\002-1\022\022\n\006iNon"
  "ce\030\n \002(\005:\002-1\022\026\n\ntTimeStamp\030\013 \002(\003:\002-1\022\'\n\t"
  "stErrInfo\030\014 \002(\0132\024.interfaces.msgError\022(\n"
  "\006stSign\030\r \001(\0132\030.interfaces.msgSignature\032"
  "\205\001\n\020msgBannedTickets\022\033\n\021strTicketSerialN"
  "o\030\001 \002(\t:\000\022\026\n\niTicketLen\030\002 \002(\005:\002-1\022\023\n\tstr"
  "Ticket\030\003 \002(\t:\000\022\'\n\tstErrInfo\030\004 \002(\0132\024.inte"
  "rfaces.msgError\"\341\002\n\032msgBanTicketsAck_Pol"
  "ice2RA\022\024\n\010iReqType\030\001 \002(\005:\002-1\022+\n\010stSigner"
  "\030\002 \001(\0132\031.interfaces.msgSignerInfo\022\"\n\027uiN"
  "oOfTicketsToBeBanned\030\003 \002(\r:\0010\022\025\n\tiPolice"
  "Id\030\004 \002(\005:\002-1\022\026\n\niRAIdRange\030\005 \002(\005:\002-1\022.\n\020"
  "pstTicketErrInfo\030\006 \003(\0132\024.interfaces.msgE"
  "rror\022\022\n\006iNonce\030\007 \002(\005:\002-1\022\026\n\ntTimeStamp\030\010"
  " \002(\003:\002-1\022\'\n\tstErrInfo\030\t \002(\0132\024.interfaces"
  ".msgError\022(\n\006stSign\030\n \001(\0132\030.interfaces.m"
  "sgSignature\"\363\001\n\020msgVehicleConfig\022\032\n\020strL"
  "TCAServerURL\030\001 \002(\t:\000\022\031\n\017strPCAServerURL\030"
  "\002 \002(\t:\000\022\030\n\016strRAServerURL\030\003 \002(\t:\000\022\033\n\021str"
  "LTCAMethodName\030\004 \002(\t:\000\022\032\n\020strPCAMethodNa"
  "me\030\005 \002(\t:\000\022\031\n\017strRAMethodName\030\006 \002(\t:\000\022$\n"
  "\031lMaxXMLRPCLimitBufferSize\030\007 \002(\004:\0010\022\024\n\010f"
  "Version\030\010 \002(\002:\002-1\"\362\001\n\017msgPoliceConfig\022\032\n"
  "\020strLTCAServerURL\030\001 \002(\t:\000\022\031\n\017strPCAServe"
  "rURL\030\002 \002(\t:\000\022\030\n\016strRAServerURL\030\003 \002(\t:\000\022\033"
  "\n\021strLTCAMethodName\030\004 \002(\t:\000\022\032\n\020strPCAMet"
  "hodName\030\005 \002(\t:\000\022\031\n\017strRAMethodName\030\006 \002(\t"
  ":\000\022$\n\031lMaxXMLRPCLimitBufferSize\030\007 \002(\004:\0010"
  "\022\024\n\010fVersion\030\010 \002(\002:\002-1\"\351\013\n\020msgVPKILibCon"
  "fig\022\022\n\006iRCAId\030\001 \002(\005:\002-1\022\022\n\006iPCAId\030\002 \002(\005:"
  "\002-1\022\023\n\007iLTCAId\030\003 \002(\005:\002-1\022\021\n\005iRAId\030\004 \002(\005:"
  "\002-1\022\025\n\tiPoliceId\030\005 \002(\005:\002-1\022\025\n\tiRegionId\030"
  "\006 \002(\005:\002-1\022\027\n\013iLocationId\030\007 \002(\005:\002-1\022\037\n\025st"
  "rGetHelpCommandName\030\010 \002(\t:\000\022F\n\020stTicketP"
  "olicies\030\t \003(\0132,.interfaces.msgVPKILibCon"
  "fig.msgTicketPolicy\022D\n\017stPsnymPolicies\030\n"
  " \003(\0132+.interfaces.msgVPKILibConfig.msgPs"
  "nymPolicy\022\037\n\023iMaxDelayThreashold\030\013 \002(\005:\002"
  "-1\022(\n\034iPsnymIssuanceValidityPeriod\030\014 \002(\005"
  ":\002-1\022!\n\025iTicketValidityPeriod\030\r \002(\005:\002-1\022"
  " \n\024iRandValueThreashold\030\016 \002(\005:\002-1\022\033\n\017iCr"
  "yptoBuffSize\030\017 \002(\005:\002-1\022\032\n\017uiSignatureSiz"
  "e\030\020 \002(\r:\0010\022 \n\024iTimeStampLowerBound\030\021 \002(\005"
  ":\002-1\022 \n\024iTimeStampUpperBound\030\022 \002(\005:\002-1\022\036"
  "\n\022iCurrentCRLVersion\030\023 \002(\005:\002-1\022!\n\025iNonce"
  "IncreasingValue\030\024 \002(\005:\002-1\022\030\n\014fVPKIVersio"
  "n\030\025 \002(\002:\002-1\032\317\002\n\017msgTicketPolicy\022 \n\022bTick"
  "etReusability\030\001 \002(\010:\004true\022*\n\037uiMaxNoOfTi"
  "cketsToObtainPerHour\030\002 \002(\r:\0010\022 \n\025uiMinNo"
  "OfTicketsToReq\030\003 \002(\r:\0010\022 \n\025uiMaxNoOfTick"
  "etsToReq\030\004 \002(\r:\0010\022#\n\030uiMinNoOfTicketsToR"
  "evoke\030\005 \002(\r:\0010\022#\n\030uiMaxNoOfTicketsToRevo"
  "ke\030\006 \002(\r:\0010\022 \n\025uiMinNoOfTicketsToBan\030\007 \002"
  "(\r:\0010\022 \n\025uiMaxNoOfTicketsToBan\030\010 \002(\r:\0010\022"
  "\034\n\021uiBanTicketPeriod\030\t \002(\r:\0010\032\322\003\n\016msgPsn"
  "ymPolicy\022(\n strResponsibleNodeToRevokePs"
  "nyms\030\001 \002(\t\022,\n!uiMaxNoOfPsnymCertToObtain"
  "PerHour\030\002 \002(\r:\0010\022,\n!uiMaxNoOfPsnymCertRe"
  "qUsingATicket\030\003 \002(\r:\0010\022\"\n\027uiMinNoOfPsnym"
  "CertToReq\030\004 \002(\r:\0010\022\"\n\027uiMaxNoOfPsnymCert"
  "ToReq\030\005 \002(\r:\0010\022&\n\033uiMinNoOfPsnymCertToRe"
  "solve\030\006 \002(\r:\0010\022&\n\033uiMaxNoOfPsnymCertToRe"
  "solve\030\007 \002(\r:\0010\022%\n\032uiMinNoOfPsnymCertToRe"
  "voke\030\010 \002(\r:\0010\022%\n\032uiMaxNoOfPsnymCertToRev"
  "oke\030\t \002(\r:\0010\022,\n!uiMaxNumOfPsnymCertToObt"
  "ainPerReq\030\n \002(\r:\0010\022&\n\034strPsnymOverlappin"
  "gMechanism\030\013 \002(\t:\000\"\371\001\n(msgUpgradeConfigu"
  "rationReq_Client2Server\022\024\n\010iReqType\030\001 \002("
  "\005:\002-1\022\027\n\013iPCAIdRange\030\002 \002(\005:\002-1\022\025\n\tiRegio"
  "nId\030\003 \002(\005:\002-1\022\031\n\riPsnymCertLen\030\004 \002(\005:\002-1"
  "\022\026\n\014strPsnymCert\030\005 \002(\t:\000\022\022\n\006iNonce\030\006 \002(\005"
  ":\002-1\022\026\n\ntTimeStamp\030\007 \002(\003:\002-1\022(\n\006stSign\030\010"
  " \001(\0132\030.interfaces.msgSignature\"\213\003\n(msgUp"
  "gradeConfigurationRes_Server2Client\022\024\n\010i"
  "ReqType\030\001 \002(\005:\002-1\022+\n\010stSigner\030\002 \001(\0132\031.in"
  "terfaces.msgSignerInfo\0221\n\013stVehConfig\030\003 "
  "\002(\0132\034.interfaces.msgVehicleConfig\0223\n\016stP"
  "oliceConfig\030\004 \002(\0132\033.interfaces.msgPolice"
  "Config\0225\n\017stVPKILibConfig\030\005 \002(\0132\034.interf"
  "aces.msgVPKILibConfig\022\022\n\006iNonce\030\006 \002(\005:\002-"
  "1\022\026\n\ntTimeStamp\030\007 \002(\003:\002-1\022\'\n\tstErrInfo\030\010"
  " \002(\0132\024.interfaces.msgError\022(\n\006stSign\030\t \001"
  "(\0132\030.interfaces.msgSignature\"\375\001\n&msgReve"
  "rsePsnymResolutionReq_Police2RA\022\024\n\010iReqT"
  "ype\030\001 \002(\005:\002-1\022+\n\010stSigner\030\002 \001(\0132\031.interf"
  "aces.msgSignerInfo\022%\n\031iNoOfX509CertToBeR"
  "esolved\030\003 \002(\005:\002-1\022\023\n\013strX509Cert\030\004 \003(\t\022\022"
  "\n\006iNonce\030\005 \002(\005:\002-1\022\026\n\ntTimeStamp\030\006 \002(\003:\002"
  "-1\022(\n\006stSign\030\007 \001(\0132\030.interfaces.msgSigna"
  "ture\"\373\001\n$msgReversePsnymResolutionReq_RA"
  "2LTCA\022\024\n\010iReqType\030\001 \002(\005:\002-1\022+\n\010stSigner\030"
  "\002 \001(\0132\031.interfaces.msgSignerInfo\022%\n\031iNoO"
  "fX509CertToBeResolved\030\003 \002(\005:\002-1\022\023\n\013strX5"
  "09Cert\030\004 \003(\t\022\022\n\006iNonce\030\005 \002(\005:\002-1\022\026\n\ntTim"
  "eStamp\030\006 \002(\003:\002-1\022(\n\006stSign\030\007 \001(\0132\030.inter"
  "faces.msgSignature\"\343\004\n$msgReversePsnymRe"
  "solutionRes_LTCA2RA\022\024\n\010iReqType\030\001 \002(\005:\002-"
  "1\022+\n\010stSigner\030\002 \001(\0132\031.interfaces.msgSign"
  "erInfo\022%\n\031iNoOfX509CertToBeResolved\030\003 \002("
  "\005:\002-1\022e\n\027pstTicketResolutionInfo\030\004 \003(\0132D"
  ".interfaces.msgReversePsnymResolutionRes"
  "_LTCA2RA.msgTicketResolution\022\022\n\006iNonce\030\005"
  " \002(\005:\002-1\022\026\n\ntTimeStamp\030\006 \002(\003:\002-1\022\'\n\tstEr"
  "rInfo\030\007 \002(\0132\024.interfaces.msgError\022(\n\006stS"
  "ign\030\010 \001(\0132\030.interfaces.msgSignature\032=\n\tm"
  "sgTicket\022\033\n\021strTicketSerialNo\030\001 \002(\t:\000\022\023\n"
  "\tstrTicket\030\002 \002(\t:\000\032\253\001\n\023msgTicketResoluti"
  "on\022 \n\026strVehX509CertSerialNo\030\001 \002(\t:\000\022\037\n\023"
  "iNoOfResolvedTicket\030\002 \002(\005:\002-1\022Q\n\rpstTick"
  "etInfo\030\003 \003(\0132:.interfaces.msgReversePsny"
  "mResolutionRes_LTCA2RA.msgTicket\"\225\004\n#msg"
  "ReversePsnymResolutionReq_RA2PCA\022\024\n\010iReq"
  "Type\030\001 \002(\005:\002-1\022+\n\010stSigner\030\002 \001(\0132\031.inter"
  "faces.msgSignerInfo\022%\n\031iNoOfX509CertToBe"
  "Resolved\030\003 \002(\005:\002-1\022d\n\027pstTicketResolutio"
  "nInfo\030\004 \003(\0132C.interfaces.msgReversePsnym"
  "ResolutionReq_RA2PCA.msgTicketResolution"
  "\022\022\n\006iNonce\030\005 \002(\005:\002-1\022\026\n\ntTimeStamp\030\006 \002(\003"
  ":\002-1\022(\n\006stSign\030\007 \001(\0132\030.interfaces.msgSig"
  "nature\032=\n\tmsgTicket\022\033\n\021strTicketSerialNo"
  "\030\001 \002(\t:\000\022\023\n\tstrTicket\030\002 \002(\t:\000\032\210\001\n\023msgTic"
  "ketResolution\022\037\n\023iNoOfResolvedTicket\030\001 \002"
  "(\005:\002-1\022P\n\rpstTicketInfo\030\002 \003(\01329.interfac"
  "es.msgReversePsnymResolutionReq_RA2PCA.m"
  "sgTicket\"\223\006\n#msgReversePsnymResolutionRe"
  "s_PCA2RA\022\024\n\010iReqType\030\001 \002(\005:\002-1\022+\n\010stSign"
  "er\030\002 \001(\0132\031.interfaces.msgSignerInfo\022%\n\031i"
  "NoOfX509CertToBeResolved\030\003 \002(\005:\002-1\022c\n\027ps"
  "tTicketResolutionInfo\030\004 \003(\0132B.interfaces"
  ".msgReversePsnymResolutionRes_PCA2RA.msg"
  "PsnymResolution\022b\n\026pstPsnymResolutionInf"
  "o\030\005 \003(\0132B.interfaces.msgReversePsnymReso"
  "lutionRes_PCA2RA.msgPsnymResolution\022\022\n\006i"
  "Nonce\030\006 \002(\005:\002-1\022\026\n\ntTimeStamp\030\007 \002(\003:\002-1\022"
  "\'\n\tstErrInfo\030\010 \002(\0132\024.interfaces.msgError"
  "\022(\n\006stSign\030\t \001(\0132\030.interfaces.msgSignatu"
  "re\0329\n\010msgPsnym\022\033\n\021strTicketSerialNo\030\001 \002("
  "\t:\000\022\020\n\010strPsnym\030\002 \003(\t\032\207\001\n\023msgTicketResol"
  "ution\022\037\n\023iNoOfResolvedPsnyms\030\001 \002(\005:\002-1\022O"
  "\n\rpstTicketInfo\030\002 \003(\01328.interfaces.msgRe"
  "versePsnymResolutionRes_PCA2RA.msgPsnym\032"
  "u\n\022msgPsnymResolution\022\036\n\024strPsnymCertSer"
  "ialNo\030\001 \002(\t:\000\022\033\n\021strTicketSerialNo\030\002 \002(\t"
  ":\000\022\"\n\030strTicketIdentifiableKey\030\003 \002(\t:\000\"\305"
  "\003\n&msgReversePsnymResolutionRes_RA2Polic"
  "e\022\024\n\010iReqType\030\001 \002(\005:\002-1\022+\n\010stSigner\030\002 \001("
  "\0132\031.interfaces.msgSignerInfo\022%\n\031iNoOfX50"
  "9CertToBeResolved\030\003 \002(\005:\002-1\022e\n\026pstPsnymR"
  "esolutionInfo\030\004 \003(\0132E.interfaces.msgReve"
  "rsePsnymResolutionRes_RA2Police.msgPsnym"
  "Resolution\022\022\n\006iNonce\030\005 \002(\005:\002-1\022\026\n\ntTimeS"
  "tamp\030\006 \002(\003:\002-1\022\'\n\tstErrInfo\030\007 \002(\0132\024.inte"
  "rfaces.msgError\022(\n\006stSign\030\010 \001(\0132\030.interf"
  "aces.msgSignature\032K\n\022msgPsnymResolution\022"
  "\037\n\023iNoOfResolvedPsnyms\030\001 \002(\005:\002-1\022\024\n\014strP"
  "snymCert\030\002 \003(\t\"\375\001\n(msgTicketProvisionVal"
  "idationReq_LTCA2TVR\022\024\n\010iReqType\030\001 \002(\005:\002-"
  "1\022+\n\010stSigner\030\002 \001(\0132\031.interfaces.msgSign"
  "erInfo\022\031\n\017strLTCAECPubKey\030\003 \002(\t:\000\022\035\n\023str"
  "HashedVehiLTCert\030\004 \002(\t:\000\022\022\n\006iNonce\030\005 \002(\005"
  ":\002-1\022\026\n\ntTimeStamp\030\006 \002(\003:\002-1\022(\n\006stSign\030\007"
  " \001(\0132\030.interfaces.msgSignature\"\201\002\n(msgTi"
  "cketProvisionValidationRes_TVR2LTCA\022\024\n\010i"
  "ReqType\030\001 \002(\005:\002-1\022+\n\010stSigner\030\002 \001(\0132\031.in"
  "terfaces.msgSignerInfo\022\023\n\010chStatus\030\003 \002(\r"
  ":\0010\022\022\n\006iNonce\030\004 \002(\005:\002-1\022\026\n\ntTimeStamp\030\005 "
  "\002(\003:\002-1\022\'\n\tstErrInfo\030\006 \002(\0132\024.interfaces."
  "msgError\022(\n\006stSign\030\007 \001(\0132\030.interfaces.ms"
  "gSignature\"\366\001\n&msgPsnymProvisionValidati"
  "onReq_PCA2PVR\022\024\n\010iReqType\030\001 \002(\005:\002-1\022+\n\010s"
  "tSigner\030\002 \001(\0132\031.interfaces.msgSignerInfo"
  "\022\030\n\016strPCAECPubKey\030\003 \002(\t:\000\022\031\n\017strHashedT"
  "icket\030\004 \002(\t:\000\022\022\n\006iNonce\030\005 \002(\005:\002-1\022\026\n\ntTi"
  "meStamp\030\006 \002(\003:\002-1\022(\n\006stSign\030\007 \001(\0132\030.inte"
  "rfaces.msgSignature\"\377\001\n&msgPsnymProvisio"
  "nValidationRes_PVR2PCA\022\024\n\010iReqType\030\001 \002(\005"
  ":\002-1\022+\n\010stSigner\030\002 \001(\0132\031.interfaces.msgS"
  "ignerInfo\022\023\n\010chStatus\030\003 \002(\r:\0010\022\022\n\006iNonce"
  "\030\004 \002(\005:\002-1\022\026\n\ntTimeStamp\030\005 \002(\003:\002-1\022\'\n\tst"
  "ErrInfo\030\006 \002(\0132\024.interfaces.msgError\022(\n\006s"
  "tSign\030\007 \001(\0132\030.interfaces.msgSignatureB\030\n"
  "\026its.service.interfaces"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Interfaces_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Interfaces_2eproto_sccs[101] = {
  &scc_info_msgAIDType_Interfaces_2eproto.base,
  &scc_info_msgAppIDAndPriority_Interfaces_2eproto.base,
  &scc_info_msgApplicationID_Interfaces_2eproto.base,
  &scc_info_msgBanTicketsAck_Police2RA_Interfaces_2eproto.base,
  &scc_info_msgBanTicketsReq_Police2RA_Interfaces_2eproto.base,
  &scc_info_msgBanTicketsReq_Police2RA_msgBannedTickets_Interfaces_2eproto.base,
  &scc_info_msgBanTicketsReq_RA2PCA_Interfaces_2eproto.base,
  &scc_info_msgBanTicketsReq_RA2PCA_msgBannedTickets_Interfaces_2eproto.base,
  &scc_info_msgBanTicketsRes_PCA2RA_Interfaces_2eproto.base,
  &scc_info_msgBanTicketsRes_PCA2RA_msgBannedTickets_Interfaces_2eproto.base,
  &scc_info_msgBanTicketsRes_RA2Police_Interfaces_2eproto.base,
  &scc_info_msgBanTicketsRes_RA2Police_msgBannedTickets_Interfaces_2eproto.base,
  &scc_info_msgCAScope_Interfaces_2eproto.base,
  &scc_info_msgCRLType_Interfaces_2eproto.base,
  &scc_info_msgCertSpecificData_Interfaces_2eproto.base,
  &scc_info_msgCircularRegion_Interfaces_2eproto.base,
  &scc_info_msgECPublicKey_Interfaces_2eproto.base,
  &scc_info_msgError_Interfaces_2eproto.base,
  &scc_info_msgForeignTicketReq_Interfaces_2eproto.base,
  &scc_info_msgGeographicRegion_Interfaces_2eproto.base,
  &scc_info_msgIDAndDate_Interfaces_2eproto.base,
  &scc_info_msgIdentifiedScope_Interfaces_2eproto.base,
  &scc_info_msgOBUIdentifiedScope_Interfaces_2eproto.base,
  &scc_info_msgPoliceConfig_Interfaces_2eproto.base,
  &scc_info_msgPsnymCRLFormat_Interfaces_2eproto.base,
  &scc_info_msgPsnymCRLReq_V2PCA_Interfaces_2eproto.base,
  &scc_info_msgPsnymCRLRes_PCA2V_Interfaces_2eproto.base,
  &scc_info_msgPsnymCertAck_V2PCA_Interfaces_2eproto.base,
  &scc_info_msgPsnymCertFormat_Interfaces_2eproto.base,
  &scc_info_msgPsnymCertReq_V2PCA_Interfaces_2eproto.base,
  &scc_info_msgPsnymCertRes_PCA2V_Interfaces_2eproto.base,
  &scc_info_msgPsnymKeysStorage_Interfaces_2eproto.base,
  &scc_info_msgPsnymOCSPReq_V2PCA_Interfaces_2eproto.base,
  &scc_info_msgPsnymOCSPRes_PCA2V_Interfaces_2eproto.base,
  &scc_info_msgPsnymProvisionValidationReq_PCA2PVR_Interfaces_2eproto.base,
  &scc_info_msgPsnymProvisionValidationRes_PVR2PCA_Interfaces_2eproto.base,
  &scc_info_msgPsnymResolutionAck_Police2RA_Interfaces_2eproto.base,
  &scc_info_msgPsnymResolutionReq_Police2RA_Interfaces_2eproto.base,
  &scc_info_msgPsnymResolutionReq_RA2LTCA_Interfaces_2eproto.base,
  &scc_info_msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution_Interfaces_2eproto.base,
  &scc_info_msgPsnymResolutionReq_RA2PCA_Interfaces_2eproto.base,
  &scc_info_msgPsnymResolutionRes_LTCA2RA_Interfaces_2eproto.base,
  &scc_info_msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution_Interfaces_2eproto.base,
  &scc_info_msgPsnymResolutionRes_PCA2RA_Interfaces_2eproto.base,
  &scc_info_msgPsnymResolutionRes_PCA2RA_msgPsnymResolution_Interfaces_2eproto.base,
  &scc_info_msgPsnymResolutionRes_RA2Police_Interfaces_2eproto.base,
  &scc_info_msgPsnymResolutionRes_RA2Police_msgPsnymResolution_Interfaces_2eproto.base,
  &scc_info_msgPsnymRevocationStatus_Interfaces_2eproto.base,
  &scc_info_msgRectangularRegion_Interfaces_2eproto.base,
  &scc_info_msgRegionType_Interfaces_2eproto.base,
  &scc_info_msgReqProfile_Interfaces_2eproto.base,
  &scc_info_msgRequestScopeType_Interfaces_2eproto.base,
  &scc_info_msgReversePsnymResolutionReq_Police2RA_Interfaces_2eproto.base,
  &scc_info_msgReversePsnymResolutionReq_RA2LTCA_Interfaces_2eproto.base,
  &scc_info_msgReversePsnymResolutionReq_RA2PCA_Interfaces_2eproto.base,
  &scc_info_msgReversePsnymResolutionReq_RA2PCA_msgTicket_Interfaces_2eproto.base,
  &scc_info_msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution_Interfaces_2eproto.base,
  &scc_info_msgReversePsnymResolutionRes_LTCA2RA_Interfaces_2eproto.base,
  &scc_info_msgReversePsnymResolutionRes_LTCA2RA_msgTicket_Interfaces_2eproto.base,
  &scc_info_msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution_Interfaces_2eproto.base,
  &scc_info_msgReversePsnymResolutionRes_PCA2RA_Interfaces_2eproto.base,
  &scc_info_msgReversePsnymResolutionRes_PCA2RA_msgPsnym_Interfaces_2eproto.base,
  &scc_info_msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution_Interfaces_2eproto.base,
  &scc_info_msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution_Interfaces_2eproto.base,
  &scc_info_msgReversePsnymResolutionRes_RA2Police_Interfaces_2eproto.base,
  &scc_info_msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution_Interfaces_2eproto.base,
  &scc_info_msgRevokePsnymCertReq_P2RA_Interfaces_2eproto.base,
  &scc_info_msgRevokePsnymCertReq_RA2PCA_Interfaces_2eproto.base,
  &scc_info_msgRevokePsnymCertRes_PCA2RA_Interfaces_2eproto.base,
  &scc_info_msgRevokePsnymCertRes_RA2P_Interfaces_2eproto.base,
  &scc_info_msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo_Interfaces_2eproto.base,
  &scc_info_msgRevokeX509CertReq_RA2LTCA_Interfaces_2eproto.base,
  &scc_info_msgSignature_Interfaces_2eproto.base,
  &scc_info_msgSignerIdentifierType_Interfaces_2eproto.base,
  &scc_info_msgSignerInfo_Interfaces_2eproto.base,
  &scc_info_msgSubType_Interfaces_2eproto.base,
  &scc_info_msgSubTypeFlags_Interfaces_2eproto.base,
  &scc_info_msgTicketFormat_Interfaces_2eproto.base,
  &scc_info_msgTicketProvisionValidationReq_LTCA2TVR_Interfaces_2eproto.base,
  &scc_info_msgTicketProvisionValidationRes_TVR2LTCA_Interfaces_2eproto.base,
  &scc_info_msgTicketReq_Interfaces_2eproto.base,
  &scc_info_msgTicketRes_Interfaces_2eproto.base,
  &scc_info_msgToBeSignedCRL_Interfaces_2eproto.base,
  &scc_info_msgToBeSignedCSR_Interfaces_2eproto.base,
  &scc_info_msgToBeSignedWAVECertificate_Interfaces_2eproto.base,
  &scc_info_msgTwoDLocation_Interfaces_2eproto.base,
  &scc_info_msgUpgradeConfigurationReq_Client2Server_Interfaces_2eproto.base,
  &scc_info_msgUpgradeConfigurationRes_Server2Client_Interfaces_2eproto.base,
  &scc_info_msgVPKILibConfig_Interfaces_2eproto.base,
  &scc_info_msgVPKILibConfig_msgPsnymPolicy_Interfaces_2eproto.base,
  &scc_info_msgVPKILibConfig_msgTicketPolicy_Interfaces_2eproto.base,
  &scc_info_msgVehicleAttributes_Interfaces_2eproto.base,
  &scc_info_msgVehicleConfig_Interfaces_2eproto.base,
  &scc_info_msgVoucherReq_V2LTCA_Interfaces_2eproto.base,
  &scc_info_msgVoucherRes_LTCA2V_Interfaces_2eproto.base,
  &scc_info_msgWAVECRL_Interfaces_2eproto.base,
  &scc_info_msgWAVECertificateRequest_Interfaces_2eproto.base,
  &scc_info_msgWAVECertificateResponse_Interfaces_2eproto.base,
  &scc_info_msgWSASignerScope_Interfaces_2eproto.base,
  &scc_info_msgX509CertReq_V2LTCA_Interfaces_2eproto.base,
  &scc_info_msgX509CertRes_LTCA2V_Interfaces_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Interfaces_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Interfaces_2eproto = {
  false, false, descriptor_table_protodef_Interfaces_2eproto, "Interfaces.proto", 23423,
  &descriptor_table_Interfaces_2eproto_once, descriptor_table_Interfaces_2eproto_sccs, descriptor_table_Interfaces_2eproto_deps, 101, 0,
  schemas, file_default_instances, TableStruct_Interfaces_2eproto::offsets,
  file_level_metadata_Interfaces_2eproto, 101, file_level_enum_descriptors_Interfaces_2eproto, file_level_service_descriptors_Interfaces_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Interfaces_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Interfaces_2eproto)), true);
namespace interfaces {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* msgSignerIdentifierType_SignerIdentifierType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Interfaces_2eproto);
  return file_level_enum_descriptors_Interfaces_2eproto[0];
}
bool msgSignerIdentifierType_SignerIdentifierType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr msgSignerIdentifierType_SignerIdentifierType msgSignerIdentifierType::certificate;
constexpr msgSignerIdentifierType_SignerIdentifierType msgSignerIdentifierType::certificateDigest;
constexpr msgSignerIdentifierType_SignerIdentifierType msgSignerIdentifierType::certificateChain;
constexpr msgSignerIdentifierType_SignerIdentifierType msgSignerIdentifierType::self;
constexpr msgSignerIdentifierType_SignerIdentifierType msgSignerIdentifierType::SignerIdentifierType_MIN;
constexpr msgSignerIdentifierType_SignerIdentifierType msgSignerIdentifierType::SignerIdentifierType_MAX;
constexpr int msgSignerIdentifierType::SignerIdentifierType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* msgSubType_SubjectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Interfaces_2eproto);
  return file_level_enum_descriptors_Interfaces_2eproto[1];
}
bool msgSubType_SubjectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr msgSubType_SubjectType msgSubType::wsa_ca1;
constexpr msgSubType_SubjectType msgSubType::ca;
constexpr msgSubType_SubjectType msgSubType::wsa_signer;
constexpr msgSubType_SubjectType msgSubType::rsu;
constexpr msgSubType_SubjectType msgSubType::psobu;
constexpr msgSubType_SubjectType msgSubType::obu_identified;
constexpr msgSubType_SubjectType msgSubType::crl_signer;
constexpr msgSubType_SubjectType msgSubType::csr_signer;
constexpr msgSubType_SubjectType msgSubType::root_ca;
constexpr msgSubType_SubjectType msgSubType::SubjectType_MIN;
constexpr msgSubType_SubjectType msgSubType::SubjectType_MAX;
constexpr int msgSubType::SubjectType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* msgSubTypeFlags_SubjectTypeFlags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Interfaces_2eproto);
  return file_level_enum_descriptors_Interfaces_2eproto[2];
}
bool msgSubTypeFlags_SubjectTypeFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr msgSubTypeFlags_SubjectTypeFlags msgSubTypeFlags::wsa_ca;
constexpr msgSubTypeFlags_SubjectTypeFlags msgSubTypeFlags::ca;
constexpr msgSubTypeFlags_SubjectTypeFlags msgSubTypeFlags::wsaSigner;
constexpr msgSubTypeFlags_SubjectTypeFlags msgSubTypeFlags::rsu;
constexpr msgSubTypeFlags_SubjectTypeFlags msgSubTypeFlags::psobu;
constexpr msgSubTypeFlags_SubjectTypeFlags msgSubTypeFlags::obuIdentified;
constexpr msgSubTypeFlags_SubjectTypeFlags msgSubTypeFlags::crlSigner;
constexpr msgSubTypeFlags_SubjectTypeFlags msgSubTypeFlags::csrSigner;
constexpr msgSubTypeFlags_SubjectTypeFlags msgSubTypeFlags::SubjectTypeFlags_MIN;
constexpr msgSubTypeFlags_SubjectTypeFlags msgSubTypeFlags::SubjectTypeFlags_MAX;
constexpr int msgSubTypeFlags::SubjectTypeFlags_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* msgAIDType_AIDType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Interfaces_2eproto);
  return file_level_enum_descriptors_Interfaces_2eproto[3];
}
bool msgAIDType_AIDType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr msgAIDType_AIDType msgAIDType::fullySpecified;
constexpr msgAIDType_AIDType msgAIDType::matchAnyAcm;
constexpr msgAIDType_AIDType msgAIDType::fromIssuer;
constexpr msgAIDType_AIDType msgAIDType::AIDType_MIN;
constexpr msgAIDType_AIDType msgAIDType::AIDType_MAX;
constexpr int msgAIDType::AIDType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* msgRegionType_RegionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Interfaces_2eproto);
  return file_level_enum_descriptors_Interfaces_2eproto[4];
}
bool msgRegionType_RegionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr msgRegionType_RegionType msgRegionType::fromIssuer;
constexpr msgRegionType_RegionType msgRegionType::circle;
constexpr msgRegionType_RegionType msgRegionType::rectangle;
constexpr msgRegionType_RegionType msgRegionType::polygon;
constexpr msgRegionType_RegionType msgRegionType::none;
constexpr msgRegionType_RegionType msgRegionType::RegionType_MIN;
constexpr msgRegionType_RegionType msgRegionType::RegionType_MAX;
constexpr int msgRegionType::RegionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* msgWSASignerScope_WSASignerScope_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Interfaces_2eproto);
  return file_level_enum_descriptors_Interfaces_2eproto[5];
}
bool msgWSASignerScope_WSASignerScope_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr msgWSASignerScope_WSASignerScope msgWSASignerScope::wsaSignerAdvertisingSpecificApplications;
constexpr msgWSASignerScope_WSASignerScope msgWSASignerScope::wsaSignerOperateWithinCertainArea;
constexpr msgWSASignerScope_WSASignerScope msgWSASignerScope::wsaSignerUniqueIdentifyingName;
constexpr msgWSASignerScope_WSASignerScope msgWSASignerScope::WSASignerScope_MIN;
constexpr msgWSASignerScope_WSASignerScope msgWSASignerScope::WSASignerScope_MAX;
constexpr int msgWSASignerScope::WSASignerScope_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* msgRequestScopeType_RequestScopeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Interfaces_2eproto);
  return file_level_enum_descriptors_Interfaces_2eproto[6];
}
bool msgRequestScopeType_RequestScopeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr msgRequestScopeType_RequestScopeType msgRequestScopeType::specifiedInRequest;
constexpr msgRequestScopeType_RequestScopeType msgRequestScopeType::specifiedByCA;
constexpr msgRequestScopeType_RequestScopeType msgRequestScopeType::RequestScopeType_MIN;
constexpr msgRequestScopeType_RequestScopeType msgRequestScopeType::RequestScopeType_MAX;
constexpr int msgRequestScopeType::RequestScopeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* msgCRLType_CRLType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Interfaces_2eproto);
  return file_level_enum_descriptors_Interfaces_2eproto[7];
}
bool msgCRLType_CRLType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr msgCRLType_CRLType msgCRLType::idOnly;
constexpr msgCRLType_CRLType msgCRLType::idAndExpiry;
constexpr msgCRLType_CRLType msgCRLType::CRLType_MIN;
constexpr msgCRLType_CRLType msgCRLType::CRLType_MAX;
constexpr int msgCRLType::CRLType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void msgReqProfile::InitAsDefaultInstance() {
}
class msgReqProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<msgReqProfile>()._has_bits_);
  static void set_has_strreqidentification(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

msgReqProfile::msgReqProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgReqProfile)
}
msgReqProfile::msgReqProfile(const msgReqProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strreqidentification_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strreqidentification()) {
    strreqidentification_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strreqidentification(),
      GetArena());
  }
  inonce_ = from.inonce_;
  // @@protoc_insertion_point(copy_constructor:interfaces.msgReqProfile)
}

void msgReqProfile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgReqProfile_Interfaces_2eproto.base);
  strreqidentification_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inonce_ = -1;
}

msgReqProfile::~msgReqProfile() {
  // @@protoc_insertion_point(destructor:interfaces.msgReqProfile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgReqProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strreqidentification_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msgReqProfile::ArenaDtor(void* object) {
  msgReqProfile* _this = reinterpret_cast< msgReqProfile* >(object);
  (void)_this;
}
void msgReqProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgReqProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgReqProfile& msgReqProfile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgReqProfile_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgReqProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgReqProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      strreqidentification_.ClearNonDefaultToEmpty();
    }
    inonce_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgReqProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string strReqIdentification = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_strreqidentification();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgReqProfile.strReqIdentification");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgReqProfile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgReqProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string strReqIdentification = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strreqidentification().data(), static_cast<int>(this->_internal_strreqidentification().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgReqProfile.strReqIdentification");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_strreqidentification(), target);
  }

  // required int32 iNonce = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_inonce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgReqProfile)
  return target;
}

size_t msgReqProfile::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgReqProfile)
  size_t total_size = 0;

  if (_internal_has_strreqidentification()) {
    // required string strReqIdentification = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strreqidentification());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 2 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  return total_size;
}
size_t msgReqProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgReqProfile)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string strReqIdentification = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strreqidentification());

    // required int32 iNonce = 2 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgReqProfile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgReqProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const msgReqProfile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgReqProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgReqProfile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgReqProfile)
    MergeFrom(*source);
  }
}

void msgReqProfile::MergeFrom(const msgReqProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgReqProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strreqidentification(from._internal_strreqidentification());
    }
    if (cached_has_bits & 0x00000002u) {
      inonce_ = from.inonce_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgReqProfile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgReqProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgReqProfile::CopyFrom(const msgReqProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgReqProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgReqProfile::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void msgReqProfile::InternalSwap(msgReqProfile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strreqidentification_.Swap(&other->strreqidentification_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(inonce_, other->inonce_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgReqProfile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgSignature::InitAsDefaultInstance() {
}
class msgSignature::_Internal {
 public:
  using HasBits = decltype(std::declval<msgSignature>()._has_bits_);
  static void set_has_uicurveorderoctets(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uisignlen(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_strsignature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

msgSignature::msgSignature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgSignature)
}
msgSignature::msgSignature(const msgSignature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strsignature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strsignature()) {
    strsignature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strsignature(),
      GetArena());
  }
  ::memcpy(&uicurveorderoctets_, &from.uicurveorderoctets_,
    static_cast<size_t>(reinterpret_cast<char*>(&uisignlen_) -
    reinterpret_cast<char*>(&uicurveorderoctets_)) + sizeof(uisignlen_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgSignature)
}

void msgSignature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgSignature_Interfaces_2eproto.base);
  strsignature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uicurveorderoctets_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uisignlen_) -
      reinterpret_cast<char*>(&uicurveorderoctets_)) + sizeof(uisignlen_));
}

msgSignature::~msgSignature() {
  // @@protoc_insertion_point(destructor:interfaces.msgSignature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgSignature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strsignature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msgSignature::ArenaDtor(void* object) {
  msgSignature* _this = reinterpret_cast< msgSignature* >(object);
  (void)_this;
}
void msgSignature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgSignature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgSignature& msgSignature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgSignature_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgSignature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    strsignature_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&uicurveorderoctets_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uisignlen_) -
        reinterpret_cast<char*>(&uicurveorderoctets_)) + sizeof(uisignlen_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgSignature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 uiCurveOrderOctets = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uicurveorderoctets(&has_bits);
          uicurveorderoctets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiSignLen = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_uisignlen(&has_bits);
          uisignlen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string strSignature = 3 [default = ""];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_strsignature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgSignature.strSignature");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgSignature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgSignature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 uiCurveOrderOctets = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uicurveorderoctets(), target);
  }

  // optional uint32 uiSignLen = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uisignlen(), target);
  }

  // optional string strSignature = 3 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strsignature().data(), static_cast<int>(this->_internal_strsignature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgSignature.strSignature");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_strsignature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgSignature)
  return target;
}

size_t msgSignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgSignature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string strSignature = 3 [default = ""];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_strsignature());
    }

    // optional uint32 uiCurveOrderOctets = 1 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uicurveorderoctets());
    }

    // optional uint32 uiSignLen = 2 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uisignlen());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgSignature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgSignature)
  GOOGLE_DCHECK_NE(&from, this);
  const msgSignature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgSignature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgSignature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgSignature)
    MergeFrom(*source);
  }
}

void msgSignature::MergeFrom(const msgSignature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgSignature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strsignature(from._internal_strsignature());
    }
    if (cached_has_bits & 0x00000002u) {
      uicurveorderoctets_ = from.uicurveorderoctets_;
    }
    if (cached_has_bits & 0x00000004u) {
      uisignlen_ = from.uisignlen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgSignature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgSignature::CopyFrom(const msgSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgSignature::IsInitialized() const {
  return true;
}

void msgSignature::InternalSwap(msgSignature* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strsignature_.Swap(&other->strsignature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgSignature, uisignlen_)
      + sizeof(msgSignature::uisignlen_)
      - PROTOBUF_FIELD_OFFSET(msgSignature, uicurveorderoctets_)>(
          reinterpret_cast<char*>(&uicurveorderoctets_),
          reinterpret_cast<char*>(&other->uicurveorderoctets_));
}

::PROTOBUF_NAMESPACE_ID::Metadata msgSignature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgError::InitAsDefaultInstance() {
}
class msgError::_Internal {
 public:
  using HasBits = decltype(std::declval<msgError>()._has_bits_);
  static void set_has_ierrcode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_strerrmsgdes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

msgError::msgError(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgError)
}
msgError::msgError(const msgError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strerrmsgdes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strerrmsgdes()) {
    strerrmsgdes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strerrmsgdes(),
      GetArena());
  }
  ierrcode_ = from.ierrcode_;
  // @@protoc_insertion_point(copy_constructor:interfaces.msgError)
}

void msgError::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgError_Interfaces_2eproto.base);
  strerrmsgdes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ierrcode_ = 100;
}

msgError::~msgError() {
  // @@protoc_insertion_point(destructor:interfaces.msgError)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgError::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strerrmsgdes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msgError::ArenaDtor(void* object) {
  msgError* _this = reinterpret_cast< msgError* >(object);
  (void)_this;
}
void msgError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgError& msgError::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgError_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgError::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      strerrmsgdes_.ClearNonDefaultToEmpty();
    }
    ierrcode_ = 100;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iErrCode = 1 [default = 100];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ierrcode(&has_bits);
          ierrcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strErrMsgDes = 2 [default = ""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_strerrmsgdes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgError.strErrMsgDes");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iErrCode = 1 [default = 100];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ierrcode(), target);
  }

  // required string strErrMsgDes = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strerrmsgdes().data(), static_cast<int>(this->_internal_strerrmsgdes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgError.strErrMsgDes");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_strerrmsgdes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgError)
  return target;
}

size_t msgError::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgError)
  size_t total_size = 0;

  if (_internal_has_strerrmsgdes()) {
    // required string strErrMsgDes = 2 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strerrmsgdes());
  }

  if (_internal_has_ierrcode()) {
    // required int32 iErrCode = 1 [default = 100];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ierrcode());
  }

  return total_size;
}
size_t msgError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgError)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string strErrMsgDes = 2 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strerrmsgdes());

    // required int32 iErrCode = 1 [default = 100];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ierrcode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgError::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgError)
  GOOGLE_DCHECK_NE(&from, this);
  const msgError* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgError>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgError)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgError)
    MergeFrom(*source);
  }
}

void msgError::MergeFrom(const msgError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strerrmsgdes(from._internal_strerrmsgdes());
    }
    if (cached_has_bits & 0x00000002u) {
      ierrcode_ = from.ierrcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgError::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgError::CopyFrom(const msgError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgError::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void msgError::InternalSwap(msgError* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strerrmsgdes_.Swap(&other->strerrmsgdes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ierrcode_, other->ierrcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgError::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgECPublicKey::InitAsDefaultInstance() {
}
class msgECPublicKey::_Internal {
 public:
  using HasBits = decltype(std::declval<msgECPublicKey>()._has_bits_);
  static void set_has_uipsnympublickeylen(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_strpsnympublickey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

msgECPublicKey::msgECPublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgECPublicKey)
}
msgECPublicKey::msgECPublicKey(const msgECPublicKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strpsnympublickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strpsnympublickey()) {
    strpsnympublickey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strpsnympublickey(),
      GetArena());
  }
  uipsnympublickeylen_ = from.uipsnympublickeylen_;
  // @@protoc_insertion_point(copy_constructor:interfaces.msgECPublicKey)
}

void msgECPublicKey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgECPublicKey_Interfaces_2eproto.base);
  strpsnympublickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uipsnympublickeylen_ = 0u;
}

msgECPublicKey::~msgECPublicKey() {
  // @@protoc_insertion_point(destructor:interfaces.msgECPublicKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgECPublicKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strpsnympublickey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msgECPublicKey::ArenaDtor(void* object) {
  msgECPublicKey* _this = reinterpret_cast< msgECPublicKey* >(object);
  (void)_this;
}
void msgECPublicKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgECPublicKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgECPublicKey& msgECPublicKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgECPublicKey_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgECPublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgECPublicKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    strpsnympublickey_.ClearNonDefaultToEmpty();
  }
  uipsnympublickeylen_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgECPublicKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 uiPsnymPublicKeyLen = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uipsnympublickeylen(&has_bits);
          uipsnympublickeylen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strPsnymPublicKey = 2 [default = ""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_strpsnympublickey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgECPublicKey.strPsnymPublicKey");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgECPublicKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgECPublicKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 uiPsnymPublicKeyLen = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uipsnympublickeylen(), target);
  }

  // required string strPsnymPublicKey = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strpsnympublickey().data(), static_cast<int>(this->_internal_strpsnympublickey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgECPublicKey.strPsnymPublicKey");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_strpsnympublickey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgECPublicKey)
  return target;
}

size_t msgECPublicKey::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgECPublicKey)
  size_t total_size = 0;

  if (_internal_has_strpsnympublickey()) {
    // required string strPsnymPublicKey = 2 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpsnympublickey());
  }

  if (_internal_has_uipsnympublickeylen()) {
    // required uint32 uiPsnymPublicKeyLen = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uipsnympublickeylen());
  }

  return total_size;
}
size_t msgECPublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgECPublicKey)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string strPsnymPublicKey = 2 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpsnympublickey());

    // required uint32 uiPsnymPublicKeyLen = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uipsnympublickeylen());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgECPublicKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgECPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  const msgECPublicKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgECPublicKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgECPublicKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgECPublicKey)
    MergeFrom(*source);
  }
}

void msgECPublicKey::MergeFrom(const msgECPublicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgECPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strpsnympublickey(from._internal_strpsnympublickey());
    }
    if (cached_has_bits & 0x00000002u) {
      uipsnympublickeylen_ = from.uipsnympublickeylen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgECPublicKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgECPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgECPublicKey::CopyFrom(const msgECPublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgECPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgECPublicKey::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void msgECPublicKey::InternalSwap(msgECPublicKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strpsnympublickey_.Swap(&other->strpsnympublickey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(uipsnympublickeylen_, other->uipsnympublickeylen_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgECPublicKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgSignerIdentifierType::InitAsDefaultInstance() {
}
class msgSignerIdentifierType::_Internal {
 public:
};

msgSignerIdentifierType::msgSignerIdentifierType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgSignerIdentifierType)
}
msgSignerIdentifierType::msgSignerIdentifierType(const msgSignerIdentifierType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:interfaces.msgSignerIdentifierType)
}

void msgSignerIdentifierType::SharedCtor() {
}

msgSignerIdentifierType::~msgSignerIdentifierType() {
  // @@protoc_insertion_point(destructor:interfaces.msgSignerIdentifierType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgSignerIdentifierType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msgSignerIdentifierType::ArenaDtor(void* object) {
  msgSignerIdentifierType* _this = reinterpret_cast< msgSignerIdentifierType* >(object);
  (void)_this;
}
void msgSignerIdentifierType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgSignerIdentifierType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgSignerIdentifierType& msgSignerIdentifierType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgSignerIdentifierType_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgSignerIdentifierType::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgSignerIdentifierType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgSignerIdentifierType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgSignerIdentifierType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgSignerIdentifierType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgSignerIdentifierType)
  return target;
}

size_t msgSignerIdentifierType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgSignerIdentifierType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgSignerIdentifierType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgSignerIdentifierType)
  GOOGLE_DCHECK_NE(&from, this);
  const msgSignerIdentifierType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgSignerIdentifierType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgSignerIdentifierType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgSignerIdentifierType)
    MergeFrom(*source);
  }
}

void msgSignerIdentifierType::MergeFrom(const msgSignerIdentifierType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgSignerIdentifierType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void msgSignerIdentifierType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgSignerIdentifierType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgSignerIdentifierType::CopyFrom(const msgSignerIdentifierType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgSignerIdentifierType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgSignerIdentifierType::IsInitialized() const {
  return true;
}

void msgSignerIdentifierType::InternalSwap(msgSignerIdentifierType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgSignerIdentifierType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgSubType::InitAsDefaultInstance() {
}
class msgSubType::_Internal {
 public:
};

msgSubType::msgSubType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgSubType)
}
msgSubType::msgSubType(const msgSubType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:interfaces.msgSubType)
}

void msgSubType::SharedCtor() {
}

msgSubType::~msgSubType() {
  // @@protoc_insertion_point(destructor:interfaces.msgSubType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgSubType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msgSubType::ArenaDtor(void* object) {
  msgSubType* _this = reinterpret_cast< msgSubType* >(object);
  (void)_this;
}
void msgSubType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgSubType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgSubType& msgSubType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgSubType_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgSubType::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgSubType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgSubType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgSubType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgSubType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgSubType)
  return target;
}

size_t msgSubType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgSubType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgSubType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgSubType)
  GOOGLE_DCHECK_NE(&from, this);
  const msgSubType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgSubType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgSubType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgSubType)
    MergeFrom(*source);
  }
}

void msgSubType::MergeFrom(const msgSubType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgSubType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void msgSubType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgSubType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgSubType::CopyFrom(const msgSubType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgSubType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgSubType::IsInitialized() const {
  return true;
}

void msgSubType::InternalSwap(msgSubType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgSubType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgSubTypeFlags::InitAsDefaultInstance() {
}
class msgSubTypeFlags::_Internal {
 public:
};

msgSubTypeFlags::msgSubTypeFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgSubTypeFlags)
}
msgSubTypeFlags::msgSubTypeFlags(const msgSubTypeFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:interfaces.msgSubTypeFlags)
}

void msgSubTypeFlags::SharedCtor() {
}

msgSubTypeFlags::~msgSubTypeFlags() {
  // @@protoc_insertion_point(destructor:interfaces.msgSubTypeFlags)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgSubTypeFlags::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msgSubTypeFlags::ArenaDtor(void* object) {
  msgSubTypeFlags* _this = reinterpret_cast< msgSubTypeFlags* >(object);
  (void)_this;
}
void msgSubTypeFlags::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgSubTypeFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgSubTypeFlags& msgSubTypeFlags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgSubTypeFlags_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgSubTypeFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgSubTypeFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgSubTypeFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgSubTypeFlags::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgSubTypeFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgSubTypeFlags)
  return target;
}

size_t msgSubTypeFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgSubTypeFlags)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgSubTypeFlags::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgSubTypeFlags)
  GOOGLE_DCHECK_NE(&from, this);
  const msgSubTypeFlags* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgSubTypeFlags>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgSubTypeFlags)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgSubTypeFlags)
    MergeFrom(*source);
  }
}

void msgSubTypeFlags::MergeFrom(const msgSubTypeFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgSubTypeFlags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void msgSubTypeFlags::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgSubTypeFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgSubTypeFlags::CopyFrom(const msgSubTypeFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgSubTypeFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgSubTypeFlags::IsInitialized() const {
  return true;
}

void msgSubTypeFlags::InternalSwap(msgSubTypeFlags* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgSubTypeFlags::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgAIDType::InitAsDefaultInstance() {
}
class msgAIDType::_Internal {
 public:
};

msgAIDType::msgAIDType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgAIDType)
}
msgAIDType::msgAIDType(const msgAIDType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:interfaces.msgAIDType)
}

void msgAIDType::SharedCtor() {
}

msgAIDType::~msgAIDType() {
  // @@protoc_insertion_point(destructor:interfaces.msgAIDType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgAIDType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msgAIDType::ArenaDtor(void* object) {
  msgAIDType* _this = reinterpret_cast< msgAIDType* >(object);
  (void)_this;
}
void msgAIDType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgAIDType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgAIDType& msgAIDType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgAIDType_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgAIDType::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgAIDType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgAIDType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgAIDType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgAIDType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgAIDType)
  return target;
}

size_t msgAIDType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgAIDType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgAIDType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgAIDType)
  GOOGLE_DCHECK_NE(&from, this);
  const msgAIDType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgAIDType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgAIDType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgAIDType)
    MergeFrom(*source);
  }
}

void msgAIDType::MergeFrom(const msgAIDType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgAIDType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void msgAIDType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgAIDType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgAIDType::CopyFrom(const msgAIDType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgAIDType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgAIDType::IsInitialized() const {
  return true;
}

void msgAIDType::InternalSwap(msgAIDType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgAIDType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgRegionType::InitAsDefaultInstance() {
}
class msgRegionType::_Internal {
 public:
};

msgRegionType::msgRegionType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgRegionType)
}
msgRegionType::msgRegionType(const msgRegionType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:interfaces.msgRegionType)
}

void msgRegionType::SharedCtor() {
}

msgRegionType::~msgRegionType() {
  // @@protoc_insertion_point(destructor:interfaces.msgRegionType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgRegionType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msgRegionType::ArenaDtor(void* object) {
  msgRegionType* _this = reinterpret_cast< msgRegionType* >(object);
  (void)_this;
}
void msgRegionType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgRegionType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgRegionType& msgRegionType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgRegionType_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgRegionType::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgRegionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgRegionType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgRegionType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgRegionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgRegionType)
  return target;
}

size_t msgRegionType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgRegionType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgRegionType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgRegionType)
  GOOGLE_DCHECK_NE(&from, this);
  const msgRegionType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgRegionType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgRegionType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgRegionType)
    MergeFrom(*source);
  }
}

void msgRegionType::MergeFrom(const msgRegionType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgRegionType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void msgRegionType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgRegionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgRegionType::CopyFrom(const msgRegionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgRegionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgRegionType::IsInitialized() const {
  return true;
}

void msgRegionType::InternalSwap(msgRegionType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgRegionType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgWSASignerScope::InitAsDefaultInstance() {
}
class msgWSASignerScope::_Internal {
 public:
};

msgWSASignerScope::msgWSASignerScope(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgWSASignerScope)
}
msgWSASignerScope::msgWSASignerScope(const msgWSASignerScope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:interfaces.msgWSASignerScope)
}

void msgWSASignerScope::SharedCtor() {
}

msgWSASignerScope::~msgWSASignerScope() {
  // @@protoc_insertion_point(destructor:interfaces.msgWSASignerScope)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgWSASignerScope::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msgWSASignerScope::ArenaDtor(void* object) {
  msgWSASignerScope* _this = reinterpret_cast< msgWSASignerScope* >(object);
  (void)_this;
}
void msgWSASignerScope::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgWSASignerScope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgWSASignerScope& msgWSASignerScope::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgWSASignerScope_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgWSASignerScope::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgWSASignerScope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgWSASignerScope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgWSASignerScope::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgWSASignerScope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgWSASignerScope)
  return target;
}

size_t msgWSASignerScope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgWSASignerScope)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgWSASignerScope::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgWSASignerScope)
  GOOGLE_DCHECK_NE(&from, this);
  const msgWSASignerScope* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgWSASignerScope>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgWSASignerScope)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgWSASignerScope)
    MergeFrom(*source);
  }
}

void msgWSASignerScope::MergeFrom(const msgWSASignerScope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgWSASignerScope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void msgWSASignerScope::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgWSASignerScope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgWSASignerScope::CopyFrom(const msgWSASignerScope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgWSASignerScope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgWSASignerScope::IsInitialized() const {
  return true;
}

void msgWSASignerScope::InternalSwap(msgWSASignerScope* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgWSASignerScope::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgRequestScopeType::InitAsDefaultInstance() {
}
class msgRequestScopeType::_Internal {
 public:
};

msgRequestScopeType::msgRequestScopeType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgRequestScopeType)
}
msgRequestScopeType::msgRequestScopeType(const msgRequestScopeType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:interfaces.msgRequestScopeType)
}

void msgRequestScopeType::SharedCtor() {
}

msgRequestScopeType::~msgRequestScopeType() {
  // @@protoc_insertion_point(destructor:interfaces.msgRequestScopeType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgRequestScopeType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msgRequestScopeType::ArenaDtor(void* object) {
  msgRequestScopeType* _this = reinterpret_cast< msgRequestScopeType* >(object);
  (void)_this;
}
void msgRequestScopeType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgRequestScopeType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgRequestScopeType& msgRequestScopeType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgRequestScopeType_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgRequestScopeType::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgRequestScopeType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgRequestScopeType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgRequestScopeType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgRequestScopeType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgRequestScopeType)
  return target;
}

size_t msgRequestScopeType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgRequestScopeType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgRequestScopeType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgRequestScopeType)
  GOOGLE_DCHECK_NE(&from, this);
  const msgRequestScopeType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgRequestScopeType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgRequestScopeType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgRequestScopeType)
    MergeFrom(*source);
  }
}

void msgRequestScopeType::MergeFrom(const msgRequestScopeType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgRequestScopeType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void msgRequestScopeType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgRequestScopeType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgRequestScopeType::CopyFrom(const msgRequestScopeType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgRequestScopeType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgRequestScopeType::IsInitialized() const {
  return true;
}

void msgRequestScopeType::InternalSwap(msgRequestScopeType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgRequestScopeType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgVoucherReq_V2LTCA::InitAsDefaultInstance() {
}
class msgVoucherReq_V2LTCA::_Internal {
 public:
  using HasBits = decltype(std::declval<msgVoucherReq_V2LTCA>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_strusername(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_strpwd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stremailaddress(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_strcaptcha(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

msgVoucherReq_V2LTCA::msgVoucherReq_V2LTCA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgVoucherReq_V2LTCA)
}
msgVoucherReq_V2LTCA::msgVoucherReq_V2LTCA(const msgVoucherReq_V2LTCA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strusername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strusername()) {
    strusername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strusername(),
      GetArena());
  }
  strpwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strpwd()) {
    strpwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strpwd(),
      GetArena());
  }
  stremailaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_stremailaddress()) {
    stremailaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_stremailaddress(),
      GetArena());
  }
  strcaptcha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strcaptcha()) {
    strcaptcha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strcaptcha(),
      GetArena());
  }
  ::memcpy(&ireqtype_, &from.ireqtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&ireqtype_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgVoucherReq_V2LTCA)
}

void msgVoucherReq_V2LTCA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgVoucherReq_V2LTCA_Interfaces_2eproto.base);
  strusername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strpwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stremailaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strcaptcha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ireqtype_ = -1;
  inonce_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgVoucherReq_V2LTCA::~msgVoucherReq_V2LTCA() {
  // @@protoc_insertion_point(destructor:interfaces.msgVoucherReq_V2LTCA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgVoucherReq_V2LTCA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strusername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strpwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stremailaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strcaptcha_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msgVoucherReq_V2LTCA::ArenaDtor(void* object) {
  msgVoucherReq_V2LTCA* _this = reinterpret_cast< msgVoucherReq_V2LTCA* >(object);
  (void)_this;
}
void msgVoucherReq_V2LTCA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgVoucherReq_V2LTCA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgVoucherReq_V2LTCA& msgVoucherReq_V2LTCA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgVoucherReq_V2LTCA_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgVoucherReq_V2LTCA::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgVoucherReq_V2LTCA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      strusername_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      strpwd_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      stremailaddress_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      strcaptcha_.ClearNonDefaultToEmpty();
    }
    ireqtype_ = -1;
    inonce_ = -1;
    ttimestamp_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgVoucherReq_V2LTCA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strUserName = 2 [default = ""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_strusername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgVoucherReq_V2LTCA.strUserName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strPwd = 3 [default = ""];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_strpwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgVoucherReq_V2LTCA.strPwd");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strEmailAddress = 4 [default = ""];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_stremailaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgVoucherReq_V2LTCA.strEmailAddress");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strCaptcha = 5 [default = ""];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_strcaptcha();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgVoucherReq_V2LTCA.strCaptcha");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgVoucherReq_V2LTCA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgVoucherReq_V2LTCA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // required string strUserName = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strusername().data(), static_cast<int>(this->_internal_strusername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgVoucherReq_V2LTCA.strUserName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_strusername(), target);
  }

  // required string strPwd = 3 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strpwd().data(), static_cast<int>(this->_internal_strpwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgVoucherReq_V2LTCA.strPwd");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_strpwd(), target);
  }

  // required string strEmailAddress = 4 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stremailaddress().data(), static_cast<int>(this->_internal_stremailaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgVoucherReq_V2LTCA.strEmailAddress");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_stremailaddress(), target);
  }

  // required string strCaptcha = 5 [default = ""];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strcaptcha().data(), static_cast<int>(this->_internal_strcaptcha().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgVoucherReq_V2LTCA.strCaptcha");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_strcaptcha(), target);
  }

  // required int32 iNonce = 6 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 7 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_ttimestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgVoucherReq_V2LTCA)
  return target;
}

size_t msgVoucherReq_V2LTCA::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgVoucherReq_V2LTCA)
  size_t total_size = 0;

  if (_internal_has_strusername()) {
    // required string strUserName = 2 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strusername());
  }

  if (_internal_has_strpwd()) {
    // required string strPwd = 3 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpwd());
  }

  if (_internal_has_stremailaddress()) {
    // required string strEmailAddress = 4 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stremailaddress());
  }

  if (_internal_has_strcaptcha()) {
    // required string strCaptcha = 5 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strcaptcha());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgVoucherReq_V2LTCA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgVoucherReq_V2LTCA)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string strUserName = 2 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strusername());

    // required string strPwd = 3 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpwd());

    // required string strEmailAddress = 4 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stremailaddress());

    // required string strCaptcha = 5 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strcaptcha());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iNonce = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int64 tTimeStamp = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgVoucherReq_V2LTCA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgVoucherReq_V2LTCA)
  GOOGLE_DCHECK_NE(&from, this);
  const msgVoucherReq_V2LTCA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgVoucherReq_V2LTCA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgVoucherReq_V2LTCA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgVoucherReq_V2LTCA)
    MergeFrom(*source);
  }
}

void msgVoucherReq_V2LTCA::MergeFrom(const msgVoucherReq_V2LTCA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgVoucherReq_V2LTCA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strusername(from._internal_strusername());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_strpwd(from._internal_strpwd());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_stremailaddress(from._internal_stremailaddress());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_strcaptcha(from._internal_strcaptcha());
    }
    if (cached_has_bits & 0x00000010u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000020u) {
      inonce_ = from.inonce_;
    }
    if (cached_has_bits & 0x00000040u) {
      ttimestamp_ = from.ttimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgVoucherReq_V2LTCA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgVoucherReq_V2LTCA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgVoucherReq_V2LTCA::CopyFrom(const msgVoucherReq_V2LTCA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgVoucherReq_V2LTCA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgVoucherReq_V2LTCA::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void msgVoucherReq_V2LTCA::InternalSwap(msgVoucherReq_V2LTCA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strusername_.Swap(&other->strusername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strpwd_.Swap(&other->strpwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  stremailaddress_.Swap(&other->stremailaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strcaptcha_.Swap(&other->strcaptcha_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ireqtype_, other->ireqtype_);
  swap(inonce_, other->inonce_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgVoucherReq_V2LTCA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgVoucherRes_LTCA2V::InitAsDefaultInstance() {
  ::interfaces::_msgVoucherRes_LTCA2V_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgVoucherRes_LTCA2V_default_instance_._instance.get_mutable()->sterrinfo_ = const_cast< ::interfaces::msgError*>(
      ::interfaces::msgError::internal_default_instance());
  ::interfaces::_msgVoucherRes_LTCA2V_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgVoucherRes_LTCA2V::_Internal {
 public:
  using HasBits = decltype(std::declval<msgVoucherRes_LTCA2V>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgVoucherRes_LTCA2V* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_strvoucher(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::interfaces::msgError& sterrinfo(const msgVoucherRes_LTCA2V* msg);
  static void set_has_sterrinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::interfaces::msgSignature& stsign(const msgVoucherRes_LTCA2V* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000075) ^ 0x00000075) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgVoucherRes_LTCA2V::_Internal::stsigner(const msgVoucherRes_LTCA2V* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgError&
msgVoucherRes_LTCA2V::_Internal::sterrinfo(const msgVoucherRes_LTCA2V* msg) {
  return *msg->sterrinfo_;
}
const ::interfaces::msgSignature&
msgVoucherRes_LTCA2V::_Internal::stsign(const msgVoucherRes_LTCA2V* msg) {
  return *msg->stsign_;
}
msgVoucherRes_LTCA2V::msgVoucherRes_LTCA2V(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgVoucherRes_LTCA2V)
}
msgVoucherRes_LTCA2V::msgVoucherRes_LTCA2V(const msgVoucherRes_LTCA2V& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strvoucher_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strvoucher()) {
    strvoucher_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strvoucher(),
      GetArena());
  }
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_sterrinfo()) {
    sterrinfo_ = new ::interfaces::msgError(*from.sterrinfo_);
  } else {
    sterrinfo_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&ireqtype_, &from.ireqtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&ireqtype_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgVoucherRes_LTCA2V)
}

void msgVoucherRes_LTCA2V::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgVoucherRes_LTCA2V_Interfaces_2eproto.base);
  strvoucher_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stsign_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(stsign_));
  ireqtype_ = -1;
  inonce_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgVoucherRes_LTCA2V::~msgVoucherRes_LTCA2V() {
  // @@protoc_insertion_point(destructor:interfaces.msgVoucherRes_LTCA2V)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgVoucherRes_LTCA2V::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strvoucher_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete sterrinfo_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgVoucherRes_LTCA2V::ArenaDtor(void* object) {
  msgVoucherRes_LTCA2V* _this = reinterpret_cast< msgVoucherRes_LTCA2V* >(object);
  (void)_this;
}
void msgVoucherRes_LTCA2V::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgVoucherRes_LTCA2V::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgVoucherRes_LTCA2V& msgVoucherRes_LTCA2V::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgVoucherRes_LTCA2V_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgVoucherRes_LTCA2V::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgVoucherRes_LTCA2V)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      strvoucher_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(sterrinfo_ != nullptr);
      sterrinfo_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
    ireqtype_ = -1;
    inonce_ = -1;
    ttimestamp_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgVoucherRes_LTCA2V::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strVoucher = 3 [default = ""];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_strvoucher();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgVoucherRes_LTCA2V.strVoucher");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgError stErrInfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sterrinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgVoucherRes_LTCA2V::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgVoucherRes_LTCA2V)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required string strVoucher = 3 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strvoucher().data(), static_cast<int>(this->_internal_strvoucher().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgVoucherRes_LTCA2V.strVoucher");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_strvoucher(), target);
  }

  // required int32 iNonce = 4 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 5 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_ttimestamp(), target);
  }

  // required .interfaces.msgError stErrInfo = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::sterrinfo(this), target, stream);
  }

  // optional .interfaces.msgSignature stSign = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgVoucherRes_LTCA2V)
  return target;
}

size_t msgVoucherRes_LTCA2V::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgVoucherRes_LTCA2V)
  size_t total_size = 0;

  if (_internal_has_strvoucher()) {
    // required string strVoucher = 3 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strvoucher());
  }

  if (_internal_has_sterrinfo()) {
    // required .interfaces.msgError stErrInfo = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 4 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgVoucherRes_LTCA2V::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgVoucherRes_LTCA2V)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000075) ^ 0x00000075) == 0) {  // All required fields are present.
    // required string strVoucher = 3 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strvoucher());

    // required .interfaces.msgError stErrInfo = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iNonce = 4 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int64 tTimeStamp = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .interfaces.msgSignerInfo stSigner = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsigner_);
  }

  // optional .interfaces.msgSignature stSign = 7;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsign_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgVoucherRes_LTCA2V::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgVoucherRes_LTCA2V)
  GOOGLE_DCHECK_NE(&from, this);
  const msgVoucherRes_LTCA2V* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgVoucherRes_LTCA2V>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgVoucherRes_LTCA2V)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgVoucherRes_LTCA2V)
    MergeFrom(*source);
  }
}

void msgVoucherRes_LTCA2V::MergeFrom(const msgVoucherRes_LTCA2V& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgVoucherRes_LTCA2V)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strvoucher(from._internal_strvoucher());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_sterrinfo()->::interfaces::msgError::MergeFrom(from._internal_sterrinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000010u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000020u) {
      inonce_ = from.inonce_;
    }
    if (cached_has_bits & 0x00000040u) {
      ttimestamp_ = from.ttimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgVoucherRes_LTCA2V::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgVoucherRes_LTCA2V)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgVoucherRes_LTCA2V::CopyFrom(const msgVoucherRes_LTCA2V& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgVoucherRes_LTCA2V)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgVoucherRes_LTCA2V::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  if (_internal_has_sterrinfo()) {
    if (!sterrinfo_->IsInitialized()) return false;
  }
  return true;
}

void msgVoucherRes_LTCA2V::InternalSwap(msgVoucherRes_LTCA2V* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strvoucher_.Swap(&other->strvoucher_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgVoucherRes_LTCA2V, stsign_)
      + sizeof(msgVoucherRes_LTCA2V::stsign_)
      - PROTOBUF_FIELD_OFFSET(msgVoucherRes_LTCA2V, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(ireqtype_, other->ireqtype_);
  swap(inonce_, other->inonce_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgVoucherRes_LTCA2V::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgX509CertReq_V2LTCA::InitAsDefaultInstance() {
}
class msgX509CertReq_V2LTCA::_Internal {
 public:
  using HasBits = decltype(std::declval<msgX509CertReq_V2LTCA>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_iltcaidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_strproofofpossessionvoucher(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_strdnsextension(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_strkeyusage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_strextendedkeyusage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_strx509certreq(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001f3) ^ 0x000001f3) != 0;
  }
};

msgX509CertReq_V2LTCA::msgX509CertReq_V2LTCA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgX509CertReq_V2LTCA)
}
msgX509CertReq_V2LTCA::msgX509CertReq_V2LTCA(const msgX509CertReq_V2LTCA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strproofofpossessionvoucher_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strproofofpossessionvoucher()) {
    strproofofpossessionvoucher_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strproofofpossessionvoucher(),
      GetArena());
  }
  strdnsextension_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strdnsextension()) {
    strdnsextension_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strdnsextension(),
      GetArena());
  }
  strkeyusage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strkeyusage()) {
    strkeyusage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strkeyusage(),
      GetArena());
  }
  strextendedkeyusage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strextendedkeyusage()) {
    strextendedkeyusage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strextendedkeyusage(),
      GetArena());
  }
  strx509certreq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strx509certreq()) {
    strx509certreq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strx509certreq(),
      GetArena());
  }
  ::memcpy(&inonce_, &from.inonce_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&inonce_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgX509CertReq_V2LTCA)
}

void msgX509CertReq_V2LTCA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgX509CertReq_V2LTCA_Interfaces_2eproto.base);
  strproofofpossessionvoucher_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strdnsextension_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strkeyusage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strextendedkeyusage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strx509certreq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inonce_ = -1;
  ireqtype_ = -1;
  iltcaidrange_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgX509CertReq_V2LTCA::~msgX509CertReq_V2LTCA() {
  // @@protoc_insertion_point(destructor:interfaces.msgX509CertReq_V2LTCA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgX509CertReq_V2LTCA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strproofofpossessionvoucher_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strdnsextension_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strkeyusage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strextendedkeyusage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strx509certreq_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msgX509CertReq_V2LTCA::ArenaDtor(void* object) {
  msgX509CertReq_V2LTCA* _this = reinterpret_cast< msgX509CertReq_V2LTCA* >(object);
  (void)_this;
}
void msgX509CertReq_V2LTCA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgX509CertReq_V2LTCA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgX509CertReq_V2LTCA& msgX509CertReq_V2LTCA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgX509CertReq_V2LTCA_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgX509CertReq_V2LTCA::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgX509CertReq_V2LTCA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      strproofofpossessionvoucher_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      strdnsextension_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      strkeyusage_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      strextendedkeyusage_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      strx509certreq_.ClearNonDefaultToEmpty();
    }
    inonce_ = -1;
    ireqtype_ = -1;
    iltcaidrange_ = -1;
  }
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgX509CertReq_V2LTCA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iLTCAIdRange = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_iltcaidrange(&has_bits);
          iltcaidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strProofOfPossessionVoucher = 3 [default = ""];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_strproofofpossessionvoucher();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgX509CertReq_V2LTCA.strProofOfPossessionVoucher");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strDNSExtension = 4 [default = ""];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_strdnsextension();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgX509CertReq_V2LTCA.strDNSExtension");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string strKeyUsage = 5 [default = ""];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_strkeyusage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgX509CertReq_V2LTCA.strKeyUsage");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string strExtendedKeyUsage = 6 [default = ""];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_strextendedkeyusage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgX509CertReq_V2LTCA.strExtendedKeyUsage");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strX509CertReq = 7 [default = ""];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_strx509certreq();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgX509CertReq_V2LTCA.strX509CertReq");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 9 [default = -1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgX509CertReq_V2LTCA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgX509CertReq_V2LTCA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // required int32 iLTCAIdRange = 2 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_iltcaidrange(), target);
  }

  // required string strProofOfPossessionVoucher = 3 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strproofofpossessionvoucher().data(), static_cast<int>(this->_internal_strproofofpossessionvoucher().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgX509CertReq_V2LTCA.strProofOfPossessionVoucher");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_strproofofpossessionvoucher(), target);
  }

  // required string strDNSExtension = 4 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strdnsextension().data(), static_cast<int>(this->_internal_strdnsextension().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgX509CertReq_V2LTCA.strDNSExtension");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_strdnsextension(), target);
  }

  // optional string strKeyUsage = 5 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strkeyusage().data(), static_cast<int>(this->_internal_strkeyusage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgX509CertReq_V2LTCA.strKeyUsage");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_strkeyusage(), target);
  }

  // optional string strExtendedKeyUsage = 6 [default = ""];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strextendedkeyusage().data(), static_cast<int>(this->_internal_strextendedkeyusage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgX509CertReq_V2LTCA.strExtendedKeyUsage");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_strextendedkeyusage(), target);
  }

  // required string strX509CertReq = 7 [default = ""];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strx509certreq().data(), static_cast<int>(this->_internal_strx509certreq().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgX509CertReq_V2LTCA.strX509CertReq");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_strx509certreq(), target);
  }

  // required int32 iNonce = 8 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 9 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_ttimestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgX509CertReq_V2LTCA)
  return target;
}

size_t msgX509CertReq_V2LTCA::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgX509CertReq_V2LTCA)
  size_t total_size = 0;

  if (_internal_has_strproofofpossessionvoucher()) {
    // required string strProofOfPossessionVoucher = 3 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strproofofpossessionvoucher());
  }

  if (_internal_has_strdnsextension()) {
    // required string strDNSExtension = 4 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strdnsextension());
  }

  if (_internal_has_strx509certreq()) {
    // required string strX509CertReq = 7 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strx509certreq());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_iltcaidrange()) {
    // required int32 iLTCAIdRange = 2 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iltcaidrange());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 9 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgX509CertReq_V2LTCA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgX509CertReq_V2LTCA)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000001f3) ^ 0x000001f3) == 0) {  // All required fields are present.
    // required string strProofOfPossessionVoucher = 3 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strproofofpossessionvoucher());

    // required string strDNSExtension = 4 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strdnsextension());

    // required string strX509CertReq = 7 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strx509certreq());

    // required int32 iNonce = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iLTCAIdRange = 2 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iltcaidrange());

    // required int64 tTimeStamp = 9 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional string strKeyUsage = 5 [default = ""];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_strkeyusage());
    }

    // optional string strExtendedKeyUsage = 6 [default = ""];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_strextendedkeyusage());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgX509CertReq_V2LTCA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgX509CertReq_V2LTCA)
  GOOGLE_DCHECK_NE(&from, this);
  const msgX509CertReq_V2LTCA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgX509CertReq_V2LTCA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgX509CertReq_V2LTCA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgX509CertReq_V2LTCA)
    MergeFrom(*source);
  }
}

void msgX509CertReq_V2LTCA::MergeFrom(const msgX509CertReq_V2LTCA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgX509CertReq_V2LTCA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strproofofpossessionvoucher(from._internal_strproofofpossessionvoucher());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_strdnsextension(from._internal_strdnsextension());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_strkeyusage(from._internal_strkeyusage());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_strextendedkeyusage(from._internal_strextendedkeyusage());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_strx509certreq(from._internal_strx509certreq());
    }
    if (cached_has_bits & 0x00000020u) {
      inonce_ = from.inonce_;
    }
    if (cached_has_bits & 0x00000040u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000080u) {
      iltcaidrange_ = from.iltcaidrange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_ttimestamp(from._internal_ttimestamp());
  }
}

void msgX509CertReq_V2LTCA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgX509CertReq_V2LTCA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgX509CertReq_V2LTCA::CopyFrom(const msgX509CertReq_V2LTCA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgX509CertReq_V2LTCA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgX509CertReq_V2LTCA::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void msgX509CertReq_V2LTCA::InternalSwap(msgX509CertReq_V2LTCA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strproofofpossessionvoucher_.Swap(&other->strproofofpossessionvoucher_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strdnsextension_.Swap(&other->strdnsextension_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strkeyusage_.Swap(&other->strkeyusage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strextendedkeyusage_.Swap(&other->strextendedkeyusage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strx509certreq_.Swap(&other->strx509certreq_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(inonce_, other->inonce_);
  swap(ireqtype_, other->ireqtype_);
  swap(iltcaidrange_, other->iltcaidrange_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgX509CertReq_V2LTCA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgX509CertRes_LTCA2V::InitAsDefaultInstance() {
  ::interfaces::_msgX509CertRes_LTCA2V_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgX509CertRes_LTCA2V_default_instance_._instance.get_mutable()->sterrinfo_ = const_cast< ::interfaces::msgError*>(
      ::interfaces::msgError::internal_default_instance());
  ::interfaces::_msgX509CertRes_LTCA2V_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgX509CertRes_LTCA2V::_Internal {
 public:
  using HasBits = decltype(std::declval<msgX509CertRes_LTCA2V>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgX509CertRes_LTCA2V* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_strreqidentification(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_strx509cert(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::interfaces::msgError& sterrinfo(const msgX509CertRes_LTCA2V* msg);
  static void set_has_sterrinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::interfaces::msgSignature& stsign(const msgX509CertRes_LTCA2V* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000eb) ^ 0x000000eb) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgX509CertRes_LTCA2V::_Internal::stsigner(const msgX509CertRes_LTCA2V* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgError&
msgX509CertRes_LTCA2V::_Internal::sterrinfo(const msgX509CertRes_LTCA2V* msg) {
  return *msg->sterrinfo_;
}
const ::interfaces::msgSignature&
msgX509CertRes_LTCA2V::_Internal::stsign(const msgX509CertRes_LTCA2V* msg) {
  return *msg->stsign_;
}
msgX509CertRes_LTCA2V::msgX509CertRes_LTCA2V(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgX509CertRes_LTCA2V)
}
msgX509CertRes_LTCA2V::msgX509CertRes_LTCA2V(const msgX509CertRes_LTCA2V& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strreqidentification_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strreqidentification()) {
    strreqidentification_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strreqidentification(),
      GetArena());
  }
  strx509cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strx509cert()) {
    strx509cert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strx509cert(),
      GetArena());
  }
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_sterrinfo()) {
    sterrinfo_ = new ::interfaces::msgError(*from.sterrinfo_);
  } else {
    sterrinfo_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&ireqtype_, &from.ireqtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&ireqtype_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgX509CertRes_LTCA2V)
}

void msgX509CertRes_LTCA2V::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgX509CertRes_LTCA2V_Interfaces_2eproto.base);
  strreqidentification_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strx509cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stsign_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(stsign_));
  ireqtype_ = -1;
  inonce_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgX509CertRes_LTCA2V::~msgX509CertRes_LTCA2V() {
  // @@protoc_insertion_point(destructor:interfaces.msgX509CertRes_LTCA2V)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgX509CertRes_LTCA2V::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strreqidentification_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strx509cert_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete sterrinfo_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgX509CertRes_LTCA2V::ArenaDtor(void* object) {
  msgX509CertRes_LTCA2V* _this = reinterpret_cast< msgX509CertRes_LTCA2V* >(object);
  (void)_this;
}
void msgX509CertRes_LTCA2V::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgX509CertRes_LTCA2V::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgX509CertRes_LTCA2V& msgX509CertRes_LTCA2V::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgX509CertRes_LTCA2V_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgX509CertRes_LTCA2V::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgX509CertRes_LTCA2V)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      strreqidentification_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      strx509cert_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(sterrinfo_ != nullptr);
      sterrinfo_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
    ireqtype_ = -1;
    inonce_ = -1;
    ttimestamp_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgX509CertRes_LTCA2V::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strReqIdentification = 3 [default = ""];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_strreqidentification();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgX509CertRes_LTCA2V.strReqIdentification");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strX509Cert = 4 [default = ""];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_strx509cert();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgX509CertRes_LTCA2V.strX509Cert");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgError stErrInfo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_sterrinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgX509CertRes_LTCA2V::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgX509CertRes_LTCA2V)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required string strReqIdentification = 3 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strreqidentification().data(), static_cast<int>(this->_internal_strreqidentification().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgX509CertRes_LTCA2V.strReqIdentification");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_strreqidentification(), target);
  }

  // required string strX509Cert = 4 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strx509cert().data(), static_cast<int>(this->_internal_strx509cert().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgX509CertRes_LTCA2V.strX509Cert");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_strx509cert(), target);
  }

  // required int32 iNonce = 5 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 6 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_ttimestamp(), target);
  }

  // required .interfaces.msgError stErrInfo = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::sterrinfo(this), target, stream);
  }

  // optional .interfaces.msgSignature stSign = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgX509CertRes_LTCA2V)
  return target;
}

size_t msgX509CertRes_LTCA2V::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgX509CertRes_LTCA2V)
  size_t total_size = 0;

  if (_internal_has_strreqidentification()) {
    // required string strReqIdentification = 3 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strreqidentification());
  }

  if (_internal_has_strx509cert()) {
    // required string strX509Cert = 4 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strx509cert());
  }

  if (_internal_has_sterrinfo()) {
    // required .interfaces.msgError stErrInfo = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgX509CertRes_LTCA2V::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgX509CertRes_LTCA2V)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000eb) ^ 0x000000eb) == 0) {  // All required fields are present.
    // required string strReqIdentification = 3 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strreqidentification());

    // required string strX509Cert = 4 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strx509cert());

    // required .interfaces.msgError stErrInfo = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iNonce = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int64 tTimeStamp = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .interfaces.msgSignerInfo stSigner = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsigner_);
  }

  // optional .interfaces.msgSignature stSign = 8;
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsign_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgX509CertRes_LTCA2V::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgX509CertRes_LTCA2V)
  GOOGLE_DCHECK_NE(&from, this);
  const msgX509CertRes_LTCA2V* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgX509CertRes_LTCA2V>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgX509CertRes_LTCA2V)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgX509CertRes_LTCA2V)
    MergeFrom(*source);
  }
}

void msgX509CertRes_LTCA2V::MergeFrom(const msgX509CertRes_LTCA2V& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgX509CertRes_LTCA2V)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strreqidentification(from._internal_strreqidentification());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_strx509cert(from._internal_strx509cert());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_sterrinfo()->::interfaces::msgError::MergeFrom(from._internal_sterrinfo());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000020u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000040u) {
      inonce_ = from.inonce_;
    }
    if (cached_has_bits & 0x00000080u) {
      ttimestamp_ = from.ttimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgX509CertRes_LTCA2V::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgX509CertRes_LTCA2V)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgX509CertRes_LTCA2V::CopyFrom(const msgX509CertRes_LTCA2V& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgX509CertRes_LTCA2V)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgX509CertRes_LTCA2V::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  if (_internal_has_sterrinfo()) {
    if (!sterrinfo_->IsInitialized()) return false;
  }
  return true;
}

void msgX509CertRes_LTCA2V::InternalSwap(msgX509CertRes_LTCA2V* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strreqidentification_.Swap(&other->strreqidentification_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strx509cert_.Swap(&other->strx509cert_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgX509CertRes_LTCA2V, stsign_)
      + sizeof(msgX509CertRes_LTCA2V::stsign_)
      - PROTOBUF_FIELD_OFFSET(msgX509CertRes_LTCA2V, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(ireqtype_, other->ireqtype_);
  swap(inonce_, other->inonce_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgX509CertRes_LTCA2V::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgCRLType::InitAsDefaultInstance() {
}
class msgCRLType::_Internal {
 public:
};

msgCRLType::msgCRLType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgCRLType)
}
msgCRLType::msgCRLType(const msgCRLType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:interfaces.msgCRLType)
}

void msgCRLType::SharedCtor() {
}

msgCRLType::~msgCRLType() {
  // @@protoc_insertion_point(destructor:interfaces.msgCRLType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgCRLType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msgCRLType::ArenaDtor(void* object) {
  msgCRLType* _this = reinterpret_cast< msgCRLType* >(object);
  (void)_this;
}
void msgCRLType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgCRLType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgCRLType& msgCRLType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgCRLType_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgCRLType::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgCRLType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgCRLType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgCRLType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgCRLType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgCRLType)
  return target;
}

size_t msgCRLType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgCRLType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgCRLType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgCRLType)
  GOOGLE_DCHECK_NE(&from, this);
  const msgCRLType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgCRLType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgCRLType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgCRLType)
    MergeFrom(*source);
  }
}

void msgCRLType::MergeFrom(const msgCRLType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgCRLType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void msgCRLType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgCRLType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgCRLType::CopyFrom(const msgCRLType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgCRLType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgCRLType::IsInitialized() const {
  return true;
}

void msgCRLType::InternalSwap(msgCRLType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgCRLType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgTwoDLocation::InitAsDefaultInstance() {
}
class msgTwoDLocation::_Internal {
 public:
  using HasBits = decltype(std::declval<msgTwoDLocation>()._has_bits_);
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

msgTwoDLocation::msgTwoDLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgTwoDLocation)
}
msgTwoDLocation::msgTwoDLocation(const msgTwoDLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgTwoDLocation)
}

void msgTwoDLocation::SharedCtor() {
  latitude_ = -1;
  longitude_ = -1;
}

msgTwoDLocation::~msgTwoDLocation() {
  // @@protoc_insertion_point(destructor:interfaces.msgTwoDLocation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgTwoDLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msgTwoDLocation::ArenaDtor(void* object) {
  msgTwoDLocation* _this = reinterpret_cast< msgTwoDLocation* >(object);
  (void)_this;
}
void msgTwoDLocation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgTwoDLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgTwoDLocation& msgTwoDLocation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgTwoDLocation_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgTwoDLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgTwoDLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    latitude_ = -1;
    longitude_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgTwoDLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 latitude = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_latitude(&has_bits);
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 longitude = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_longitude(&has_bits);
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgTwoDLocation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgTwoDLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 latitude = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_latitude(), target);
  }

  // required int32 longitude = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_longitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgTwoDLocation)
  return target;
}

size_t msgTwoDLocation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgTwoDLocation)
  size_t total_size = 0;

  if (_internal_has_latitude()) {
    // required int32 latitude = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_latitude());
  }

  if (_internal_has_longitude()) {
    // required int32 longitude = 2 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_longitude());
  }

  return total_size;
}
size_t msgTwoDLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgTwoDLocation)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 latitude = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_latitude());

    // required int32 longitude = 2 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_longitude());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgTwoDLocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgTwoDLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const msgTwoDLocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgTwoDLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgTwoDLocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgTwoDLocation)
    MergeFrom(*source);
  }
}

void msgTwoDLocation::MergeFrom(const msgTwoDLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgTwoDLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      longitude_ = from.longitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgTwoDLocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgTwoDLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgTwoDLocation::CopyFrom(const msgTwoDLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgTwoDLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgTwoDLocation::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void msgTwoDLocation::InternalSwap(msgTwoDLocation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgTwoDLocation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgCircularRegion::InitAsDefaultInstance() {
  ::interfaces::_msgCircularRegion_default_instance_._instance.get_mutable()->stcenter_ = const_cast< ::interfaces::msgTwoDLocation*>(
      ::interfaces::msgTwoDLocation::internal_default_instance());
}
class msgCircularRegion::_Internal {
 public:
  using HasBits = decltype(std::declval<msgCircularRegion>()._has_bits_);
  static const ::interfaces::msgTwoDLocation& stcenter(const msgCircularRegion* msg);
  static void set_has_stcenter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::interfaces::msgTwoDLocation&
msgCircularRegion::_Internal::stcenter(const msgCircularRegion* msg) {
  return *msg->stcenter_;
}
msgCircularRegion::msgCircularRegion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgCircularRegion)
}
msgCircularRegion::msgCircularRegion(const msgCircularRegion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stcenter()) {
    stcenter_ = new ::interfaces::msgTwoDLocation(*from.stcenter_);
  } else {
    stcenter_ = nullptr;
  }
  radius_ = from.radius_;
  // @@protoc_insertion_point(copy_constructor:interfaces.msgCircularRegion)
}

void msgCircularRegion::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgCircularRegion_Interfaces_2eproto.base);
  ::memset(&stcenter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&stcenter_)) + sizeof(radius_));
}

msgCircularRegion::~msgCircularRegion() {
  // @@protoc_insertion_point(destructor:interfaces.msgCircularRegion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgCircularRegion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stcenter_;
}

void msgCircularRegion::ArenaDtor(void* object) {
  msgCircularRegion* _this = reinterpret_cast< msgCircularRegion* >(object);
  (void)_this;
}
void msgCircularRegion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgCircularRegion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgCircularRegion& msgCircularRegion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgCircularRegion_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgCircularRegion::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgCircularRegion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(stcenter_ != nullptr);
    stcenter_->Clear();
  }
  radius_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgCircularRegion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .interfaces.msgTwoDLocation stCenter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stcenter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 radius = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_radius(&has_bits);
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgCircularRegion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgCircularRegion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .interfaces.msgTwoDLocation stCenter = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stcenter(this), target, stream);
  }

  // required uint32 radius = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgCircularRegion)
  return target;
}

size_t msgCircularRegion::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgCircularRegion)
  size_t total_size = 0;

  if (_internal_has_stcenter()) {
    // required .interfaces.msgTwoDLocation stCenter = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stcenter_);
  }

  if (_internal_has_radius()) {
    // required uint32 radius = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_radius());
  }

  return total_size;
}
size_t msgCircularRegion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgCircularRegion)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .interfaces.msgTwoDLocation stCenter = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stcenter_);

    // required uint32 radius = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_radius());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgCircularRegion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgCircularRegion)
  GOOGLE_DCHECK_NE(&from, this);
  const msgCircularRegion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgCircularRegion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgCircularRegion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgCircularRegion)
    MergeFrom(*source);
  }
}

void msgCircularRegion::MergeFrom(const msgCircularRegion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgCircularRegion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stcenter()->::interfaces::msgTwoDLocation::MergeFrom(from._internal_stcenter());
    }
    if (cached_has_bits & 0x00000002u) {
      radius_ = from.radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgCircularRegion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgCircularRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgCircularRegion::CopyFrom(const msgCircularRegion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgCircularRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgCircularRegion::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stcenter()) {
    if (!stcenter_->IsInitialized()) return false;
  }
  return true;
}

void msgCircularRegion::InternalSwap(msgCircularRegion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgCircularRegion, radius_)
      + sizeof(msgCircularRegion::radius_)
      - PROTOBUF_FIELD_OFFSET(msgCircularRegion, stcenter_)>(
          reinterpret_cast<char*>(&stcenter_),
          reinterpret_cast<char*>(&other->stcenter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata msgCircularRegion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgRectangularRegion::InitAsDefaultInstance() {
  ::interfaces::_msgRectangularRegion_default_instance_._instance.get_mutable()->stupperleft_ = const_cast< ::interfaces::msgTwoDLocation*>(
      ::interfaces::msgTwoDLocation::internal_default_instance());
  ::interfaces::_msgRectangularRegion_default_instance_._instance.get_mutable()->stlowerright_ = const_cast< ::interfaces::msgTwoDLocation*>(
      ::interfaces::msgTwoDLocation::internal_default_instance());
}
class msgRectangularRegion::_Internal {
 public:
  using HasBits = decltype(std::declval<msgRectangularRegion>()._has_bits_);
  static const ::interfaces::msgTwoDLocation& stupperleft(const msgRectangularRegion* msg);
  static void set_has_stupperleft(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::interfaces::msgTwoDLocation& stlowerright(const msgRectangularRegion* msg);
  static void set_has_stlowerright(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::interfaces::msgTwoDLocation&
msgRectangularRegion::_Internal::stupperleft(const msgRectangularRegion* msg) {
  return *msg->stupperleft_;
}
const ::interfaces::msgTwoDLocation&
msgRectangularRegion::_Internal::stlowerright(const msgRectangularRegion* msg) {
  return *msg->stlowerright_;
}
msgRectangularRegion::msgRectangularRegion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgRectangularRegion)
}
msgRectangularRegion::msgRectangularRegion(const msgRectangularRegion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stupperleft()) {
    stupperleft_ = new ::interfaces::msgTwoDLocation(*from.stupperleft_);
  } else {
    stupperleft_ = nullptr;
  }
  if (from._internal_has_stlowerright()) {
    stlowerright_ = new ::interfaces::msgTwoDLocation(*from.stlowerright_);
  } else {
    stlowerright_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:interfaces.msgRectangularRegion)
}

void msgRectangularRegion::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgRectangularRegion_Interfaces_2eproto.base);
  ::memset(&stupperleft_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stlowerright_) -
      reinterpret_cast<char*>(&stupperleft_)) + sizeof(stlowerright_));
}

msgRectangularRegion::~msgRectangularRegion() {
  // @@protoc_insertion_point(destructor:interfaces.msgRectangularRegion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgRectangularRegion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stupperleft_;
  if (this != internal_default_instance()) delete stlowerright_;
}

void msgRectangularRegion::ArenaDtor(void* object) {
  msgRectangularRegion* _this = reinterpret_cast< msgRectangularRegion* >(object);
  (void)_this;
}
void msgRectangularRegion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgRectangularRegion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgRectangularRegion& msgRectangularRegion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgRectangularRegion_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgRectangularRegion::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgRectangularRegion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stupperleft_ != nullptr);
      stupperleft_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stlowerright_ != nullptr);
      stlowerright_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgRectangularRegion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .interfaces.msgTwoDLocation stUpperLeft = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stupperleft(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgTwoDLocation stLowerRight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stlowerright(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgRectangularRegion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgRectangularRegion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .interfaces.msgTwoDLocation stUpperLeft = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stupperleft(this), target, stream);
  }

  // required .interfaces.msgTwoDLocation stLowerRight = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stlowerright(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgRectangularRegion)
  return target;
}

size_t msgRectangularRegion::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgRectangularRegion)
  size_t total_size = 0;

  if (_internal_has_stupperleft()) {
    // required .interfaces.msgTwoDLocation stUpperLeft = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stupperleft_);
  }

  if (_internal_has_stlowerright()) {
    // required .interfaces.msgTwoDLocation stLowerRight = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stlowerright_);
  }

  return total_size;
}
size_t msgRectangularRegion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgRectangularRegion)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .interfaces.msgTwoDLocation stUpperLeft = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stupperleft_);

    // required .interfaces.msgTwoDLocation stLowerRight = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stlowerright_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgRectangularRegion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgRectangularRegion)
  GOOGLE_DCHECK_NE(&from, this);
  const msgRectangularRegion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgRectangularRegion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgRectangularRegion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgRectangularRegion)
    MergeFrom(*source);
  }
}

void msgRectangularRegion::MergeFrom(const msgRectangularRegion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgRectangularRegion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stupperleft()->::interfaces::msgTwoDLocation::MergeFrom(from._internal_stupperleft());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stlowerright()->::interfaces::msgTwoDLocation::MergeFrom(from._internal_stlowerright());
    }
  }
}

void msgRectangularRegion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgRectangularRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgRectangularRegion::CopyFrom(const msgRectangularRegion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgRectangularRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgRectangularRegion::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stupperleft()) {
    if (!stupperleft_->IsInitialized()) return false;
  }
  if (_internal_has_stlowerright()) {
    if (!stlowerright_->IsInitialized()) return false;
  }
  return true;
}

void msgRectangularRegion::InternalSwap(msgRectangularRegion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgRectangularRegion, stlowerright_)
      + sizeof(msgRectangularRegion::stlowerright_)
      - PROTOBUF_FIELD_OFFSET(msgRectangularRegion, stupperleft_)>(
          reinterpret_cast<char*>(&stupperleft_),
          reinterpret_cast<char*>(&other->stupperleft_));
}

::PROTOBUF_NAMESPACE_ID::Metadata msgRectangularRegion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgApplicationID::InitAsDefaultInstance() {
}
class msgApplicationID::_Internal {
 public:
  using HasBits = decltype(std::declval<msgApplicationID>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_acid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_acm(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

msgApplicationID::msgApplicationID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgApplicationID)
}
msgApplicationID::msgApplicationID(const msgApplicationID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&acm_) -
    reinterpret_cast<char*>(&type_)) + sizeof(acm_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgApplicationID)
}

void msgApplicationID::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acm_) -
      reinterpret_cast<char*>(&type_)) + sizeof(acm_));
}

msgApplicationID::~msgApplicationID() {
  // @@protoc_insertion_point(destructor:interfaces.msgApplicationID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgApplicationID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msgApplicationID::ArenaDtor(void* object) {
  msgApplicationID* _this = reinterpret_cast< msgApplicationID* >(object);
  (void)_this;
}
void msgApplicationID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgApplicationID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgApplicationID& msgApplicationID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgApplicationID_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgApplicationID::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgApplicationID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&acm_) -
        reinterpret_cast<char*>(&type_)) + sizeof(acm_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgApplicationID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .interfaces.msgAIDType.AIDType type = 1 [default = fullySpecified];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::interfaces::msgAIDType_AIDType_IsValid(val))) {
            _internal_set_type(static_cast<::interfaces::msgAIDType_AIDType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint32 acid = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_acid(&has_bits);
          acid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 acm = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_acm(&has_bits);
          acm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgApplicationID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgApplicationID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .interfaces.msgAIDType.AIDType type = 1 [default = fullySpecified];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required uint32 acid = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_acid(), target);
  }

  // required uint32 acm = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_acm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgApplicationID)
  return target;
}

size_t msgApplicationID::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgApplicationID)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required .interfaces.msgAIDType.AIDType type = 1 [default = fullySpecified];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (_internal_has_acid()) {
    // required uint32 acid = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_acid());
  }

  if (_internal_has_acm()) {
    // required uint32 acm = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_acm());
  }

  return total_size;
}
size_t msgApplicationID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgApplicationID)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .interfaces.msgAIDType.AIDType type = 1 [default = fullySpecified];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

    // required uint32 acid = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_acid());

    // required uint32 acm = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_acm());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgApplicationID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgApplicationID)
  GOOGLE_DCHECK_NE(&from, this);
  const msgApplicationID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgApplicationID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgApplicationID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgApplicationID)
    MergeFrom(*source);
  }
}

void msgApplicationID::MergeFrom(const msgApplicationID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgApplicationID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      acid_ = from.acid_;
    }
    if (cached_has_bits & 0x00000004u) {
      acm_ = from.acm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgApplicationID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgApplicationID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgApplicationID::CopyFrom(const msgApplicationID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgApplicationID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgApplicationID::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void msgApplicationID::InternalSwap(msgApplicationID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgApplicationID, acm_)
      + sizeof(msgApplicationID::acm_)
      - PROTOBUF_FIELD_OFFSET(msgApplicationID, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata msgApplicationID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgOBUIdentifiedScope::InitAsDefaultInstance() {
  ::interfaces::_msgOBUIdentifiedScope_default_instance_._instance.get_mutable()->stappid_ = const_cast< ::interfaces::msgApplicationID*>(
      ::interfaces::msgApplicationID::internal_default_instance());
}
class msgOBUIdentifiedScope::_Internal {
 public:
  using HasBits = decltype(std::declval<msgOBUIdentifiedScope>()._has_bits_);
  static void set_has_certspecificdata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::interfaces::msgApplicationID& stappid(const msgOBUIdentifiedScope* msg);
  static void set_has_stappid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::interfaces::msgApplicationID&
msgOBUIdentifiedScope::_Internal::stappid(const msgOBUIdentifiedScope* msg) {
  return *msg->stappid_;
}
msgOBUIdentifiedScope::msgOBUIdentifiedScope(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgOBUIdentifiedScope)
}
msgOBUIdentifiedScope::msgOBUIdentifiedScope(const msgOBUIdentifiedScope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stappid()) {
    stappid_ = new ::interfaces::msgApplicationID(*from.stappid_);
  } else {
    stappid_ = nullptr;
  }
  certspecificdata_ = from.certspecificdata_;
  // @@protoc_insertion_point(copy_constructor:interfaces.msgOBUIdentifiedScope)
}

void msgOBUIdentifiedScope::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgOBUIdentifiedScope_Interfaces_2eproto.base);
  ::memset(&stappid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&certspecificdata_) -
      reinterpret_cast<char*>(&stappid_)) + sizeof(certspecificdata_));
}

msgOBUIdentifiedScope::~msgOBUIdentifiedScope() {
  // @@protoc_insertion_point(destructor:interfaces.msgOBUIdentifiedScope)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgOBUIdentifiedScope::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stappid_;
}

void msgOBUIdentifiedScope::ArenaDtor(void* object) {
  msgOBUIdentifiedScope* _this = reinterpret_cast< msgOBUIdentifiedScope* >(object);
  (void)_this;
}
void msgOBUIdentifiedScope::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgOBUIdentifiedScope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgOBUIdentifiedScope& msgOBUIdentifiedScope::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgOBUIdentifiedScope_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgOBUIdentifiedScope::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgOBUIdentifiedScope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(stappid_ != nullptr);
    stappid_->Clear();
  }
  certspecificdata_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgOBUIdentifiedScope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 certSpecificData = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_certspecificdata(&has_bits);
          certspecificdata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgApplicationID stAppID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stappid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgOBUIdentifiedScope::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgOBUIdentifiedScope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 certSpecificData = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_certspecificdata(), target);
  }

  // required .interfaces.msgApplicationID stAppID = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stappid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgOBUIdentifiedScope)
  return target;
}

size_t msgOBUIdentifiedScope::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgOBUIdentifiedScope)
  size_t total_size = 0;

  if (_internal_has_stappid()) {
    // required .interfaces.msgApplicationID stAppID = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stappid_);
  }

  if (_internal_has_certspecificdata()) {
    // required uint32 certSpecificData = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_certspecificdata());
  }

  return total_size;
}
size_t msgOBUIdentifiedScope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgOBUIdentifiedScope)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .interfaces.msgApplicationID stAppID = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stappid_);

    // required uint32 certSpecificData = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_certspecificdata());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgOBUIdentifiedScope::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgOBUIdentifiedScope)
  GOOGLE_DCHECK_NE(&from, this);
  const msgOBUIdentifiedScope* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgOBUIdentifiedScope>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgOBUIdentifiedScope)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgOBUIdentifiedScope)
    MergeFrom(*source);
  }
}

void msgOBUIdentifiedScope::MergeFrom(const msgOBUIdentifiedScope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgOBUIdentifiedScope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stappid()->::interfaces::msgApplicationID::MergeFrom(from._internal_stappid());
    }
    if (cached_has_bits & 0x00000002u) {
      certspecificdata_ = from.certspecificdata_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgOBUIdentifiedScope::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgOBUIdentifiedScope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgOBUIdentifiedScope::CopyFrom(const msgOBUIdentifiedScope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgOBUIdentifiedScope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgOBUIdentifiedScope::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stappid()) {
    if (!stappid_->IsInitialized()) return false;
  }
  return true;
}

void msgOBUIdentifiedScope::InternalSwap(msgOBUIdentifiedScope* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgOBUIdentifiedScope, certspecificdata_)
      + sizeof(msgOBUIdentifiedScope::certspecificdata_)
      - PROTOBUF_FIELD_OFFSET(msgOBUIdentifiedScope, stappid_)>(
          reinterpret_cast<char*>(&stappid_),
          reinterpret_cast<char*>(&other->stappid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata msgOBUIdentifiedScope::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgGeographicRegion::InitAsDefaultInstance() {
}
class msgGeographicRegion::_Internal {
 public:
  using HasBits = decltype(std::declval<msgGeographicRegion>()._has_bits_);
  static void set_has_regiontype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

msgGeographicRegion::msgGeographicRegion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgGeographicRegion)
}
msgGeographicRegion::msgGeographicRegion(const msgGeographicRegion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  regiontype_ = from.regiontype_;
  // @@protoc_insertion_point(copy_constructor:interfaces.msgGeographicRegion)
}

void msgGeographicRegion::SharedCtor() {
  regiontype_ = 4;
}

msgGeographicRegion::~msgGeographicRegion() {
  // @@protoc_insertion_point(destructor:interfaces.msgGeographicRegion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgGeographicRegion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msgGeographicRegion::ArenaDtor(void* object) {
  msgGeographicRegion* _this = reinterpret_cast< msgGeographicRegion* >(object);
  (void)_this;
}
void msgGeographicRegion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgGeographicRegion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgGeographicRegion& msgGeographicRegion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgGeographicRegion_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgGeographicRegion::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgGeographicRegion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  regiontype_ = 4;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgGeographicRegion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .interfaces.msgRegionType.RegionType regionType = 1 [default = none];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::interfaces::msgRegionType_RegionType_IsValid(val))) {
            _internal_set_regiontype(static_cast<::interfaces::msgRegionType_RegionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgGeographicRegion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgGeographicRegion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .interfaces.msgRegionType.RegionType regionType = 1 [default = none];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_regiontype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgGeographicRegion)
  return target;
}

size_t msgGeographicRegion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgGeographicRegion)
  size_t total_size = 0;

  // required .interfaces.msgRegionType.RegionType regionType = 1 [default = none];
  if (_internal_has_regiontype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_regiontype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgGeographicRegion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgGeographicRegion)
  GOOGLE_DCHECK_NE(&from, this);
  const msgGeographicRegion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgGeographicRegion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgGeographicRegion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgGeographicRegion)
    MergeFrom(*source);
  }
}

void msgGeographicRegion::MergeFrom(const msgGeographicRegion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgGeographicRegion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_regiontype()) {
    _internal_set_regiontype(from._internal_regiontype());
  }
}

void msgGeographicRegion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgGeographicRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgGeographicRegion::CopyFrom(const msgGeographicRegion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgGeographicRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgGeographicRegion::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void msgGeographicRegion::InternalSwap(msgGeographicRegion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(regiontype_, other->regiontype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgGeographicRegion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgIdentifiedScope::InitAsDefaultInstance() {
  ::interfaces::_msgIdentifiedScope_default_instance_._instance.get_mutable()->stappid_ = const_cast< ::interfaces::msgApplicationID*>(
      ::interfaces::msgApplicationID::internal_default_instance());
  ::interfaces::_msgIdentifiedScope_default_instance_._instance.get_mutable()->stgeoregion_ = const_cast< ::interfaces::msgGeographicRegion*>(
      ::interfaces::msgGeographicRegion::internal_default_instance());
}
class msgIdentifiedScope::_Internal {
 public:
  using HasBits = decltype(std::declval<msgIdentifiedScope>()._has_bits_);
  static void set_has_subjectname(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::interfaces::msgApplicationID& stappid(const msgIdentifiedScope* msg);
  static void set_has_stappid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::interfaces::msgGeographicRegion& stgeoregion(const msgIdentifiedScope* msg);
  static void set_has_stgeoregion(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::interfaces::msgApplicationID&
msgIdentifiedScope::_Internal::stappid(const msgIdentifiedScope* msg) {
  return *msg->stappid_;
}
const ::interfaces::msgGeographicRegion&
msgIdentifiedScope::_Internal::stgeoregion(const msgIdentifiedScope* msg) {
  return *msg->stgeoregion_;
}
msgIdentifiedScope::msgIdentifiedScope(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgIdentifiedScope)
}
msgIdentifiedScope::msgIdentifiedScope(const msgIdentifiedScope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stappid()) {
    stappid_ = new ::interfaces::msgApplicationID(*from.stappid_);
  } else {
    stappid_ = nullptr;
  }
  if (from._internal_has_stgeoregion()) {
    stgeoregion_ = new ::interfaces::msgGeographicRegion(*from.stgeoregion_);
  } else {
    stgeoregion_ = nullptr;
  }
  subjectname_ = from.subjectname_;
  // @@protoc_insertion_point(copy_constructor:interfaces.msgIdentifiedScope)
}

void msgIdentifiedScope::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgIdentifiedScope_Interfaces_2eproto.base);
  ::memset(&stappid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subjectname_) -
      reinterpret_cast<char*>(&stappid_)) + sizeof(subjectname_));
}

msgIdentifiedScope::~msgIdentifiedScope() {
  // @@protoc_insertion_point(destructor:interfaces.msgIdentifiedScope)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgIdentifiedScope::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stappid_;
  if (this != internal_default_instance()) delete stgeoregion_;
}

void msgIdentifiedScope::ArenaDtor(void* object) {
  msgIdentifiedScope* _this = reinterpret_cast< msgIdentifiedScope* >(object);
  (void)_this;
}
void msgIdentifiedScope::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgIdentifiedScope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgIdentifiedScope& msgIdentifiedScope::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgIdentifiedScope_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgIdentifiedScope::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgIdentifiedScope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stappid_ != nullptr);
      stappid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stgeoregion_ != nullptr);
      stgeoregion_->Clear();
    }
  }
  subjectname_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgIdentifiedScope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 subjectName = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_subjectname(&has_bits);
          subjectname_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgApplicationID stAppID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stappid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgGeographicRegion stGeoRegion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stgeoregion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgIdentifiedScope::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgIdentifiedScope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 subjectName = 1 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_subjectname(), target);
  }

  // required .interfaces.msgApplicationID stAppID = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stappid(this), target, stream);
  }

  // required .interfaces.msgGeographicRegion stGeoRegion = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::stgeoregion(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgIdentifiedScope)
  return target;
}

size_t msgIdentifiedScope::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgIdentifiedScope)
  size_t total_size = 0;

  if (_internal_has_stappid()) {
    // required .interfaces.msgApplicationID stAppID = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stappid_);
  }

  if (_internal_has_stgeoregion()) {
    // required .interfaces.msgGeographicRegion stGeoRegion = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stgeoregion_);
  }

  if (_internal_has_subjectname()) {
    // required uint32 subjectName = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_subjectname());
  }

  return total_size;
}
size_t msgIdentifiedScope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgIdentifiedScope)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .interfaces.msgApplicationID stAppID = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stappid_);

    // required .interfaces.msgGeographicRegion stGeoRegion = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stgeoregion_);

    // required uint32 subjectName = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_subjectname());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgIdentifiedScope::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgIdentifiedScope)
  GOOGLE_DCHECK_NE(&from, this);
  const msgIdentifiedScope* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgIdentifiedScope>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgIdentifiedScope)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgIdentifiedScope)
    MergeFrom(*source);
  }
}

void msgIdentifiedScope::MergeFrom(const msgIdentifiedScope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgIdentifiedScope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stappid()->::interfaces::msgApplicationID::MergeFrom(from._internal_stappid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stgeoregion()->::interfaces::msgGeographicRegion::MergeFrom(from._internal_stgeoregion());
    }
    if (cached_has_bits & 0x00000004u) {
      subjectname_ = from.subjectname_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgIdentifiedScope::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgIdentifiedScope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgIdentifiedScope::CopyFrom(const msgIdentifiedScope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgIdentifiedScope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgIdentifiedScope::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stappid()) {
    if (!stappid_->IsInitialized()) return false;
  }
  if (_internal_has_stgeoregion()) {
    if (!stgeoregion_->IsInitialized()) return false;
  }
  return true;
}

void msgIdentifiedScope::InternalSwap(msgIdentifiedScope* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgIdentifiedScope, subjectname_)
      + sizeof(msgIdentifiedScope::subjectname_)
      - PROTOBUF_FIELD_OFFSET(msgIdentifiedScope, stappid_)>(
          reinterpret_cast<char*>(&stappid_),
          reinterpret_cast<char*>(&other->stappid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata msgIdentifiedScope::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgAppIDAndPriority::InitAsDefaultInstance() {
}
class msgAppIDAndPriority::_Internal {
 public:
  using HasBits = decltype(std::declval<msgAppIDAndPriority>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_acid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_acm(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_maxpriority(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

msgAppIDAndPriority::msgAppIDAndPriority(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgAppIDAndPriority)
}
msgAppIDAndPriority::msgAppIDAndPriority(const msgAppIDAndPriority& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxpriority_) -
    reinterpret_cast<char*>(&type_)) + sizeof(maxpriority_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgAppIDAndPriority)
}

void msgAppIDAndPriority::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxpriority_) -
      reinterpret_cast<char*>(&type_)) + sizeof(maxpriority_));
}

msgAppIDAndPriority::~msgAppIDAndPriority() {
  // @@protoc_insertion_point(destructor:interfaces.msgAppIDAndPriority)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgAppIDAndPriority::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msgAppIDAndPriority::ArenaDtor(void* object) {
  msgAppIDAndPriority* _this = reinterpret_cast< msgAppIDAndPriority* >(object);
  (void)_this;
}
void msgAppIDAndPriority::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgAppIDAndPriority::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgAppIDAndPriority& msgAppIDAndPriority::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgAppIDAndPriority_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgAppIDAndPriority::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgAppIDAndPriority)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maxpriority_) -
        reinterpret_cast<char*>(&type_)) + sizeof(maxpriority_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgAppIDAndPriority::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .interfaces.msgAIDType.AIDType type = 1 [default = fullySpecified];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::interfaces::msgAIDType_AIDType_IsValid(val))) {
            _internal_set_type(static_cast<::interfaces::msgAIDType_AIDType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint32 acid = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_acid(&has_bits);
          acid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 acm = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_acm(&has_bits);
          acm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 maxPriority = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_maxpriority(&has_bits);
          maxpriority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgAppIDAndPriority::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgAppIDAndPriority)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .interfaces.msgAIDType.AIDType type = 1 [default = fullySpecified];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required uint32 acid = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_acid(), target);
  }

  // required uint32 acm = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_acm(), target);
  }

  // required uint32 maxPriority = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_maxpriority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgAppIDAndPriority)
  return target;
}

size_t msgAppIDAndPriority::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgAppIDAndPriority)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required .interfaces.msgAIDType.AIDType type = 1 [default = fullySpecified];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (_internal_has_acid()) {
    // required uint32 acid = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_acid());
  }

  if (_internal_has_acm()) {
    // required uint32 acm = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_acm());
  }

  if (_internal_has_maxpriority()) {
    // required uint32 maxPriority = 4 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxpriority());
  }

  return total_size;
}
size_t msgAppIDAndPriority::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgAppIDAndPriority)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .interfaces.msgAIDType.AIDType type = 1 [default = fullySpecified];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

    // required uint32 acid = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_acid());

    // required uint32 acm = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_acm());

    // required uint32 maxPriority = 4 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxpriority());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgAppIDAndPriority::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgAppIDAndPriority)
  GOOGLE_DCHECK_NE(&from, this);
  const msgAppIDAndPriority* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgAppIDAndPriority>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgAppIDAndPriority)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgAppIDAndPriority)
    MergeFrom(*source);
  }
}

void msgAppIDAndPriority::MergeFrom(const msgAppIDAndPriority& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgAppIDAndPriority)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      acid_ = from.acid_;
    }
    if (cached_has_bits & 0x00000004u) {
      acm_ = from.acm_;
    }
    if (cached_has_bits & 0x00000008u) {
      maxpriority_ = from.maxpriority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgAppIDAndPriority::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgAppIDAndPriority)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgAppIDAndPriority::CopyFrom(const msgAppIDAndPriority& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgAppIDAndPriority)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgAppIDAndPriority::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void msgAppIDAndPriority::InternalSwap(msgAppIDAndPriority* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgAppIDAndPriority, maxpriority_)
      + sizeof(msgAppIDAndPriority::maxpriority_)
      - PROTOBUF_FIELD_OFFSET(msgAppIDAndPriority, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata msgAppIDAndPriority::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgCAScope::InitAsDefaultInstance() {
  ::interfaces::_msgCAScope_default_instance_._instance.get_mutable()->stappid_ = const_cast< ::interfaces::msgApplicationID*>(
      ::interfaces::msgApplicationID::internal_default_instance());
  ::interfaces::_msgCAScope_default_instance_._instance.get_mutable()->stappsandpriorities_ = const_cast< ::interfaces::msgAppIDAndPriority*>(
      ::interfaces::msgAppIDAndPriority::internal_default_instance());
  ::interfaces::_msgCAScope_default_instance_._instance.get_mutable()->stgeoregion_ = const_cast< ::interfaces::msgGeographicRegion*>(
      ::interfaces::msgGeographicRegion::internal_default_instance());
}
class msgCAScope::_Internal {
 public:
  using HasBits = decltype(std::declval<msgCAScope>()._has_bits_);
  static void set_has_tf(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::interfaces::msgApplicationID& stappid(const msgCAScope* msg);
  static void set_has_stappid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::interfaces::msgAppIDAndPriority& stappsandpriorities(const msgCAScope* msg);
  static void set_has_stappsandpriorities(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::interfaces::msgGeographicRegion& stgeoregion(const msgCAScope* msg);
  static void set_has_stgeoregion(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::interfaces::msgApplicationID&
msgCAScope::_Internal::stappid(const msgCAScope* msg) {
  return *msg->stappid_;
}
const ::interfaces::msgAppIDAndPriority&
msgCAScope::_Internal::stappsandpriorities(const msgCAScope* msg) {
  return *msg->stappsandpriorities_;
}
const ::interfaces::msgGeographicRegion&
msgCAScope::_Internal::stgeoregion(const msgCAScope* msg) {
  return *msg->stgeoregion_;
}
msgCAScope::msgCAScope(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgCAScope)
}
msgCAScope::msgCAScope(const msgCAScope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stappid()) {
    stappid_ = new ::interfaces::msgApplicationID(*from.stappid_);
  } else {
    stappid_ = nullptr;
  }
  if (from._internal_has_stappsandpriorities()) {
    stappsandpriorities_ = new ::interfaces::msgAppIDAndPriority(*from.stappsandpriorities_);
  } else {
    stappsandpriorities_ = nullptr;
  }
  if (from._internal_has_stgeoregion()) {
    stgeoregion_ = new ::interfaces::msgGeographicRegion(*from.stgeoregion_);
  } else {
    stgeoregion_ = nullptr;
  }
  tf_ = from.tf_;
  // @@protoc_insertion_point(copy_constructor:interfaces.msgCAScope)
}

void msgCAScope::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgCAScope_Interfaces_2eproto.base);
  ::memset(&stappid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tf_) -
      reinterpret_cast<char*>(&stappid_)) + sizeof(tf_));
}

msgCAScope::~msgCAScope() {
  // @@protoc_insertion_point(destructor:interfaces.msgCAScope)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgCAScope::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stappid_;
  if (this != internal_default_instance()) delete stappsandpriorities_;
  if (this != internal_default_instance()) delete stgeoregion_;
}

void msgCAScope::ArenaDtor(void* object) {
  msgCAScope* _this = reinterpret_cast< msgCAScope* >(object);
  (void)_this;
}
void msgCAScope::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgCAScope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgCAScope& msgCAScope::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgCAScope_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgCAScope::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgCAScope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stappid_ != nullptr);
      stappid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stappsandpriorities_ != nullptr);
      stappsandpriorities_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stgeoregion_ != nullptr);
      stgeoregion_->Clear();
    }
  }
  tf_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgCAScope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .interfaces.msgSubTypeFlags.SubjectTypeFlags TF = 1 [default = wsa_ca];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::interfaces::msgSubTypeFlags_SubjectTypeFlags_IsValid(val))) {
            _internal_set_tf(static_cast<::interfaces::msgSubTypeFlags_SubjectTypeFlags>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgApplicationID stAppID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stappid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgAppIDAndPriority stAppsAndPriorities = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stappsandpriorities(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgGeographicRegion stGeoRegion = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stgeoregion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgCAScope::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgCAScope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .interfaces.msgSubTypeFlags.SubjectTypeFlags TF = 1 [default = wsa_ca];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_tf(), target);
  }

  // required .interfaces.msgApplicationID stAppID = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stappid(this), target, stream);
  }

  // required .interfaces.msgAppIDAndPriority stAppsAndPriorities = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::stappsandpriorities(this), target, stream);
  }

  // required .interfaces.msgGeographicRegion stGeoRegion = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::stgeoregion(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgCAScope)
  return target;
}

size_t msgCAScope::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgCAScope)
  size_t total_size = 0;

  if (_internal_has_stappid()) {
    // required .interfaces.msgApplicationID stAppID = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stappid_);
  }

  if (_internal_has_stappsandpriorities()) {
    // required .interfaces.msgAppIDAndPriority stAppsAndPriorities = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stappsandpriorities_);
  }

  if (_internal_has_stgeoregion()) {
    // required .interfaces.msgGeographicRegion stGeoRegion = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stgeoregion_);
  }

  if (_internal_has_tf()) {
    // required .interfaces.msgSubTypeFlags.SubjectTypeFlags TF = 1 [default = wsa_ca];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tf());
  }

  return total_size;
}
size_t msgCAScope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgCAScope)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .interfaces.msgApplicationID stAppID = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stappid_);

    // required .interfaces.msgAppIDAndPriority stAppsAndPriorities = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stappsandpriorities_);

    // required .interfaces.msgGeographicRegion stGeoRegion = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stgeoregion_);

    // required .interfaces.msgSubTypeFlags.SubjectTypeFlags TF = 1 [default = wsa_ca];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tf());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgCAScope::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgCAScope)
  GOOGLE_DCHECK_NE(&from, this);
  const msgCAScope* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgCAScope>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgCAScope)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgCAScope)
    MergeFrom(*source);
  }
}

void msgCAScope::MergeFrom(const msgCAScope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgCAScope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stappid()->::interfaces::msgApplicationID::MergeFrom(from._internal_stappid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stappsandpriorities()->::interfaces::msgAppIDAndPriority::MergeFrom(from._internal_stappsandpriorities());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stgeoregion()->::interfaces::msgGeographicRegion::MergeFrom(from._internal_stgeoregion());
    }
    if (cached_has_bits & 0x00000008u) {
      tf_ = from.tf_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgCAScope::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgCAScope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgCAScope::CopyFrom(const msgCAScope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgCAScope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgCAScope::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stappid()) {
    if (!stappid_->IsInitialized()) return false;
  }
  if (_internal_has_stappsandpriorities()) {
    if (!stappsandpriorities_->IsInitialized()) return false;
  }
  if (_internal_has_stgeoregion()) {
    if (!stgeoregion_->IsInitialized()) return false;
  }
  return true;
}

void msgCAScope::InternalSwap(msgCAScope* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgCAScope, tf_)
      + sizeof(msgCAScope::tf_)
      - PROTOBUF_FIELD_OFFSET(msgCAScope, stappid_)>(
          reinterpret_cast<char*>(&stappid_),
          reinterpret_cast<char*>(&other->stappid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata msgCAScope::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgCertSpecificData::InitAsDefaultInstance() {
  ::interfaces::_msgCertSpecificData_default_instance_._instance.get_mutable()->scopeca_ = const_cast< ::interfaces::msgCAScope*>(
      ::interfaces::msgCAScope::internal_default_instance());
  ::interfaces::_msgCertSpecificData_default_instance_._instance.get_mutable()->scopeid_ = const_cast< ::interfaces::msgIdentifiedScope*>(
      ::interfaces::msgIdentifiedScope::internal_default_instance());
  ::interfaces::_msgCertSpecificData_default_instance_._instance.get_mutable()->scopeobu_ = const_cast< ::interfaces::msgOBUIdentifiedScope*>(
      ::interfaces::msgOBUIdentifiedScope::internal_default_instance());
}
class msgCertSpecificData::_Internal {
 public:
  using HasBits = decltype(std::declval<msgCertSpecificData>()._has_bits_);
  static void set_has_subjecttype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::interfaces::msgCAScope& scopeca(const msgCertSpecificData* msg);
  static void set_has_scopeca(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_responsiblecrlseries(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_wsascope(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::interfaces::msgIdentifiedScope& scopeid(const msgCertSpecificData* msg);
  static void set_has_scopeid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::interfaces::msgOBUIdentifiedScope& scopeobu(const msgCertSpecificData* msg);
  static void set_has_scopeobu(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

const ::interfaces::msgCAScope&
msgCertSpecificData::_Internal::scopeca(const msgCertSpecificData* msg) {
  return *msg->scopeca_;
}
const ::interfaces::msgIdentifiedScope&
msgCertSpecificData::_Internal::scopeid(const msgCertSpecificData* msg) {
  return *msg->scopeid_;
}
const ::interfaces::msgOBUIdentifiedScope&
msgCertSpecificData::_Internal::scopeobu(const msgCertSpecificData* msg) {
  return *msg->scopeobu_;
}
msgCertSpecificData::msgCertSpecificData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgCertSpecificData)
}
msgCertSpecificData::msgCertSpecificData(const msgCertSpecificData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scopeca()) {
    scopeca_ = new ::interfaces::msgCAScope(*from.scopeca_);
  } else {
    scopeca_ = nullptr;
  }
  if (from._internal_has_scopeid()) {
    scopeid_ = new ::interfaces::msgIdentifiedScope(*from.scopeid_);
  } else {
    scopeid_ = nullptr;
  }
  if (from._internal_has_scopeobu()) {
    scopeobu_ = new ::interfaces::msgOBUIdentifiedScope(*from.scopeobu_);
  } else {
    scopeobu_ = nullptr;
  }
  ::memcpy(&subjecttype_, &from.subjecttype_,
    static_cast<size_t>(reinterpret_cast<char*>(&wsascope_) -
    reinterpret_cast<char*>(&subjecttype_)) + sizeof(wsascope_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgCertSpecificData)
}

void msgCertSpecificData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgCertSpecificData_Interfaces_2eproto.base);
  ::memset(&scopeca_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wsascope_) -
      reinterpret_cast<char*>(&scopeca_)) + sizeof(wsascope_));
}

msgCertSpecificData::~msgCertSpecificData() {
  // @@protoc_insertion_point(destructor:interfaces.msgCertSpecificData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgCertSpecificData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scopeca_;
  if (this != internal_default_instance()) delete scopeid_;
  if (this != internal_default_instance()) delete scopeobu_;
}

void msgCertSpecificData::ArenaDtor(void* object) {
  msgCertSpecificData* _this = reinterpret_cast< msgCertSpecificData* >(object);
  (void)_this;
}
void msgCertSpecificData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgCertSpecificData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgCertSpecificData& msgCertSpecificData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgCertSpecificData_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgCertSpecificData::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgCertSpecificData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(scopeca_ != nullptr);
      scopeca_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(scopeid_ != nullptr);
      scopeid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(scopeobu_ != nullptr);
      scopeobu_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&subjecttype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wsascope_) -
        reinterpret_cast<char*>(&subjecttype_)) + sizeof(wsascope_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgCertSpecificData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .interfaces.msgSubType.SubjectType subjectType = 1 [default = wsa_ca1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::interfaces::msgSubType_SubjectType_IsValid(val))) {
            _internal_set_subjecttype(static_cast<::interfaces::msgSubType_SubjectType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgCAScope scopeCA = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scopeca(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 responsibleCrlSeries = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_responsiblecrlseries(&has_bits);
          responsiblecrlseries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgWSASignerScope.WSASignerScope wsaScope = 4 [default = wsaSignerAdvertisingSpecificApplications];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::interfaces::msgWSASignerScope_WSASignerScope_IsValid(val))) {
            _internal_set_wsascope(static_cast<::interfaces::msgWSASignerScope_WSASignerScope>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgIdentifiedScope scopeId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_scopeid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgOBUIdentifiedScope scopeOBU = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_scopeobu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgCertSpecificData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgCertSpecificData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .interfaces.msgSubType.SubjectType subjectType = 1 [default = wsa_ca1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_subjecttype(), target);
  }

  // required .interfaces.msgCAScope scopeCA = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::scopeca(this), target, stream);
  }

  // required uint32 responsibleCrlSeries = 3 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_responsiblecrlseries(), target);
  }

  // required .interfaces.msgWSASignerScope.WSASignerScope wsaScope = 4 [default = wsaSignerAdvertisingSpecificApplications];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_wsascope(), target);
  }

  // required .interfaces.msgIdentifiedScope scopeId = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::scopeid(this), target, stream);
  }

  // required .interfaces.msgOBUIdentifiedScope scopeOBU = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::scopeobu(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgCertSpecificData)
  return target;
}

size_t msgCertSpecificData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgCertSpecificData)
  size_t total_size = 0;

  if (_internal_has_scopeca()) {
    // required .interfaces.msgCAScope scopeCA = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scopeca_);
  }

  if (_internal_has_scopeid()) {
    // required .interfaces.msgIdentifiedScope scopeId = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scopeid_);
  }

  if (_internal_has_scopeobu()) {
    // required .interfaces.msgOBUIdentifiedScope scopeOBU = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scopeobu_);
  }

  if (_internal_has_subjecttype()) {
    // required .interfaces.msgSubType.SubjectType subjectType = 1 [default = wsa_ca1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_subjecttype());
  }

  if (_internal_has_responsiblecrlseries()) {
    // required uint32 responsibleCrlSeries = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_responsiblecrlseries());
  }

  if (_internal_has_wsascope()) {
    // required .interfaces.msgWSASignerScope.WSASignerScope wsaScope = 4 [default = wsaSignerAdvertisingSpecificApplications];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_wsascope());
  }

  return total_size;
}
size_t msgCertSpecificData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgCertSpecificData)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required .interfaces.msgCAScope scopeCA = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scopeca_);

    // required .interfaces.msgIdentifiedScope scopeId = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scopeid_);

    // required .interfaces.msgOBUIdentifiedScope scopeOBU = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scopeobu_);

    // required .interfaces.msgSubType.SubjectType subjectType = 1 [default = wsa_ca1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_subjecttype());

    // required uint32 responsibleCrlSeries = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_responsiblecrlseries());

    // required .interfaces.msgWSASignerScope.WSASignerScope wsaScope = 4 [default = wsaSignerAdvertisingSpecificApplications];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_wsascope());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgCertSpecificData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgCertSpecificData)
  GOOGLE_DCHECK_NE(&from, this);
  const msgCertSpecificData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgCertSpecificData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgCertSpecificData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgCertSpecificData)
    MergeFrom(*source);
  }
}

void msgCertSpecificData::MergeFrom(const msgCertSpecificData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgCertSpecificData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_scopeca()->::interfaces::msgCAScope::MergeFrom(from._internal_scopeca());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_scopeid()->::interfaces::msgIdentifiedScope::MergeFrom(from._internal_scopeid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_scopeobu()->::interfaces::msgOBUIdentifiedScope::MergeFrom(from._internal_scopeobu());
    }
    if (cached_has_bits & 0x00000008u) {
      subjecttype_ = from.subjecttype_;
    }
    if (cached_has_bits & 0x00000010u) {
      responsiblecrlseries_ = from.responsiblecrlseries_;
    }
    if (cached_has_bits & 0x00000020u) {
      wsascope_ = from.wsascope_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgCertSpecificData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgCertSpecificData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgCertSpecificData::CopyFrom(const msgCertSpecificData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgCertSpecificData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgCertSpecificData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_scopeca()) {
    if (!scopeca_->IsInitialized()) return false;
  }
  if (_internal_has_scopeid()) {
    if (!scopeid_->IsInitialized()) return false;
  }
  if (_internal_has_scopeobu()) {
    if (!scopeobu_->IsInitialized()) return false;
  }
  return true;
}

void msgCertSpecificData::InternalSwap(msgCertSpecificData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgCertSpecificData, wsascope_)
      + sizeof(msgCertSpecificData::wsascope_)
      - PROTOBUF_FIELD_OFFSET(msgCertSpecificData, scopeca_)>(
          reinterpret_cast<char*>(&scopeca_),
          reinterpret_cast<char*>(&other->scopeca_));
}

::PROTOBUF_NAMESPACE_ID::Metadata msgCertSpecificData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgToBeSignedWAVECertificate::InitAsDefaultInstance() {
  ::interfaces::_msgToBeSignedWAVECertificate_default_instance_._instance.get_mutable()->stcertscope_ = const_cast< ::interfaces::msgCertSpecificData*>(
      ::interfaces::msgCertSpecificData::internal_default_instance());
  ::interfaces::_msgToBeSignedWAVECertificate_default_instance_._instance.get_mutable()->stpsnympublickey_ = const_cast< ::interfaces::msgECPublicKey*>(
      ::interfaces::msgECPublicKey::internal_default_instance());
}
class msgToBeSignedWAVECertificate::_Internal {
 public:
  using HasBits = decltype(std::declval<msgToBeSignedWAVECertificate>()._has_bits_);
  static void set_has_uicertificateversion(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_subjecttype(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_isignerid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::interfaces::msgCertSpecificData& stcertscope(const msgToBeSignedWAVECertificate* msg);
  static void set_has_stcertscope(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uicrlseries(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_strpsnymcertserialno(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_strpsnymcertidentifiablekey(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tisvalidfrom(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_tisvalidto(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::interfaces::msgECPublicKey& stpsnympublickey(const msgToBeSignedWAVECertificate* msg);
  static void set_has_stpsnympublickey(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000003ff) ^ 0x000003ff) != 0;
  }
};

const ::interfaces::msgCertSpecificData&
msgToBeSignedWAVECertificate::_Internal::stcertscope(const msgToBeSignedWAVECertificate* msg) {
  return *msg->stcertscope_;
}
const ::interfaces::msgECPublicKey&
msgToBeSignedWAVECertificate::_Internal::stpsnympublickey(const msgToBeSignedWAVECertificate* msg) {
  return *msg->stpsnympublickey_;
}
msgToBeSignedWAVECertificate::msgToBeSignedWAVECertificate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgToBeSignedWAVECertificate)
}
msgToBeSignedWAVECertificate::msgToBeSignedWAVECertificate(const msgToBeSignedWAVECertificate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strpsnymcertserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strpsnymcertserialno()) {
    strpsnymcertserialno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strpsnymcertserialno(),
      GetArena());
  }
  strpsnymcertidentifiablekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strpsnymcertidentifiablekey()) {
    strpsnymcertidentifiablekey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strpsnymcertidentifiablekey(),
      GetArena());
  }
  if (from._internal_has_stcertscope()) {
    stcertscope_ = new ::interfaces::msgCertSpecificData(*from.stcertscope_);
  } else {
    stcertscope_ = nullptr;
  }
  if (from._internal_has_stpsnympublickey()) {
    stpsnympublickey_ = new ::interfaces::msgECPublicKey(*from.stpsnympublickey_);
  } else {
    stpsnympublickey_ = nullptr;
  }
  ::memcpy(&uicertificateversion_, &from.uicertificateversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&tisvalidto_) -
    reinterpret_cast<char*>(&uicertificateversion_)) + sizeof(tisvalidto_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgToBeSignedWAVECertificate)
}

void msgToBeSignedWAVECertificate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgToBeSignedWAVECertificate_Interfaces_2eproto.base);
  strpsnymcertserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strpsnymcertidentifiablekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stcertscope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uicrlseries_) -
      reinterpret_cast<char*>(&stcertscope_)) + sizeof(uicrlseries_));
  isignerid_ = -1;
  tisvalidfrom_ = PROTOBUF_LONGLONG(-1);
  tisvalidto_ = PROTOBUF_LONGLONG(-1);
}

msgToBeSignedWAVECertificate::~msgToBeSignedWAVECertificate() {
  // @@protoc_insertion_point(destructor:interfaces.msgToBeSignedWAVECertificate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgToBeSignedWAVECertificate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strpsnymcertserialno_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strpsnymcertidentifiablekey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stcertscope_;
  if (this != internal_default_instance()) delete stpsnympublickey_;
}

void msgToBeSignedWAVECertificate::ArenaDtor(void* object) {
  msgToBeSignedWAVECertificate* _this = reinterpret_cast< msgToBeSignedWAVECertificate* >(object);
  (void)_this;
}
void msgToBeSignedWAVECertificate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgToBeSignedWAVECertificate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgToBeSignedWAVECertificate& msgToBeSignedWAVECertificate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgToBeSignedWAVECertificate_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgToBeSignedWAVECertificate::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgToBeSignedWAVECertificate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      strpsnymcertserialno_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      strpsnymcertidentifiablekey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stcertscope_ != nullptr);
      stcertscope_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(stpsnympublickey_ != nullptr);
      stpsnympublickey_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&uicertificateversion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uicrlseries_) -
        reinterpret_cast<char*>(&uicertificateversion_)) + sizeof(uicrlseries_));
    isignerid_ = -1;
  }
  if (cached_has_bits & 0x00000300u) {
    tisvalidfrom_ = PROTOBUF_LONGLONG(-1);
    tisvalidto_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgToBeSignedWAVECertificate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 uiCertificateVersion = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uicertificateversion(&has_bits);
          uicertificateversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgSubType.SubjectType subjectType = 2 [default = wsa_ca1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::interfaces::msgSubType_SubjectType_IsValid(val))) {
            _internal_set_subjecttype(static_cast<::interfaces::msgSubType_SubjectType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required int32 iSignerId = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_isignerid(&has_bits);
          isignerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgCertSpecificData stCertScope = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stcertscope(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiCrlSeries = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_uicrlseries(&has_bits);
          uicrlseries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strPsnymCertSerialNo = 6 [default = ""];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_strpsnymcertserialno();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgToBeSignedWAVECertificate.strPsnymCertSerialNo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strPsnymCertIdentifiableKey = 7 [default = ""];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_strpsnymcertidentifiablekey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgToBeSignedWAVECertificate.strPsnymCertIdentifiableKey");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tIsValidFrom = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_tisvalidfrom(&has_bits);
          tisvalidfrom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tIsValidTo = 9 [default = -1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_tisvalidto(&has_bits);
          tisvalidto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgECPublicKey stPsnymPublicKey = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_stpsnympublickey(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgToBeSignedWAVECertificate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgToBeSignedWAVECertificate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 uiCertificateVersion = 1 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uicertificateversion(), target);
  }

  // required .interfaces.msgSubType.SubjectType subjectType = 2 [default = wsa_ca1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_subjecttype(), target);
  }

  // required int32 iSignerId = 3 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_isignerid(), target);
  }

  // required .interfaces.msgCertSpecificData stCertScope = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::stcertscope(this), target, stream);
  }

  // required uint32 uiCrlSeries = 5 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_uicrlseries(), target);
  }

  // required string strPsnymCertSerialNo = 6 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strpsnymcertserialno().data(), static_cast<int>(this->_internal_strpsnymcertserialno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgToBeSignedWAVECertificate.strPsnymCertSerialNo");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_strpsnymcertserialno(), target);
  }

  // required string strPsnymCertIdentifiableKey = 7 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strpsnymcertidentifiablekey().data(), static_cast<int>(this->_internal_strpsnymcertidentifiablekey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgToBeSignedWAVECertificate.strPsnymCertIdentifiableKey");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_strpsnymcertidentifiablekey(), target);
  }

  // required int64 tIsValidFrom = 8 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_tisvalidfrom(), target);
  }

  // required int64 tIsValidTo = 9 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_tisvalidto(), target);
  }

  // required .interfaces.msgECPublicKey stPsnymPublicKey = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::stpsnympublickey(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgToBeSignedWAVECertificate)
  return target;
}

size_t msgToBeSignedWAVECertificate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgToBeSignedWAVECertificate)
  size_t total_size = 0;

  if (_internal_has_strpsnymcertserialno()) {
    // required string strPsnymCertSerialNo = 6 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpsnymcertserialno());
  }

  if (_internal_has_strpsnymcertidentifiablekey()) {
    // required string strPsnymCertIdentifiableKey = 7 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpsnymcertidentifiablekey());
  }

  if (_internal_has_stcertscope()) {
    // required .interfaces.msgCertSpecificData stCertScope = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stcertscope_);
  }

  if (_internal_has_stpsnympublickey()) {
    // required .interfaces.msgECPublicKey stPsnymPublicKey = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stpsnympublickey_);
  }

  if (_internal_has_uicertificateversion()) {
    // required uint32 uiCertificateVersion = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uicertificateversion());
  }

  if (_internal_has_subjecttype()) {
    // required .interfaces.msgSubType.SubjectType subjectType = 2 [default = wsa_ca1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_subjecttype());
  }

  if (_internal_has_uicrlseries()) {
    // required uint32 uiCrlSeries = 5 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uicrlseries());
  }

  if (_internal_has_isignerid()) {
    // required int32 iSignerId = 3 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_isignerid());
  }

  if (_internal_has_tisvalidfrom()) {
    // required int64 tIsValidFrom = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tisvalidfrom());
  }

  if (_internal_has_tisvalidto()) {
    // required int64 tIsValidTo = 9 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tisvalidto());
  }

  return total_size;
}
size_t msgToBeSignedWAVECertificate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgToBeSignedWAVECertificate)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required string strPsnymCertSerialNo = 6 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpsnymcertserialno());

    // required string strPsnymCertIdentifiableKey = 7 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpsnymcertidentifiablekey());

    // required .interfaces.msgCertSpecificData stCertScope = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stcertscope_);

    // required .interfaces.msgECPublicKey stPsnymPublicKey = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stpsnympublickey_);

    // required uint32 uiCertificateVersion = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uicertificateversion());

    // required .interfaces.msgSubType.SubjectType subjectType = 2 [default = wsa_ca1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_subjecttype());

    // required uint32 uiCrlSeries = 5 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uicrlseries());

    // required int32 iSignerId = 3 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_isignerid());

    // required int64 tIsValidFrom = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tisvalidfrom());

    // required int64 tIsValidTo = 9 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tisvalidto());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgToBeSignedWAVECertificate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgToBeSignedWAVECertificate)
  GOOGLE_DCHECK_NE(&from, this);
  const msgToBeSignedWAVECertificate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgToBeSignedWAVECertificate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgToBeSignedWAVECertificate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgToBeSignedWAVECertificate)
    MergeFrom(*source);
  }
}

void msgToBeSignedWAVECertificate::MergeFrom(const msgToBeSignedWAVECertificate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgToBeSignedWAVECertificate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strpsnymcertserialno(from._internal_strpsnymcertserialno());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_strpsnymcertidentifiablekey(from._internal_strpsnymcertidentifiablekey());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stcertscope()->::interfaces::msgCertSpecificData::MergeFrom(from._internal_stcertscope());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_stpsnympublickey()->::interfaces::msgECPublicKey::MergeFrom(from._internal_stpsnympublickey());
    }
    if (cached_has_bits & 0x00000010u) {
      uicertificateversion_ = from.uicertificateversion_;
    }
    if (cached_has_bits & 0x00000020u) {
      subjecttype_ = from.subjecttype_;
    }
    if (cached_has_bits & 0x00000040u) {
      uicrlseries_ = from.uicrlseries_;
    }
    if (cached_has_bits & 0x00000080u) {
      isignerid_ = from.isignerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      tisvalidfrom_ = from.tisvalidfrom_;
    }
    if (cached_has_bits & 0x00000200u) {
      tisvalidto_ = from.tisvalidto_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgToBeSignedWAVECertificate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgToBeSignedWAVECertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgToBeSignedWAVECertificate::CopyFrom(const msgToBeSignedWAVECertificate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgToBeSignedWAVECertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgToBeSignedWAVECertificate::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stcertscope()) {
    if (!stcertscope_->IsInitialized()) return false;
  }
  if (_internal_has_stpsnympublickey()) {
    if (!stpsnympublickey_->IsInitialized()) return false;
  }
  return true;
}

void msgToBeSignedWAVECertificate::InternalSwap(msgToBeSignedWAVECertificate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strpsnymcertserialno_.Swap(&other->strpsnymcertserialno_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strpsnymcertidentifiablekey_.Swap(&other->strpsnymcertidentifiablekey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgToBeSignedWAVECertificate, uicrlseries_)
      + sizeof(msgToBeSignedWAVECertificate::uicrlseries_)
      - PROTOBUF_FIELD_OFFSET(msgToBeSignedWAVECertificate, stcertscope_)>(
          reinterpret_cast<char*>(&stcertscope_),
          reinterpret_cast<char*>(&other->stcertscope_));
  swap(isignerid_, other->isignerid_);
  swap(tisvalidfrom_, other->tisvalidfrom_);
  swap(tisvalidto_, other->tisvalidto_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgToBeSignedWAVECertificate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgPsnymCertFormat::InitAsDefaultInstance() {
  ::interfaces::_msgPsnymCertFormat_default_instance_._instance.get_mutable()->stcertificate_ = const_cast< ::interfaces::msgToBeSignedWAVECertificate*>(
      ::interfaces::msgToBeSignedWAVECertificate::internal_default_instance());
  ::interfaces::_msgPsnymCertFormat_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgPsnymCertFormat::_Internal {
 public:
  using HasBits = decltype(std::declval<msgPsnymCertFormat>()._has_bits_);
  static void set_has_uicertificateversion(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::interfaces::msgToBeSignedWAVECertificate& stcertificate(const msgPsnymCertFormat* msg);
  static void set_has_stcertificate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::interfaces::msgSignature& stsign(const msgPsnymCertFormat* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

const ::interfaces::msgToBeSignedWAVECertificate&
msgPsnymCertFormat::_Internal::stcertificate(const msgPsnymCertFormat* msg) {
  return *msg->stcertificate_;
}
const ::interfaces::msgSignature&
msgPsnymCertFormat::_Internal::stsign(const msgPsnymCertFormat* msg) {
  return *msg->stsign_;
}
msgPsnymCertFormat::msgPsnymCertFormat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgPsnymCertFormat)
}
msgPsnymCertFormat::msgPsnymCertFormat(const msgPsnymCertFormat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stcertificate()) {
    stcertificate_ = new ::interfaces::msgToBeSignedWAVECertificate(*from.stcertificate_);
  } else {
    stcertificate_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  uicertificateversion_ = from.uicertificateversion_;
  // @@protoc_insertion_point(copy_constructor:interfaces.msgPsnymCertFormat)
}

void msgPsnymCertFormat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgPsnymCertFormat_Interfaces_2eproto.base);
  ::memset(&stcertificate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uicertificateversion_) -
      reinterpret_cast<char*>(&stcertificate_)) + sizeof(uicertificateversion_));
}

msgPsnymCertFormat::~msgPsnymCertFormat() {
  // @@protoc_insertion_point(destructor:interfaces.msgPsnymCertFormat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgPsnymCertFormat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stcertificate_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgPsnymCertFormat::ArenaDtor(void* object) {
  msgPsnymCertFormat* _this = reinterpret_cast< msgPsnymCertFormat* >(object);
  (void)_this;
}
void msgPsnymCertFormat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgPsnymCertFormat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgPsnymCertFormat& msgPsnymCertFormat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgPsnymCertFormat_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgPsnymCertFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgPsnymCertFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stcertificate_ != nullptr);
      stcertificate_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
  }
  uicertificateversion_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgPsnymCertFormat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 uiCertificateVersion = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uicertificateversion(&has_bits);
          uicertificateversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgToBeSignedWAVECertificate stCertificate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stcertificate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgPsnymCertFormat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgPsnymCertFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 uiCertificateVersion = 1 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uicertificateversion(), target);
  }

  // required .interfaces.msgToBeSignedWAVECertificate stCertificate = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stcertificate(this), target, stream);
  }

  // optional .interfaces.msgSignature stSign = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgPsnymCertFormat)
  return target;
}

size_t msgPsnymCertFormat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgPsnymCertFormat)
  size_t total_size = 0;

  if (_internal_has_stcertificate()) {
    // required .interfaces.msgToBeSignedWAVECertificate stCertificate = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stcertificate_);
  }

  if (_internal_has_uicertificateversion()) {
    // required uint32 uiCertificateVersion = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uicertificateversion());
  }

  return total_size;
}
size_t msgPsnymCertFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgPsnymCertFormat)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required .interfaces.msgToBeSignedWAVECertificate stCertificate = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stcertificate_);

    // required uint32 uiCertificateVersion = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uicertificateversion());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .interfaces.msgSignature stSign = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsign_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgPsnymCertFormat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgPsnymCertFormat)
  GOOGLE_DCHECK_NE(&from, this);
  const msgPsnymCertFormat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgPsnymCertFormat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgPsnymCertFormat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgPsnymCertFormat)
    MergeFrom(*source);
  }
}

void msgPsnymCertFormat::MergeFrom(const msgPsnymCertFormat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgPsnymCertFormat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stcertificate()->::interfaces::msgToBeSignedWAVECertificate::MergeFrom(from._internal_stcertificate());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000004u) {
      uicertificateversion_ = from.uicertificateversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgPsnymCertFormat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgPsnymCertFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgPsnymCertFormat::CopyFrom(const msgPsnymCertFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgPsnymCertFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgPsnymCertFormat::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stcertificate()) {
    if (!stcertificate_->IsInitialized()) return false;
  }
  return true;
}

void msgPsnymCertFormat::InternalSwap(msgPsnymCertFormat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgPsnymCertFormat, uicertificateversion_)
      + sizeof(msgPsnymCertFormat::uicertificateversion_)
      - PROTOBUF_FIELD_OFFSET(msgPsnymCertFormat, stcertificate_)>(
          reinterpret_cast<char*>(&stcertificate_),
          reinterpret_cast<char*>(&other->stcertificate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata msgPsnymCertFormat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgSignerInfo::InitAsDefaultInstance() {
}
class msgSignerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<msgSignerInfo>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_strcertificate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_strdigest(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_strcertificateschain(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000009) ^ 0x00000009) != 0;
  }
};

msgSignerInfo::msgSignerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgSignerInfo)
}
msgSignerInfo::msgSignerInfo(const msgSignerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strcertificate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strcertificate()) {
    strcertificate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strcertificate(),
      GetArena());
  }
  strdigest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strdigest()) {
    strdigest_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strdigest(),
      GetArena());
  }
  strcertificateschain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strcertificateschain()) {
    strcertificateschain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strcertificateschain(),
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:interfaces.msgSignerInfo)
}

void msgSignerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgSignerInfo_Interfaces_2eproto.base);
  strcertificate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strdigest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strcertificateschain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 4;
}

msgSignerInfo::~msgSignerInfo() {
  // @@protoc_insertion_point(destructor:interfaces.msgSignerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgSignerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strcertificate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strdigest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strcertificateschain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msgSignerInfo::ArenaDtor(void* object) {
  msgSignerInfo* _this = reinterpret_cast< msgSignerInfo* >(object);
  (void)_this;
}
void msgSignerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgSignerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgSignerInfo& msgSignerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgSignerInfo_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgSignerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgSignerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      strcertificate_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      strdigest_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      strcertificateschain_.ClearNonDefaultToEmpty();
    }
    type_ = 4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgSignerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .interfaces.msgSignerIdentifierType.SignerIdentifierType type = 1 [default = self];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::interfaces::msgSignerIdentifierType_SignerIdentifierType_IsValid(val))) {
            _internal_set_type(static_cast<::interfaces::msgSignerIdentifierType_SignerIdentifierType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required string strCertificate = 2 [default = ""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_strcertificate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgSignerInfo.strCertificate");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string strDigest = 3 [default = ""];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_strdigest();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgSignerInfo.strDigest");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string strCertificatesChain = 4 [default = ""];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_strcertificateschain();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgSignerInfo.strCertificatesChain");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgSignerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgSignerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .interfaces.msgSignerIdentifierType.SignerIdentifierType type = 1 [default = self];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required string strCertificate = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strcertificate().data(), static_cast<int>(this->_internal_strcertificate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgSignerInfo.strCertificate");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_strcertificate(), target);
  }

  // optional string strDigest = 3 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strdigest().data(), static_cast<int>(this->_internal_strdigest().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgSignerInfo.strDigest");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_strdigest(), target);
  }

  // optional string strCertificatesChain = 4 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strcertificateschain().data(), static_cast<int>(this->_internal_strcertificateschain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgSignerInfo.strCertificatesChain");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_strcertificateschain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgSignerInfo)
  return target;
}

size_t msgSignerInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgSignerInfo)
  size_t total_size = 0;

  if (_internal_has_strcertificate()) {
    // required string strCertificate = 2 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strcertificate());
  }

  if (_internal_has_type()) {
    // required .interfaces.msgSignerIdentifierType.SignerIdentifierType type = 1 [default = self];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t msgSignerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgSignerInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required string strCertificate = 2 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strcertificate());

    // required .interfaces.msgSignerIdentifierType.SignerIdentifierType type = 1 [default = self];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional string strDigest = 3 [default = ""];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_strdigest());
    }

    // optional string strCertificatesChain = 4 [default = ""];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_strcertificateschain());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgSignerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgSignerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const msgSignerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgSignerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgSignerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgSignerInfo)
    MergeFrom(*source);
  }
}

void msgSignerInfo::MergeFrom(const msgSignerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgSignerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strcertificate(from._internal_strcertificate());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_strdigest(from._internal_strdigest());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_strcertificateschain(from._internal_strcertificateschain());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgSignerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgSignerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgSignerInfo::CopyFrom(const msgSignerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgSignerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgSignerInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void msgSignerInfo::InternalSwap(msgSignerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strcertificate_.Swap(&other->strcertificate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strdigest_.Swap(&other->strdigest_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strcertificateschain_.Swap(&other->strcertificateschain_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgSignerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgPsnymKeysStorage::InitAsDefaultInstance() {
  ::interfaces::_msgPsnymKeysStorage_default_instance_._instance.get_mutable()->stpsnymcert_ = const_cast< ::interfaces::msgPsnymCertFormat*>(
      ::interfaces::msgPsnymCertFormat::internal_default_instance());
}
class msgPsnymKeysStorage::_Internal {
 public:
  using HasBits = decltype(std::declval<msgPsnymKeysStorage>()._has_bits_);
  static void set_has_ipsnymprivatekeylen(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_strpsnymprivatekey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::interfaces::msgPsnymCertFormat& stpsnymcert(const msgPsnymKeysStorage* msg);
  static void set_has_stpsnymcert(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::interfaces::msgPsnymCertFormat&
msgPsnymKeysStorage::_Internal::stpsnymcert(const msgPsnymKeysStorage* msg) {
  return *msg->stpsnymcert_;
}
msgPsnymKeysStorage::msgPsnymKeysStorage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgPsnymKeysStorage)
}
msgPsnymKeysStorage::msgPsnymKeysStorage(const msgPsnymKeysStorage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strpsnymprivatekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strpsnymprivatekey()) {
    strpsnymprivatekey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strpsnymprivatekey(),
      GetArena());
  }
  if (from._internal_has_stpsnymcert()) {
    stpsnymcert_ = new ::interfaces::msgPsnymCertFormat(*from.stpsnymcert_);
  } else {
    stpsnymcert_ = nullptr;
  }
  ipsnymprivatekeylen_ = from.ipsnymprivatekeylen_;
  // @@protoc_insertion_point(copy_constructor:interfaces.msgPsnymKeysStorage)
}

void msgPsnymKeysStorage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgPsnymKeysStorage_Interfaces_2eproto.base);
  strpsnymprivatekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stpsnymcert_ = nullptr;
  ipsnymprivatekeylen_ = -1;
}

msgPsnymKeysStorage::~msgPsnymKeysStorage() {
  // @@protoc_insertion_point(destructor:interfaces.msgPsnymKeysStorage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgPsnymKeysStorage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strpsnymprivatekey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stpsnymcert_;
}

void msgPsnymKeysStorage::ArenaDtor(void* object) {
  msgPsnymKeysStorage* _this = reinterpret_cast< msgPsnymKeysStorage* >(object);
  (void)_this;
}
void msgPsnymKeysStorage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgPsnymKeysStorage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgPsnymKeysStorage& msgPsnymKeysStorage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgPsnymKeysStorage_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgPsnymKeysStorage::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgPsnymKeysStorage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      strpsnymprivatekey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stpsnymcert_ != nullptr);
      stpsnymcert_->Clear();
    }
    ipsnymprivatekeylen_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgPsnymKeysStorage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iPsnymPrivateKeyLen = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ipsnymprivatekeylen(&has_bits);
          ipsnymprivatekeylen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strPsnymPrivateKey = 2 [default = ""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_strpsnymprivatekey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgPsnymKeysStorage.strPsnymPrivateKey");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgPsnymCertFormat stPsnymCert = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stpsnymcert(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgPsnymKeysStorage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgPsnymKeysStorage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iPsnymPrivateKeyLen = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ipsnymprivatekeylen(), target);
  }

  // required string strPsnymPrivateKey = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strpsnymprivatekey().data(), static_cast<int>(this->_internal_strpsnymprivatekey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgPsnymKeysStorage.strPsnymPrivateKey");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_strpsnymprivatekey(), target);
  }

  // required .interfaces.msgPsnymCertFormat stPsnymCert = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::stpsnymcert(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgPsnymKeysStorage)
  return target;
}

size_t msgPsnymKeysStorage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgPsnymKeysStorage)
  size_t total_size = 0;

  if (_internal_has_strpsnymprivatekey()) {
    // required string strPsnymPrivateKey = 2 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpsnymprivatekey());
  }

  if (_internal_has_stpsnymcert()) {
    // required .interfaces.msgPsnymCertFormat stPsnymCert = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stpsnymcert_);
  }

  if (_internal_has_ipsnymprivatekeylen()) {
    // required int32 iPsnymPrivateKeyLen = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipsnymprivatekeylen());
  }

  return total_size;
}
size_t msgPsnymKeysStorage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgPsnymKeysStorage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string strPsnymPrivateKey = 2 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpsnymprivatekey());

    // required .interfaces.msgPsnymCertFormat stPsnymCert = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stpsnymcert_);

    // required int32 iPsnymPrivateKeyLen = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipsnymprivatekeylen());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgPsnymKeysStorage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgPsnymKeysStorage)
  GOOGLE_DCHECK_NE(&from, this);
  const msgPsnymKeysStorage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgPsnymKeysStorage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgPsnymKeysStorage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgPsnymKeysStorage)
    MergeFrom(*source);
  }
}

void msgPsnymKeysStorage::MergeFrom(const msgPsnymKeysStorage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgPsnymKeysStorage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strpsnymprivatekey(from._internal_strpsnymprivatekey());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stpsnymcert()->::interfaces::msgPsnymCertFormat::MergeFrom(from._internal_stpsnymcert());
    }
    if (cached_has_bits & 0x00000004u) {
      ipsnymprivatekeylen_ = from.ipsnymprivatekeylen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgPsnymKeysStorage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgPsnymKeysStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgPsnymKeysStorage::CopyFrom(const msgPsnymKeysStorage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgPsnymKeysStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgPsnymKeysStorage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stpsnymcert()) {
    if (!stpsnymcert_->IsInitialized()) return false;
  }
  return true;
}

void msgPsnymKeysStorage::InternalSwap(msgPsnymKeysStorage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strpsnymprivatekey_.Swap(&other->strpsnymprivatekey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(stpsnymcert_, other->stpsnymcert_);
  swap(ipsnymprivatekeylen_, other->ipsnymprivatekeylen_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgPsnymKeysStorage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgTicketReq::InitAsDefaultInstance() {
  ::interfaces::_msgTicketReq_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgTicketReq_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgTicketReq::_Internal {
 public:
  using HasBits = decltype(std::declval<msgTicketReq>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgTicketReq* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uiservices(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_uipsnymcertnorequest(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_iltcaidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ipcaidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tpsnymstarttime(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tpsnymendtime(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_strx509cert(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::interfaces::msgSignature& stsign(const msgTicketReq* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000ff9) ^ 0x00000ff9) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgTicketReq::_Internal::stsigner(const msgTicketReq* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgSignature&
msgTicketReq::_Internal::stsign(const msgTicketReq* msg) {
  return *msg->stsign_;
}
msgTicketReq::msgTicketReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgTicketReq)
}
msgTicketReq::msgTicketReq(const msgTicketReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strx509cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strx509cert()) {
    strx509cert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strx509cert(),
      GetArena());
  }
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&uiservices_, &from.uiservices_,
    static_cast<size_t>(reinterpret_cast<char*>(&tpsnymendtime_) -
    reinterpret_cast<char*>(&uiservices_)) + sizeof(tpsnymendtime_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgTicketReq)
}

void msgTicketReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgTicketReq_Interfaces_2eproto.base);
  strx509cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uipsnymcertnorequest_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(uipsnymcertnorequest_));
  ireqtype_ = -1;
  iltcaidrange_ = -1;
  ipcaidrange_ = -1;
  inonce_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
  tpsnymstarttime_ = PROTOBUF_LONGLONG(-1);
  tpsnymendtime_ = PROTOBUF_LONGLONG(-1);
}

msgTicketReq::~msgTicketReq() {
  // @@protoc_insertion_point(destructor:interfaces.msgTicketReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgTicketReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strx509cert_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgTicketReq::ArenaDtor(void* object) {
  msgTicketReq* _this = reinterpret_cast< msgTicketReq* >(object);
  (void)_this;
}
void msgTicketReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgTicketReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgTicketReq& msgTicketReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgTicketReq_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgTicketReq::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgTicketReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      strx509cert_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&uiservices_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uipsnymcertnorequest_) -
        reinterpret_cast<char*>(&uiservices_)) + sizeof(uipsnymcertnorequest_));
    ireqtype_ = -1;
    iltcaidrange_ = -1;
    ipcaidrange_ = -1;
  }
  if (cached_has_bits & 0x00000f00u) {
    inonce_ = -1;
    ttimestamp_ = PROTOBUF_LONGLONG(-1);
    tpsnymstarttime_ = PROTOBUF_LONGLONG(-1);
    tpsnymendtime_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgTicketReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiServices = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uiservices(&has_bits);
          uiservices_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiPsnymCertNoRequest = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_uipsnymcertnorequest(&has_bits);
          uipsnymcertnorequest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iLTCAIdRange = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_iltcaidrange(&has_bits);
          iltcaidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iPCAIdRange = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ipcaidrange(&has_bits);
          ipcaidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tPsnymStartTime = 9 [default = -1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_tpsnymstarttime(&has_bits);
          tpsnymstarttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tPsnymEndTime = 10 [default = -1];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_tpsnymendtime(&has_bits);
          tpsnymendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strX509Cert = 11 [default = ""];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_strx509cert();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgTicketReq.strX509Cert");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgTicketReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgTicketReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required uint32 uiServices = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uiservices(), target);
  }

  // required uint32 uiPsnymCertNoRequest = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_uipsnymcertnorequest(), target);
  }

  // required int32 iLTCAIdRange = 5 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_iltcaidrange(), target);
  }

  // required int32 iPCAIdRange = 6 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_ipcaidrange(), target);
  }

  // required int32 iNonce = 7 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 8 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_ttimestamp(), target);
  }

  // required int64 tPsnymStartTime = 9 [default = -1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_tpsnymstarttime(), target);
  }

  // required int64 tPsnymEndTime = 10 [default = -1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_tpsnymendtime(), target);
  }

  // required string strX509Cert = 11 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strx509cert().data(), static_cast<int>(this->_internal_strx509cert().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgTicketReq.strX509Cert");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_strx509cert(), target);
  }

  // optional .interfaces.msgSignature stSign = 12;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgTicketReq)
  return target;
}

size_t msgTicketReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgTicketReq)
  size_t total_size = 0;

  if (_internal_has_strx509cert()) {
    // required string strX509Cert = 11 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strx509cert());
  }

  if (_internal_has_uiservices()) {
    // required uint32 uiServices = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uiservices());
  }

  if (_internal_has_uipsnymcertnorequest()) {
    // required uint32 uiPsnymCertNoRequest = 4 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uipsnymcertnorequest());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_iltcaidrange()) {
    // required int32 iLTCAIdRange = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iltcaidrange());
  }

  if (_internal_has_ipcaidrange()) {
    // required int32 iPCAIdRange = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipcaidrange());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  if (_internal_has_tpsnymstarttime()) {
    // required int64 tPsnymStartTime = 9 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tpsnymstarttime());
  }

  if (_internal_has_tpsnymendtime()) {
    // required int64 tPsnymEndTime = 10 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tpsnymendtime());
  }

  return total_size;
}
size_t msgTicketReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgTicketReq)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000ff9) ^ 0x00000ff9) == 0) {  // All required fields are present.
    // required string strX509Cert = 11 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strx509cert());

    // required uint32 uiServices = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uiservices());

    // required uint32 uiPsnymCertNoRequest = 4 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uipsnymcertnorequest());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iLTCAIdRange = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iltcaidrange());

    // required int32 iPCAIdRange = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipcaidrange());

    // required int32 iNonce = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int64 tTimeStamp = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

    // required int64 tPsnymStartTime = 9 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tpsnymstarttime());

    // required int64 tPsnymEndTime = 10 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tpsnymendtime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .interfaces.msgSignerInfo stSigner = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsigner_);
    }

    // optional .interfaces.msgSignature stSign = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsign_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgTicketReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgTicketReq)
  GOOGLE_DCHECK_NE(&from, this);
  const msgTicketReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgTicketReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgTicketReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgTicketReq)
    MergeFrom(*source);
  }
}

void msgTicketReq::MergeFrom(const msgTicketReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgTicketReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strx509cert(from._internal_strx509cert());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000008u) {
      uiservices_ = from.uiservices_;
    }
    if (cached_has_bits & 0x00000010u) {
      uipsnymcertnorequest_ = from.uipsnymcertnorequest_;
    }
    if (cached_has_bits & 0x00000020u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000040u) {
      iltcaidrange_ = from.iltcaidrange_;
    }
    if (cached_has_bits & 0x00000080u) {
      ipcaidrange_ = from.ipcaidrange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      inonce_ = from.inonce_;
    }
    if (cached_has_bits & 0x00000200u) {
      ttimestamp_ = from.ttimestamp_;
    }
    if (cached_has_bits & 0x00000400u) {
      tpsnymstarttime_ = from.tpsnymstarttime_;
    }
    if (cached_has_bits & 0x00000800u) {
      tpsnymendtime_ = from.tpsnymendtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgTicketReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgTicketReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgTicketReq::CopyFrom(const msgTicketReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgTicketReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgTicketReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  return true;
}

void msgTicketReq::InternalSwap(msgTicketReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strx509cert_.Swap(&other->strx509cert_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgTicketReq, uipsnymcertnorequest_)
      + sizeof(msgTicketReq::uipsnymcertnorequest_)
      - PROTOBUF_FIELD_OFFSET(msgTicketReq, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(ireqtype_, other->ireqtype_);
  swap(iltcaidrange_, other->iltcaidrange_);
  swap(ipcaidrange_, other->ipcaidrange_);
  swap(inonce_, other->inonce_);
  swap(ttimestamp_, other->ttimestamp_);
  swap(tpsnymstarttime_, other->tpsnymstarttime_);
  swap(tpsnymendtime_, other->tpsnymendtime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgTicketReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgForeignTicketReq::InitAsDefaultInstance() {
  ::interfaces::_msgForeignTicketReq_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgForeignTicketReq_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgForeignTicketReq::_Internal {
 public:
  using HasBits = decltype(std::declval<msgForeignTicketReq>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgForeignTicketReq* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uiservices(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_inativeltcacertlength(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_strnativeltcacert(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inativeticketlength(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_strnativeticket(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uipsnymcertnorequest(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::interfaces::msgSignature& stsign(const msgForeignTicketReq* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000007f3) ^ 0x000007f3) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgForeignTicketReq::_Internal::stsigner(const msgForeignTicketReq* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgSignature&
msgForeignTicketReq::_Internal::stsign(const msgForeignTicketReq* msg) {
  return *msg->stsign_;
}
msgForeignTicketReq::msgForeignTicketReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgForeignTicketReq)
}
msgForeignTicketReq::msgForeignTicketReq(const msgForeignTicketReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strnativeltcacert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strnativeltcacert()) {
    strnativeltcacert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strnativeltcacert(),
      GetArena());
  }
  strnativeticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strnativeticket()) {
    strnativeticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strnativeticket(),
      GetArena());
  }
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&uiservices_, &from.uiservices_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&uiservices_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgForeignTicketReq)
}

void msgForeignTicketReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgForeignTicketReq_Interfaces_2eproto.base);
  strnativeltcacert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strnativeticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uipsnymcertnorequest_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(uipsnymcertnorequest_));
  ireqtype_ = -1;
  inativeltcacertlength_ = -1;
  inativeticketlength_ = -1;
  inonce_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgForeignTicketReq::~msgForeignTicketReq() {
  // @@protoc_insertion_point(destructor:interfaces.msgForeignTicketReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgForeignTicketReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strnativeltcacert_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strnativeticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgForeignTicketReq::ArenaDtor(void* object) {
  msgForeignTicketReq* _this = reinterpret_cast< msgForeignTicketReq* >(object);
  (void)_this;
}
void msgForeignTicketReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgForeignTicketReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgForeignTicketReq& msgForeignTicketReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgForeignTicketReq_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgForeignTicketReq::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgForeignTicketReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      strnativeltcacert_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      strnativeticket_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&uiservices_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uipsnymcertnorequest_) -
        reinterpret_cast<char*>(&uiservices_)) + sizeof(uipsnymcertnorequest_));
    ireqtype_ = -1;
    inativeltcacertlength_ = -1;
  }
  if (cached_has_bits & 0x00000700u) {
    inativeticketlength_ = -1;
    inonce_ = -1;
    ttimestamp_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgForeignTicketReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiServices = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uiservices(&has_bits);
          uiservices_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNativeLTCACertLength = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_inativeltcacertlength(&has_bits);
          inativeltcacertlength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strNativeLTCACert = 7 [default = ""];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_strnativeltcacert();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgForeignTicketReq.strNativeLTCACert");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNativeTicketLength = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_inativeticketlength(&has_bits);
          inativeticketlength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strNativeTicket = 9 [default = ""];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_strnativeticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgForeignTicketReq.strNativeTicket");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiPsnymCertNoRequest = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_uipsnymcertnorequest(&has_bits);
          uipsnymcertnorequest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 11 [default = -1];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 12 [default = -1];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgForeignTicketReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgForeignTicketReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required uint32 uiServices = 3 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uiservices(), target);
  }

  // required int32 iNativeLTCACertLength = 6 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_inativeltcacertlength(), target);
  }

  // required string strNativeLTCACert = 7 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strnativeltcacert().data(), static_cast<int>(this->_internal_strnativeltcacert().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgForeignTicketReq.strNativeLTCACert");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_strnativeltcacert(), target);
  }

  // required int32 iNativeTicketLength = 8 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_inativeticketlength(), target);
  }

  // required string strNativeTicket = 9 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strnativeticket().data(), static_cast<int>(this->_internal_strnativeticket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgForeignTicketReq.strNativeTicket");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_strnativeticket(), target);
  }

  // required uint32 uiPsnymCertNoRequest = 10 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_uipsnymcertnorequest(), target);
  }

  // required int32 iNonce = 11 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 12 [default = -1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_ttimestamp(), target);
  }

  // optional .interfaces.msgSignature stSign = 13;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgForeignTicketReq)
  return target;
}

size_t msgForeignTicketReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgForeignTicketReq)
  size_t total_size = 0;

  if (_internal_has_strnativeltcacert()) {
    // required string strNativeLTCACert = 7 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strnativeltcacert());
  }

  if (_internal_has_strnativeticket()) {
    // required string strNativeTicket = 9 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strnativeticket());
  }

  if (_internal_has_uiservices()) {
    // required uint32 uiServices = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uiservices());
  }

  if (_internal_has_uipsnymcertnorequest()) {
    // required uint32 uiPsnymCertNoRequest = 10 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uipsnymcertnorequest());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_inativeltcacertlength()) {
    // required int32 iNativeLTCACertLength = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inativeltcacertlength());
  }

  if (_internal_has_inativeticketlength()) {
    // required int32 iNativeTicketLength = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inativeticketlength());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 11 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 12 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgForeignTicketReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgForeignTicketReq)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000007f3) ^ 0x000007f3) == 0) {  // All required fields are present.
    // required string strNativeLTCACert = 7 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strnativeltcacert());

    // required string strNativeTicket = 9 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strnativeticket());

    // required uint32 uiServices = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uiservices());

    // required uint32 uiPsnymCertNoRequest = 10 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uipsnymcertnorequest());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iNativeLTCACertLength = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inativeltcacertlength());

    // required int32 iNativeTicketLength = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inativeticketlength());

    // required int32 iNonce = 11 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int64 tTimeStamp = 12 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional .interfaces.msgSignerInfo stSigner = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsigner_);
    }

    // optional .interfaces.msgSignature stSign = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsign_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgForeignTicketReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgForeignTicketReq)
  GOOGLE_DCHECK_NE(&from, this);
  const msgForeignTicketReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgForeignTicketReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgForeignTicketReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgForeignTicketReq)
    MergeFrom(*source);
  }
}

void msgForeignTicketReq::MergeFrom(const msgForeignTicketReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgForeignTicketReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strnativeltcacert(from._internal_strnativeltcacert());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_strnativeticket(from._internal_strnativeticket());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000010u) {
      uiservices_ = from.uiservices_;
    }
    if (cached_has_bits & 0x00000020u) {
      uipsnymcertnorequest_ = from.uipsnymcertnorequest_;
    }
    if (cached_has_bits & 0x00000040u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000080u) {
      inativeltcacertlength_ = from.inativeltcacertlength_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      inativeticketlength_ = from.inativeticketlength_;
    }
    if (cached_has_bits & 0x00000200u) {
      inonce_ = from.inonce_;
    }
    if (cached_has_bits & 0x00000400u) {
      ttimestamp_ = from.ttimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgForeignTicketReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgForeignTicketReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgForeignTicketReq::CopyFrom(const msgForeignTicketReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgForeignTicketReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgForeignTicketReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  return true;
}

void msgForeignTicketReq::InternalSwap(msgForeignTicketReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strnativeltcacert_.Swap(&other->strnativeltcacert_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strnativeticket_.Swap(&other->strnativeticket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgForeignTicketReq, uipsnymcertnorequest_)
      + sizeof(msgForeignTicketReq::uipsnymcertnorequest_)
      - PROTOBUF_FIELD_OFFSET(msgForeignTicketReq, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(ireqtype_, other->ireqtype_);
  swap(inativeltcacertlength_, other->inativeltcacertlength_);
  swap(inativeticketlength_, other->inativeticketlength_);
  swap(inonce_, other->inonce_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgForeignTicketReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgVehicleAttributes::InitAsDefaultInstance() {
}
class msgVehicleAttributes::_Internal {
 public:
  using HasBits = decltype(std::declval<msgVehicleAttributes>()._has_bits_);
  static void set_has_chrole(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uiservices(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chtypeofvehicle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_chpolicyid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

msgVehicleAttributes::msgVehicleAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgVehicleAttributes)
}
msgVehicleAttributes::msgVehicleAttributes(const msgVehicleAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chrole_, &from.chrole_,
    static_cast<size_t>(reinterpret_cast<char*>(&chpolicyid_) -
    reinterpret_cast<char*>(&chrole_)) + sizeof(chpolicyid_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgVehicleAttributes)
}

void msgVehicleAttributes::SharedCtor() {
  ::memset(&chrole_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chpolicyid_) -
      reinterpret_cast<char*>(&chrole_)) + sizeof(chpolicyid_));
}

msgVehicleAttributes::~msgVehicleAttributes() {
  // @@protoc_insertion_point(destructor:interfaces.msgVehicleAttributes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgVehicleAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msgVehicleAttributes::ArenaDtor(void* object) {
  msgVehicleAttributes* _this = reinterpret_cast< msgVehicleAttributes* >(object);
  (void)_this;
}
void msgVehicleAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgVehicleAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgVehicleAttributes& msgVehicleAttributes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgVehicleAttributes_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgVehicleAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgVehicleAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&chrole_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chpolicyid_) -
        reinterpret_cast<char*>(&chrole_)) + sizeof(chpolicyid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgVehicleAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 chRole = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_chrole(&has_bits);
          chrole_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiServices = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_uiservices(&has_bits);
          uiservices_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 chTypeOfVehicle = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_chtypeofvehicle(&has_bits);
          chtypeofvehicle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 chPolicyId = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_chpolicyid(&has_bits);
          chpolicyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgVehicleAttributes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgVehicleAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 chRole = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_chrole(), target);
  }

  // required uint32 uiServices = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uiservices(), target);
  }

  // required uint32 chTypeOfVehicle = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_chtypeofvehicle(), target);
  }

  // required uint32 chPolicyId = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_chpolicyid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgVehicleAttributes)
  return target;
}

size_t msgVehicleAttributes::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgVehicleAttributes)
  size_t total_size = 0;

  if (_internal_has_chrole()) {
    // required uint32 chRole = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chrole());
  }

  if (_internal_has_uiservices()) {
    // required uint32 uiServices = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uiservices());
  }

  if (_internal_has_chtypeofvehicle()) {
    // required uint32 chTypeOfVehicle = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chtypeofvehicle());
  }

  if (_internal_has_chpolicyid()) {
    // required uint32 chPolicyId = 4 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chpolicyid());
  }

  return total_size;
}
size_t msgVehicleAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgVehicleAttributes)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 chRole = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chrole());

    // required uint32 uiServices = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uiservices());

    // required uint32 chTypeOfVehicle = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chtypeofvehicle());

    // required uint32 chPolicyId = 4 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chpolicyid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgVehicleAttributes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgVehicleAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  const msgVehicleAttributes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgVehicleAttributes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgVehicleAttributes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgVehicleAttributes)
    MergeFrom(*source);
  }
}

void msgVehicleAttributes::MergeFrom(const msgVehicleAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgVehicleAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      chrole_ = from.chrole_;
    }
    if (cached_has_bits & 0x00000002u) {
      uiservices_ = from.uiservices_;
    }
    if (cached_has_bits & 0x00000004u) {
      chtypeofvehicle_ = from.chtypeofvehicle_;
    }
    if (cached_has_bits & 0x00000008u) {
      chpolicyid_ = from.chpolicyid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgVehicleAttributes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgVehicleAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgVehicleAttributes::CopyFrom(const msgVehicleAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgVehicleAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgVehicleAttributes::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void msgVehicleAttributes::InternalSwap(msgVehicleAttributes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgVehicleAttributes, chpolicyid_)
      + sizeof(msgVehicleAttributes::chpolicyid_)
      - PROTOBUF_FIELD_OFFSET(msgVehicleAttributes, chrole_)>(
          reinterpret_cast<char*>(&chrole_),
          reinterpret_cast<char*>(&other->chrole_));
}

::PROTOBUF_NAMESPACE_ID::Metadata msgVehicleAttributes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgTicketFormat::InitAsDefaultInstance() {
  ::interfaces::_msgTicketFormat_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgTicketFormat_default_instance_._instance.get_mutable()->stvehiclerole_ = const_cast< ::interfaces::msgVehicleAttributes*>(
      ::interfaces::msgVehicleAttributes::internal_default_instance());
  ::interfaces::_msgTicketFormat_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgTicketFormat::_Internal {
 public:
  using HasBits = decltype(std::declval<msgTicketFormat>()._has_bits_);
  static void set_has_itickettype(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgTicketFormat* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_strticketserialno(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_strticketidentifiablekey(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_iltcaidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ipcaidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_uimaxnopsnymcert(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::interfaces::msgVehicleAttributes& stvehiclerole(const msgTicketFormat* msg);
  static void set_has_stvehiclerole(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bisforeignticket(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tticketstarttime(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tticketlifetime(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tpsnymstarttime(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_tpsnymexpirytime(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::interfaces::msgSignature& stsign(const msgTicketFormat* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00003feb) ^ 0x00003feb) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgTicketFormat::_Internal::stsigner(const msgTicketFormat* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgVehicleAttributes&
msgTicketFormat::_Internal::stvehiclerole(const msgTicketFormat* msg) {
  return *msg->stvehiclerole_;
}
const ::interfaces::msgSignature&
msgTicketFormat::_Internal::stsign(const msgTicketFormat* msg) {
  return *msg->stsign_;
}
msgTicketFormat::msgTicketFormat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgTicketFormat)
}
msgTicketFormat::msgTicketFormat(const msgTicketFormat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strticketserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strticketserialno()) {
    strticketserialno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strticketserialno(),
      GetArena());
  }
  strticketidentifiablekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strticketidentifiablekey()) {
    strticketidentifiablekey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strticketidentifiablekey(),
      GetArena());
  }
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_stvehiclerole()) {
    stvehiclerole_ = new ::interfaces::msgVehicleAttributes(*from.stvehiclerole_);
  } else {
    stvehiclerole_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&uimaxnopsnymcert_, &from.uimaxnopsnymcert_,
    static_cast<size_t>(reinterpret_cast<char*>(&tpsnymexpirytime_) -
    reinterpret_cast<char*>(&uimaxnopsnymcert_)) + sizeof(tpsnymexpirytime_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgTicketFormat)
}

void msgTicketFormat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgTicketFormat_Interfaces_2eproto.base);
  strticketserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strticketidentifiablekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bisforeignticket_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(bisforeignticket_));
  ipcaidrange_ = -1;
  itickettype_ = -1;
  iltcaidrange_ = -1;
  tticketstarttime_ = PROTOBUF_LONGLONG(-1);
  tticketlifetime_ = PROTOBUF_LONGLONG(-1);
  tpsnymstarttime_ = PROTOBUF_LONGLONG(-1);
  tpsnymexpirytime_ = PROTOBUF_LONGLONG(-1);
}

msgTicketFormat::~msgTicketFormat() {
  // @@protoc_insertion_point(destructor:interfaces.msgTicketFormat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgTicketFormat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strticketserialno_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strticketidentifiablekey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete stvehiclerole_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgTicketFormat::ArenaDtor(void* object) {
  msgTicketFormat* _this = reinterpret_cast< msgTicketFormat* >(object);
  (void)_this;
}
void msgTicketFormat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgTicketFormat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgTicketFormat& msgTicketFormat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgTicketFormat_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgTicketFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgTicketFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      strticketserialno_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      strticketidentifiablekey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(stvehiclerole_ != nullptr);
      stvehiclerole_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&uimaxnopsnymcert_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bisforeignticket_) -
        reinterpret_cast<char*>(&uimaxnopsnymcert_)) + sizeof(bisforeignticket_));
    ipcaidrange_ = -1;
  }
  if (cached_has_bits & 0x00003f00u) {
    itickettype_ = -1;
    iltcaidrange_ = -1;
    tticketstarttime_ = PROTOBUF_LONGLONG(-1);
    tticketlifetime_ = PROTOBUF_LONGLONG(-1);
    tpsnymstarttime_ = PROTOBUF_LONGLONG(-1);
    tpsnymexpirytime_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgTicketFormat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iTicketType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_itickettype(&has_bits);
          itickettype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strTicketSerialNo = 3 [default = ""];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_strticketserialno();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgTicketFormat.strTicketSerialNo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strTicketIdentifiableKey = 4 [default = ""];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_strticketidentifiablekey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgTicketFormat.strTicketIdentifiableKey");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iLTCAIdRange = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_iltcaidrange(&has_bits);
          iltcaidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iPCAIdRange = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ipcaidrange(&has_bits);
          ipcaidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiMaxNoPsnymCert = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_uimaxnopsnymcert(&has_bits);
          uimaxnopsnymcert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgVehicleAttributes stVehicleRole = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_stvehiclerole(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool bIsForeignTicket = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_bisforeignticket(&has_bits);
          bisforeignticket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTicketStartTime = 10 [default = -1];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_tticketstarttime(&has_bits);
          tticketstarttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTicketLifeTime = 11 [default = -1];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_tticketlifetime(&has_bits);
          tticketlifetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tPsnymStartTime = 12 [default = -1];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_tpsnymstarttime(&has_bits);
          tpsnymstarttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tPsnymExpiryTime = 13 [default = -1];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_tpsnymexpirytime(&has_bits);
          tpsnymexpirytime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgTicketFormat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgTicketFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iTicketType = 1 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_itickettype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required string strTicketSerialNo = 3 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strticketserialno().data(), static_cast<int>(this->_internal_strticketserialno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgTicketFormat.strTicketSerialNo");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_strticketserialno(), target);
  }

  // required string strTicketIdentifiableKey = 4 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strticketidentifiablekey().data(), static_cast<int>(this->_internal_strticketidentifiablekey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgTicketFormat.strTicketIdentifiableKey");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_strticketidentifiablekey(), target);
  }

  // required int32 iLTCAIdRange = 5 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_iltcaidrange(), target);
  }

  // required int32 iPCAIdRange = 6 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_ipcaidrange(), target);
  }

  // required uint32 uiMaxNoPsnymCert = 7 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_uimaxnopsnymcert(), target);
  }

  // required .interfaces.msgVehicleAttributes stVehicleRole = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::stvehiclerole(this), target, stream);
  }

  // required bool bIsForeignTicket = 9 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_bisforeignticket(), target);
  }

  // required int64 tTicketStartTime = 10 [default = -1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_tticketstarttime(), target);
  }

  // required int64 tTicketLifeTime = 11 [default = -1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_tticketlifetime(), target);
  }

  // required int64 tPsnymStartTime = 12 [default = -1];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_tpsnymstarttime(), target);
  }

  // required int64 tPsnymExpiryTime = 13 [default = -1];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_tpsnymexpirytime(), target);
  }

  // optional .interfaces.msgSignature stSign = 14;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgTicketFormat)
  return target;
}

size_t msgTicketFormat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgTicketFormat)
  size_t total_size = 0;

  if (_internal_has_strticketserialno()) {
    // required string strTicketSerialNo = 3 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticketserialno());
  }

  if (_internal_has_strticketidentifiablekey()) {
    // required string strTicketIdentifiableKey = 4 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticketidentifiablekey());
  }

  if (_internal_has_stvehiclerole()) {
    // required .interfaces.msgVehicleAttributes stVehicleRole = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stvehiclerole_);
  }

  if (_internal_has_uimaxnopsnymcert()) {
    // required uint32 uiMaxNoPsnymCert = 7 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uimaxnopsnymcert());
  }

  if (_internal_has_bisforeignticket()) {
    // required bool bIsForeignTicket = 9 [default = false];
    total_size += 1 + 1;
  }

  if (_internal_has_ipcaidrange()) {
    // required int32 iPCAIdRange = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipcaidrange());
  }

  if (_internal_has_itickettype()) {
    // required int32 iTicketType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_itickettype());
  }

  if (_internal_has_iltcaidrange()) {
    // required int32 iLTCAIdRange = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iltcaidrange());
  }

  if (_internal_has_tticketstarttime()) {
    // required int64 tTicketStartTime = 10 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tticketstarttime());
  }

  if (_internal_has_tticketlifetime()) {
    // required int64 tTicketLifeTime = 11 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tticketlifetime());
  }

  if (_internal_has_tpsnymstarttime()) {
    // required int64 tPsnymStartTime = 12 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tpsnymstarttime());
  }

  if (_internal_has_tpsnymexpirytime()) {
    // required int64 tPsnymExpiryTime = 13 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tpsnymexpirytime());
  }

  return total_size;
}
size_t msgTicketFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgTicketFormat)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00003feb) ^ 0x00003feb) == 0) {  // All required fields are present.
    // required string strTicketSerialNo = 3 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticketserialno());

    // required string strTicketIdentifiableKey = 4 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticketidentifiablekey());

    // required .interfaces.msgVehicleAttributes stVehicleRole = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stvehiclerole_);

    // required uint32 uiMaxNoPsnymCert = 7 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uimaxnopsnymcert());

    // required bool bIsForeignTicket = 9 [default = false];
    total_size += 1 + 1;

    // required int32 iPCAIdRange = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipcaidrange());

    // required int32 iTicketType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_itickettype());

    // required int32 iLTCAIdRange = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iltcaidrange());

    // required int64 tTicketStartTime = 10 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tticketstarttime());

    // required int64 tTicketLifeTime = 11 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tticketlifetime());

    // required int64 tPsnymStartTime = 12 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tpsnymstarttime());

    // required int64 tPsnymExpiryTime = 13 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tpsnymexpirytime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .interfaces.msgSignerInfo stSigner = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsigner_);
  }

  // optional .interfaces.msgSignature stSign = 14;
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsign_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgTicketFormat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgTicketFormat)
  GOOGLE_DCHECK_NE(&from, this);
  const msgTicketFormat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgTicketFormat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgTicketFormat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgTicketFormat)
    MergeFrom(*source);
  }
}

void msgTicketFormat::MergeFrom(const msgTicketFormat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgTicketFormat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strticketserialno(from._internal_strticketserialno());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_strticketidentifiablekey(from._internal_strticketidentifiablekey());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_stvehiclerole()->::interfaces::msgVehicleAttributes::MergeFrom(from._internal_stvehiclerole());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000020u) {
      uimaxnopsnymcert_ = from.uimaxnopsnymcert_;
    }
    if (cached_has_bits & 0x00000040u) {
      bisforeignticket_ = from.bisforeignticket_;
    }
    if (cached_has_bits & 0x00000080u) {
      ipcaidrange_ = from.ipcaidrange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      itickettype_ = from.itickettype_;
    }
    if (cached_has_bits & 0x00000200u) {
      iltcaidrange_ = from.iltcaidrange_;
    }
    if (cached_has_bits & 0x00000400u) {
      tticketstarttime_ = from.tticketstarttime_;
    }
    if (cached_has_bits & 0x00000800u) {
      tticketlifetime_ = from.tticketlifetime_;
    }
    if (cached_has_bits & 0x00001000u) {
      tpsnymstarttime_ = from.tpsnymstarttime_;
    }
    if (cached_has_bits & 0x00002000u) {
      tpsnymexpirytime_ = from.tpsnymexpirytime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgTicketFormat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgTicketFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgTicketFormat::CopyFrom(const msgTicketFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgTicketFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgTicketFormat::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  if (_internal_has_stvehiclerole()) {
    if (!stvehiclerole_->IsInitialized()) return false;
  }
  return true;
}

void msgTicketFormat::InternalSwap(msgTicketFormat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strticketserialno_.Swap(&other->strticketserialno_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strticketidentifiablekey_.Swap(&other->strticketidentifiablekey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgTicketFormat, bisforeignticket_)
      + sizeof(msgTicketFormat::bisforeignticket_)
      - PROTOBUF_FIELD_OFFSET(msgTicketFormat, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(ipcaidrange_, other->ipcaidrange_);
  swap(itickettype_, other->itickettype_);
  swap(iltcaidrange_, other->iltcaidrange_);
  swap(tticketstarttime_, other->tticketstarttime_);
  swap(tticketlifetime_, other->tticketlifetime_);
  swap(tpsnymstarttime_, other->tpsnymstarttime_);
  swap(tpsnymexpirytime_, other->tpsnymexpirytime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgTicketFormat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgTicketRes::InitAsDefaultInstance() {
  ::interfaces::_msgTicketRes_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgTicketRes_default_instance_._instance.get_mutable()->sterrinfo_ = const_cast< ::interfaces::msgError*>(
      ::interfaces::msgError::internal_default_instance());
  ::interfaces::_msgTicketRes_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgTicketRes::_Internal {
 public:
  using HasBits = decltype(std::declval<msgTicketRes>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgTicketRes* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_iticketsize(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_strticket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uimaxnopsnymcert(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_iltcaidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ipcaidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::interfaces::msgError& sterrinfo(const msgTicketRes* msg);
  static void set_has_sterrinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::interfaces::msgSignature& stsign(const msgTicketRes* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000007f5) ^ 0x000007f5) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgTicketRes::_Internal::stsigner(const msgTicketRes* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgError&
msgTicketRes::_Internal::sterrinfo(const msgTicketRes* msg) {
  return *msg->sterrinfo_;
}
const ::interfaces::msgSignature&
msgTicketRes::_Internal::stsign(const msgTicketRes* msg) {
  return *msg->stsign_;
}
msgTicketRes::msgTicketRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgTicketRes)
}
msgTicketRes::msgTicketRes(const msgTicketRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strticket()) {
    strticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strticket(),
      GetArena());
  }
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_sterrinfo()) {
    sterrinfo_ = new ::interfaces::msgError(*from.sterrinfo_);
  } else {
    sterrinfo_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&uimaxnopsnymcert_, &from.uimaxnopsnymcert_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&uimaxnopsnymcert_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgTicketRes)
}

void msgTicketRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgTicketRes_Interfaces_2eproto.base);
  strticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uimaxnopsnymcert_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(uimaxnopsnymcert_));
  inonce_ = -1;
  ireqtype_ = -1;
  iticketsize_ = -1;
  iltcaidrange_ = -1;
  ipcaidrange_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgTicketRes::~msgTicketRes() {
  // @@protoc_insertion_point(destructor:interfaces.msgTicketRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgTicketRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete sterrinfo_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgTicketRes::ArenaDtor(void* object) {
  msgTicketRes* _this = reinterpret_cast< msgTicketRes* >(object);
  (void)_this;
}
void msgTicketRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgTicketRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgTicketRes& msgTicketRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgTicketRes_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgTicketRes::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgTicketRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      strticket_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(sterrinfo_ != nullptr);
      sterrinfo_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    uimaxnopsnymcert_ = 0u;
    inonce_ = -1;
    ireqtype_ = -1;
    iticketsize_ = -1;
  }
  if (cached_has_bits & 0x00000700u) {
    iltcaidrange_ = -1;
    ipcaidrange_ = -1;
    ttimestamp_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgTicketRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iTicketSize = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_iticketsize(&has_bits);
          iticketsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strTicket = 4 [default = ""];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_strticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgTicketRes.strTicket");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiMaxNoPsnymCert = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_uimaxnopsnymcert(&has_bits);
          uimaxnopsnymcert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iLTCAIdRange = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_iltcaidrange(&has_bits);
          iltcaidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iPCAIdRange = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_ipcaidrange(&has_bits);
          ipcaidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 9 [default = -1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgError stErrInfo = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_sterrinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgTicketRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgTicketRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required int32 iTicketSize = 3 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_iticketsize(), target);
  }

  // required string strTicket = 4 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strticket().data(), static_cast<int>(this->_internal_strticket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgTicketRes.strTicket");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_strticket(), target);
  }

  // required uint32 uiMaxNoPsnymCert = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_uimaxnopsnymcert(), target);
  }

  // required int32 iLTCAIdRange = 6 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_iltcaidrange(), target);
  }

  // required int32 iPCAIdRange = 7 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_ipcaidrange(), target);
  }

  // required int32 iNonce = 8 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 9 [default = -1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_ttimestamp(), target);
  }

  // required .interfaces.msgError stErrInfo = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::sterrinfo(this), target, stream);
  }

  // optional .interfaces.msgSignature stSign = 11;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgTicketRes)
  return target;
}

size_t msgTicketRes::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgTicketRes)
  size_t total_size = 0;

  if (_internal_has_strticket()) {
    // required string strTicket = 4 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticket());
  }

  if (_internal_has_sterrinfo()) {
    // required .interfaces.msgError stErrInfo = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);
  }

  if (_internal_has_uimaxnopsnymcert()) {
    // required uint32 uiMaxNoPsnymCert = 5 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uimaxnopsnymcert());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_iticketsize()) {
    // required int32 iTicketSize = 3 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iticketsize());
  }

  if (_internal_has_iltcaidrange()) {
    // required int32 iLTCAIdRange = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iltcaidrange());
  }

  if (_internal_has_ipcaidrange()) {
    // required int32 iPCAIdRange = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipcaidrange());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 9 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgTicketRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgTicketRes)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000007f5) ^ 0x000007f5) == 0) {  // All required fields are present.
    // required string strTicket = 4 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticket());

    // required .interfaces.msgError stErrInfo = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);

    // required uint32 uiMaxNoPsnymCert = 5 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uimaxnopsnymcert());

    // required int32 iNonce = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iTicketSize = 3 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iticketsize());

    // required int32 iLTCAIdRange = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iltcaidrange());

    // required int32 iPCAIdRange = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipcaidrange());

    // required int64 tTimeStamp = 9 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .interfaces.msgSignerInfo stSigner = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsigner_);
  }

  // optional .interfaces.msgSignature stSign = 11;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsign_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgTicketRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgTicketRes)
  GOOGLE_DCHECK_NE(&from, this);
  const msgTicketRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgTicketRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgTicketRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgTicketRes)
    MergeFrom(*source);
  }
}

void msgTicketRes::MergeFrom(const msgTicketRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgTicketRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strticket(from._internal_strticket());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_sterrinfo()->::interfaces::msgError::MergeFrom(from._internal_sterrinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000010u) {
      uimaxnopsnymcert_ = from.uimaxnopsnymcert_;
    }
    if (cached_has_bits & 0x00000020u) {
      inonce_ = from.inonce_;
    }
    if (cached_has_bits & 0x00000040u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000080u) {
      iticketsize_ = from.iticketsize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      iltcaidrange_ = from.iltcaidrange_;
    }
    if (cached_has_bits & 0x00000200u) {
      ipcaidrange_ = from.ipcaidrange_;
    }
    if (cached_has_bits & 0x00000400u) {
      ttimestamp_ = from.ttimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgTicketRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgTicketRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgTicketRes::CopyFrom(const msgTicketRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgTicketRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgTicketRes::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  if (_internal_has_sterrinfo()) {
    if (!sterrinfo_->IsInitialized()) return false;
  }
  return true;
}

void msgTicketRes::InternalSwap(msgTicketRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strticket_.Swap(&other->strticket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgTicketRes, uimaxnopsnymcert_)
      + sizeof(msgTicketRes::uimaxnopsnymcert_)
      - PROTOBUF_FIELD_OFFSET(msgTicketRes, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(inonce_, other->inonce_);
  swap(ireqtype_, other->ireqtype_);
  swap(iticketsize_, other->iticketsize_);
  swap(iltcaidrange_, other->iltcaidrange_);
  swap(ipcaidrange_, other->ipcaidrange_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgTicketRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgToBeSignedCSR::InitAsDefaultInstance() {
  ::interfaces::_msgToBeSignedCSR_default_instance_._instance.get_mutable()->typespecificdata_ = const_cast< ::interfaces::msgCertSpecificData*>(
      ::interfaces::msgCertSpecificData::internal_default_instance());
  ::interfaces::_msgToBeSignedCSR_default_instance_._instance.get_mutable()->stecpsnympublickey_ = const_cast< ::interfaces::msgECPublicKey*>(
      ::interfaces::msgECPublicKey::internal_default_instance());
}
class msgToBeSignedCSR::_Internal {
 public:
  using HasBits = decltype(std::declval<msgToBeSignedCSR>()._has_bits_);
  static void set_has_csrversion(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_subjecttype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_requesttype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::interfaces::msgCertSpecificData& typespecificdata(const msgToBeSignedCSR* msg);
  static void set_has_typespecificdata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::interfaces::msgECPublicKey& stecpsnympublickey(const msgToBeSignedCSR* msg);
  static void set_has_stecpsnympublickey(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001e) ^ 0x0000001e) != 0;
  }
};

const ::interfaces::msgCertSpecificData&
msgToBeSignedCSR::_Internal::typespecificdata(const msgToBeSignedCSR* msg) {
  return *msg->typespecificdata_;
}
const ::interfaces::msgECPublicKey&
msgToBeSignedCSR::_Internal::stecpsnympublickey(const msgToBeSignedCSR* msg) {
  return *msg->stecpsnympublickey_;
}
msgToBeSignedCSR::msgToBeSignedCSR(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgToBeSignedCSR)
}
msgToBeSignedCSR::msgToBeSignedCSR(const msgToBeSignedCSR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_typespecificdata()) {
    typespecificdata_ = new ::interfaces::msgCertSpecificData(*from.typespecificdata_);
  } else {
    typespecificdata_ = nullptr;
  }
  if (from._internal_has_stecpsnympublickey()) {
    stecpsnympublickey_ = new ::interfaces::msgECPublicKey(*from.stecpsnympublickey_);
  } else {
    stecpsnympublickey_ = nullptr;
  }
  ::memcpy(&csrversion_, &from.csrversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&requesttype_) -
    reinterpret_cast<char*>(&csrversion_)) + sizeof(requesttype_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgToBeSignedCSR)
}

void msgToBeSignedCSR::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgToBeSignedCSR_Interfaces_2eproto.base);
  ::memset(&typespecificdata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requesttype_) -
      reinterpret_cast<char*>(&typespecificdata_)) + sizeof(requesttype_));
}

msgToBeSignedCSR::~msgToBeSignedCSR() {
  // @@protoc_insertion_point(destructor:interfaces.msgToBeSignedCSR)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgToBeSignedCSR::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete typespecificdata_;
  if (this != internal_default_instance()) delete stecpsnympublickey_;
}

void msgToBeSignedCSR::ArenaDtor(void* object) {
  msgToBeSignedCSR* _this = reinterpret_cast< msgToBeSignedCSR* >(object);
  (void)_this;
}
void msgToBeSignedCSR::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgToBeSignedCSR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgToBeSignedCSR& msgToBeSignedCSR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgToBeSignedCSR_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgToBeSignedCSR::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgToBeSignedCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(typespecificdata_ != nullptr);
      typespecificdata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stecpsnympublickey_ != nullptr);
      stecpsnympublickey_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&csrversion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&requesttype_) -
        reinterpret_cast<char*>(&csrversion_)) + sizeof(requesttype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgToBeSignedCSR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 csrVersion = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_csrversion(&has_bits);
          csrversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgSubType.SubjectType subjectType = 2 [default = wsa_ca1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::interfaces::msgSubType_SubjectType_IsValid(val))) {
            _internal_set_subjecttype(static_cast<::interfaces::msgSubType_SubjectType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgRequestScopeType.RequestScopeType requestType = 3 [default = specifiedInRequest];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::interfaces::msgRequestScopeType_RequestScopeType_IsValid(val))) {
            _internal_set_requesttype(static_cast<::interfaces::msgRequestScopeType_RequestScopeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgCertSpecificData typeSpecificData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_typespecificdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgECPublicKey stECPsnymPublicKey = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stecpsnympublickey(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgToBeSignedCSR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgToBeSignedCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 csrVersion = 1 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_csrversion(), target);
  }

  // required .interfaces.msgSubType.SubjectType subjectType = 2 [default = wsa_ca1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_subjecttype(), target);
  }

  // required .interfaces.msgRequestScopeType.RequestScopeType requestType = 3 [default = specifiedInRequest];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_requesttype(), target);
  }

  // optional .interfaces.msgCertSpecificData typeSpecificData = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::typespecificdata(this), target, stream);
  }

  // required .interfaces.msgECPublicKey stECPsnymPublicKey = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::stecpsnympublickey(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgToBeSignedCSR)
  return target;
}

size_t msgToBeSignedCSR::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgToBeSignedCSR)
  size_t total_size = 0;

  if (_internal_has_stecpsnympublickey()) {
    // required .interfaces.msgECPublicKey stECPsnymPublicKey = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stecpsnympublickey_);
  }

  if (_internal_has_csrversion()) {
    // required uint32 csrVersion = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_csrversion());
  }

  if (_internal_has_subjecttype()) {
    // required .interfaces.msgSubType.SubjectType subjectType = 2 [default = wsa_ca1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_subjecttype());
  }

  if (_internal_has_requesttype()) {
    // required .interfaces.msgRequestScopeType.RequestScopeType requestType = 3 [default = specifiedInRequest];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_requesttype());
  }

  return total_size;
}
size_t msgToBeSignedCSR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgToBeSignedCSR)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001e) ^ 0x0000001e) == 0) {  // All required fields are present.
    // required .interfaces.msgECPublicKey stECPsnymPublicKey = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stecpsnympublickey_);

    // required uint32 csrVersion = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_csrversion());

    // required .interfaces.msgSubType.SubjectType subjectType = 2 [default = wsa_ca1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_subjecttype());

    // required .interfaces.msgRequestScopeType.RequestScopeType requestType = 3 [default = specifiedInRequest];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_requesttype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .interfaces.msgCertSpecificData typeSpecificData = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *typespecificdata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgToBeSignedCSR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgToBeSignedCSR)
  GOOGLE_DCHECK_NE(&from, this);
  const msgToBeSignedCSR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgToBeSignedCSR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgToBeSignedCSR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgToBeSignedCSR)
    MergeFrom(*source);
  }
}

void msgToBeSignedCSR::MergeFrom(const msgToBeSignedCSR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgToBeSignedCSR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_typespecificdata()->::interfaces::msgCertSpecificData::MergeFrom(from._internal_typespecificdata());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stecpsnympublickey()->::interfaces::msgECPublicKey::MergeFrom(from._internal_stecpsnympublickey());
    }
    if (cached_has_bits & 0x00000004u) {
      csrversion_ = from.csrversion_;
    }
    if (cached_has_bits & 0x00000008u) {
      subjecttype_ = from.subjecttype_;
    }
    if (cached_has_bits & 0x00000010u) {
      requesttype_ = from.requesttype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgToBeSignedCSR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgToBeSignedCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgToBeSignedCSR::CopyFrom(const msgToBeSignedCSR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgToBeSignedCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgToBeSignedCSR::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_typespecificdata()) {
    if (!typespecificdata_->IsInitialized()) return false;
  }
  if (_internal_has_stecpsnympublickey()) {
    if (!stecpsnympublickey_->IsInitialized()) return false;
  }
  return true;
}

void msgToBeSignedCSR::InternalSwap(msgToBeSignedCSR* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgToBeSignedCSR, requesttype_)
      + sizeof(msgToBeSignedCSR::requesttype_)
      - PROTOBUF_FIELD_OFFSET(msgToBeSignedCSR, typespecificdata_)>(
          reinterpret_cast<char*>(&typespecificdata_),
          reinterpret_cast<char*>(&other->typespecificdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata msgToBeSignedCSR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgWAVECertificateRequest::InitAsDefaultInstance() {
  ::interfaces::_msgWAVECertificateRequest_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgWAVECertificateRequest_default_instance_._instance.get_mutable()->unsignedcsr_ = const_cast< ::interfaces::msgToBeSignedCSR*>(
      ::interfaces::msgToBeSignedCSR::internal_default_instance());
  ::interfaces::_msgWAVECertificateRequest_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgWAVECertificateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<msgWAVECertificateRequest>()._has_bits_);
  static const ::interfaces::msgSignerInfo& stsigner(const msgWAVECertificateRequest* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::interfaces::msgToBeSignedCSR& unsignedcsr(const msgWAVECertificateRequest* msg);
  static void set_has_unsignedcsr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::interfaces::msgSignature& stsign(const msgWAVECertificateRequest* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgWAVECertificateRequest::_Internal::stsigner(const msgWAVECertificateRequest* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgToBeSignedCSR&
msgWAVECertificateRequest::_Internal::unsignedcsr(const msgWAVECertificateRequest* msg) {
  return *msg->unsignedcsr_;
}
const ::interfaces::msgSignature&
msgWAVECertificateRequest::_Internal::stsign(const msgWAVECertificateRequest* msg) {
  return *msg->stsign_;
}
msgWAVECertificateRequest::msgWAVECertificateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgWAVECertificateRequest)
}
msgWAVECertificateRequest::msgWAVECertificateRequest(const msgWAVECertificateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_unsignedcsr()) {
    unsignedcsr_ = new ::interfaces::msgToBeSignedCSR(*from.unsignedcsr_);
  } else {
    unsignedcsr_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:interfaces.msgWAVECertificateRequest)
}

void msgWAVECertificateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgWAVECertificateRequest_Interfaces_2eproto.base);
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stsign_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(stsign_));
}

msgWAVECertificateRequest::~msgWAVECertificateRequest() {
  // @@protoc_insertion_point(destructor:interfaces.msgWAVECertificateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgWAVECertificateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete unsignedcsr_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgWAVECertificateRequest::ArenaDtor(void* object) {
  msgWAVECertificateRequest* _this = reinterpret_cast< msgWAVECertificateRequest* >(object);
  (void)_this;
}
void msgWAVECertificateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgWAVECertificateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgWAVECertificateRequest& msgWAVECertificateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgWAVECertificateRequest_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgWAVECertificateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgWAVECertificateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(unsignedcsr_ != nullptr);
      unsignedcsr_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgWAVECertificateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .interfaces.msgSignerInfo stSigner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgToBeSignedCSR unsignedCsr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_unsignedcsr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgWAVECertificateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgWAVECertificateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .interfaces.msgSignerInfo stSigner = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stsigner(this), target, stream);
  }

  // required .interfaces.msgToBeSignedCSR unsignedCsr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::unsignedcsr(this), target, stream);
  }

  // optional .interfaces.msgSignature stSign = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgWAVECertificateRequest)
  return target;
}

size_t msgWAVECertificateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgWAVECertificateRequest)
  size_t total_size = 0;

  // required .interfaces.msgToBeSignedCSR unsignedCsr = 2;
  if (_internal_has_unsignedcsr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unsignedcsr_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .interfaces.msgSignerInfo stSigner = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsigner_);
  }

  // optional .interfaces.msgSignature stSign = 3;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsign_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgWAVECertificateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgWAVECertificateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const msgWAVECertificateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgWAVECertificateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgWAVECertificateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgWAVECertificateRequest)
    MergeFrom(*source);
  }
}

void msgWAVECertificateRequest::MergeFrom(const msgWAVECertificateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgWAVECertificateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_unsignedcsr()->::interfaces::msgToBeSignedCSR::MergeFrom(from._internal_unsignedcsr());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
  }
}

void msgWAVECertificateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgWAVECertificateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgWAVECertificateRequest::CopyFrom(const msgWAVECertificateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgWAVECertificateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgWAVECertificateRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  if (_internal_has_unsignedcsr()) {
    if (!unsignedcsr_->IsInitialized()) return false;
  }
  return true;
}

void msgWAVECertificateRequest::InternalSwap(msgWAVECertificateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgWAVECertificateRequest, stsign_)
      + sizeof(msgWAVECertificateRequest::stsign_)
      - PROTOBUF_FIELD_OFFSET(msgWAVECertificateRequest, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
}

::PROTOBUF_NAMESPACE_ID::Metadata msgWAVECertificateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgPsnymCertReq_V2PCA::InitAsDefaultInstance() {
}
class msgPsnymCertReq_V2PCA::_Internal {
 public:
  using HasBits = decltype(std::declval<msgPsnymCertReq_V2PCA>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_iticketsize(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_strticket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_iltcaidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ipcaidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ilocation(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_uipsnymcertno(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001ff) ^ 0x000001ff) != 0;
  }
};

msgPsnymCertReq_V2PCA::msgPsnymCertReq_V2PCA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pstpsnymcertreq_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgPsnymCertReq_V2PCA)
}
msgPsnymCertReq_V2PCA::msgPsnymCertReq_V2PCA(const msgPsnymCertReq_V2PCA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pstpsnymcertreq_(from.pstpsnymcertreq_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strticket()) {
    strticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strticket(),
      GetArena());
  }
  ::memcpy(&uipsnymcertno_, &from.uipsnymcertno_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&uipsnymcertno_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgPsnymCertReq_V2PCA)
}

void msgPsnymCertReq_V2PCA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgPsnymCertReq_V2PCA_Interfaces_2eproto.base);
  strticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uipsnymcertno_ = 0u;
  ireqtype_ = -1;
  iticketsize_ = -1;
  iltcaidrange_ = -1;
  ipcaidrange_ = -1;
  ilocation_ = -1;
  inonce_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgPsnymCertReq_V2PCA::~msgPsnymCertReq_V2PCA() {
  // @@protoc_insertion_point(destructor:interfaces.msgPsnymCertReq_V2PCA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgPsnymCertReq_V2PCA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msgPsnymCertReq_V2PCA::ArenaDtor(void* object) {
  msgPsnymCertReq_V2PCA* _this = reinterpret_cast< msgPsnymCertReq_V2PCA* >(object);
  (void)_this;
}
void msgPsnymCertReq_V2PCA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgPsnymCertReq_V2PCA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgPsnymCertReq_V2PCA& msgPsnymCertReq_V2PCA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgPsnymCertReq_V2PCA_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgPsnymCertReq_V2PCA::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgPsnymCertReq_V2PCA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pstpsnymcertreq_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    strticket_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    uipsnymcertno_ = 0u;
    ireqtype_ = -1;
    iticketsize_ = -1;
    iltcaidrange_ = -1;
    ipcaidrange_ = -1;
    ilocation_ = -1;
    inonce_ = -1;
  }
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgPsnymCertReq_V2PCA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iTicketSize = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_iticketsize(&has_bits);
          iticketsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strTicket = 3 [default = ""];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_strticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgPsnymCertReq_V2PCA.strTicket");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iLTCAIdRange = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_iltcaidrange(&has_bits);
          iltcaidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iPCAIdRange = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ipcaidrange(&has_bits);
          ipcaidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iLocation = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ilocation(&has_bits);
          ilocation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiPsnymCertNo = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_uipsnymcertno(&has_bits);
          uipsnymcertno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .interfaces.msgWAVECertificateRequest pstPsnymCertReq = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pstpsnymcertreq(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 9 [default = -1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 10 [default = -1];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgPsnymCertReq_V2PCA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgPsnymCertReq_V2PCA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // required int32 iTicketSize = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_iticketsize(), target);
  }

  // required string strTicket = 3 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strticket().data(), static_cast<int>(this->_internal_strticket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgPsnymCertReq_V2PCA.strTicket");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_strticket(), target);
  }

  // required int32 iLTCAIdRange = 4 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_iltcaidrange(), target);
  }

  // required int32 iPCAIdRange = 5 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_ipcaidrange(), target);
  }

  // required int32 iLocation = 6 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_ilocation(), target);
  }

  // required uint32 uiPsnymCertNo = 7 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_uipsnymcertno(), target);
  }

  // repeated .interfaces.msgWAVECertificateRequest pstPsnymCertReq = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pstpsnymcertreq_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_pstpsnymcertreq(i), target, stream);
  }

  // required int32 iNonce = 9 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 10 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_ttimestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgPsnymCertReq_V2PCA)
  return target;
}

size_t msgPsnymCertReq_V2PCA::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgPsnymCertReq_V2PCA)
  size_t total_size = 0;

  if (_internal_has_strticket()) {
    // required string strTicket = 3 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticket());
  }

  if (_internal_has_uipsnymcertno()) {
    // required uint32 uiPsnymCertNo = 7 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uipsnymcertno());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_iticketsize()) {
    // required int32 iTicketSize = 2 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iticketsize());
  }

  if (_internal_has_iltcaidrange()) {
    // required int32 iLTCAIdRange = 4 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iltcaidrange());
  }

  if (_internal_has_ipcaidrange()) {
    // required int32 iPCAIdRange = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipcaidrange());
  }

  if (_internal_has_ilocation()) {
    // required int32 iLocation = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ilocation());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 9 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 10 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgPsnymCertReq_V2PCA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgPsnymCertReq_V2PCA)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required string strTicket = 3 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticket());

    // required uint32 uiPsnymCertNo = 7 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uipsnymcertno());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iTicketSize = 2 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iticketsize());

    // required int32 iLTCAIdRange = 4 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iltcaidrange());

    // required int32 iPCAIdRange = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipcaidrange());

    // required int32 iLocation = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ilocation());

    // required int32 iNonce = 9 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int64 tTimeStamp = 10 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .interfaces.msgWAVECertificateRequest pstPsnymCertReq = 8;
  total_size += 1UL * this->_internal_pstpsnymcertreq_size();
  for (const auto& msg : this->pstpsnymcertreq_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgPsnymCertReq_V2PCA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgPsnymCertReq_V2PCA)
  GOOGLE_DCHECK_NE(&from, this);
  const msgPsnymCertReq_V2PCA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgPsnymCertReq_V2PCA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgPsnymCertReq_V2PCA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgPsnymCertReq_V2PCA)
    MergeFrom(*source);
  }
}

void msgPsnymCertReq_V2PCA::MergeFrom(const msgPsnymCertReq_V2PCA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgPsnymCertReq_V2PCA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pstpsnymcertreq_.MergeFrom(from.pstpsnymcertreq_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strticket(from._internal_strticket());
    }
    if (cached_has_bits & 0x00000002u) {
      uipsnymcertno_ = from.uipsnymcertno_;
    }
    if (cached_has_bits & 0x00000004u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000008u) {
      iticketsize_ = from.iticketsize_;
    }
    if (cached_has_bits & 0x00000010u) {
      iltcaidrange_ = from.iltcaidrange_;
    }
    if (cached_has_bits & 0x00000020u) {
      ipcaidrange_ = from.ipcaidrange_;
    }
    if (cached_has_bits & 0x00000040u) {
      ilocation_ = from.ilocation_;
    }
    if (cached_has_bits & 0x00000080u) {
      inonce_ = from.inonce_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_ttimestamp(from._internal_ttimestamp());
  }
}

void msgPsnymCertReq_V2PCA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgPsnymCertReq_V2PCA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgPsnymCertReq_V2PCA::CopyFrom(const msgPsnymCertReq_V2PCA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgPsnymCertReq_V2PCA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgPsnymCertReq_V2PCA::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pstpsnymcertreq_)) return false;
  return true;
}

void msgPsnymCertReq_V2PCA::InternalSwap(msgPsnymCertReq_V2PCA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pstpsnymcertreq_.InternalSwap(&other->pstpsnymcertreq_);
  strticket_.Swap(&other->strticket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(uipsnymcertno_, other->uipsnymcertno_);
  swap(ireqtype_, other->ireqtype_);
  swap(iticketsize_, other->iticketsize_);
  swap(iltcaidrange_, other->iltcaidrange_);
  swap(ipcaidrange_, other->ipcaidrange_);
  swap(ilocation_, other->ilocation_);
  swap(inonce_, other->inonce_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgPsnymCertReq_V2PCA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgPsnymCertRes_PCA2V::InitAsDefaultInstance() {
  ::interfaces::_msgPsnymCertRes_PCA2V_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgPsnymCertRes_PCA2V_default_instance_._instance.get_mutable()->sterrinfo_ = const_cast< ::interfaces::msgError*>(
      ::interfaces::msgError::internal_default_instance());
  ::interfaces::_msgPsnymCertRes_PCA2V_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgPsnymCertRes_PCA2V::_Internal {
 public:
  using HasBits = decltype(std::declval<msgPsnymCertRes_PCA2V>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgPsnymCertRes_PCA2V* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_strreqidentification(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_iltcaidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ipcaidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_uipsnymcertno(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::interfaces::msgError& sterrinfo(const msgPsnymCertRes_PCA2V* msg);
  static void set_has_sterrinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::interfaces::msgSignature& stsign(const msgPsnymCertRes_PCA2V* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000003f5) ^ 0x000003f5) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgPsnymCertRes_PCA2V::_Internal::stsigner(const msgPsnymCertRes_PCA2V* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgError&
msgPsnymCertRes_PCA2V::_Internal::sterrinfo(const msgPsnymCertRes_PCA2V* msg) {
  return *msg->sterrinfo_;
}
const ::interfaces::msgSignature&
msgPsnymCertRes_PCA2V::_Internal::stsign(const msgPsnymCertRes_PCA2V* msg) {
  return *msg->stsign_;
}
msgPsnymCertRes_PCA2V::msgPsnymCertRes_PCA2V(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stpsnymcert_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgPsnymCertRes_PCA2V)
}
msgPsnymCertRes_PCA2V::msgPsnymCertRes_PCA2V(const msgPsnymCertRes_PCA2V& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      stpsnymcert_(from.stpsnymcert_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strreqidentification_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strreqidentification()) {
    strreqidentification_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strreqidentification(),
      GetArena());
  }
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_sterrinfo()) {
    sterrinfo_ = new ::interfaces::msgError(*from.sterrinfo_);
  } else {
    sterrinfo_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&uipsnymcertno_, &from.uipsnymcertno_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&uipsnymcertno_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgPsnymCertRes_PCA2V)
}

void msgPsnymCertRes_PCA2V::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgPsnymCertRes_PCA2V_Interfaces_2eproto.base);
  strreqidentification_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uipsnymcertno_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(uipsnymcertno_));
  ireqtype_ = -1;
  iltcaidrange_ = -1;
  ipcaidrange_ = -1;
  inonce_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgPsnymCertRes_PCA2V::~msgPsnymCertRes_PCA2V() {
  // @@protoc_insertion_point(destructor:interfaces.msgPsnymCertRes_PCA2V)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgPsnymCertRes_PCA2V::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strreqidentification_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete sterrinfo_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgPsnymCertRes_PCA2V::ArenaDtor(void* object) {
  msgPsnymCertRes_PCA2V* _this = reinterpret_cast< msgPsnymCertRes_PCA2V* >(object);
  (void)_this;
}
void msgPsnymCertRes_PCA2V::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgPsnymCertRes_PCA2V::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgPsnymCertRes_PCA2V& msgPsnymCertRes_PCA2V::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgPsnymCertRes_PCA2V_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgPsnymCertRes_PCA2V::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgPsnymCertRes_PCA2V)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stpsnymcert_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      strreqidentification_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(sterrinfo_ != nullptr);
      sterrinfo_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    uipsnymcertno_ = 0u;
    ireqtype_ = -1;
    iltcaidrange_ = -1;
    ipcaidrange_ = -1;
  }
  if (cached_has_bits & 0x00000300u) {
    inonce_ = -1;
    ttimestamp_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgPsnymCertRes_PCA2V::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strReqIdentification = 3 [default = ""];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_strreqidentification();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgPsnymCertRes_PCA2V.strReqIdentification");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iLTCAIdRange = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_iltcaidrange(&has_bits);
          iltcaidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iPCAIdRange = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ipcaidrange(&has_bits);
          ipcaidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiPsnymCertNo = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_uipsnymcertno(&has_bits);
          uipsnymcertno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .interfaces.msgPsnymCertFormat stPsnymCert = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stpsnymcert(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 9 [default = -1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgError stErrInfo = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_sterrinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgPsnymCertRes_PCA2V::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgPsnymCertRes_PCA2V)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required string strReqIdentification = 3 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strreqidentification().data(), static_cast<int>(this->_internal_strreqidentification().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgPsnymCertRes_PCA2V.strReqIdentification");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_strreqidentification(), target);
  }

  // required int32 iLTCAIdRange = 4 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_iltcaidrange(), target);
  }

  // required int32 iPCAIdRange = 5 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_ipcaidrange(), target);
  }

  // required uint32 uiPsnymCertNo = 6 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_uipsnymcertno(), target);
  }

  // repeated .interfaces.msgPsnymCertFormat stPsnymCert = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stpsnymcert_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_stpsnymcert(i), target, stream);
  }

  // required int32 iNonce = 8 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 9 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_ttimestamp(), target);
  }

  // required .interfaces.msgError stErrInfo = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::sterrinfo(this), target, stream);
  }

  // optional .interfaces.msgSignature stSign = 11;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgPsnymCertRes_PCA2V)
  return target;
}

size_t msgPsnymCertRes_PCA2V::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgPsnymCertRes_PCA2V)
  size_t total_size = 0;

  if (_internal_has_strreqidentification()) {
    // required string strReqIdentification = 3 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strreqidentification());
  }

  if (_internal_has_sterrinfo()) {
    // required .interfaces.msgError stErrInfo = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);
  }

  if (_internal_has_uipsnymcertno()) {
    // required uint32 uiPsnymCertNo = 6 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uipsnymcertno());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_iltcaidrange()) {
    // required int32 iLTCAIdRange = 4 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iltcaidrange());
  }

  if (_internal_has_ipcaidrange()) {
    // required int32 iPCAIdRange = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipcaidrange());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 9 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgPsnymCertRes_PCA2V::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgPsnymCertRes_PCA2V)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000003f5) ^ 0x000003f5) == 0) {  // All required fields are present.
    // required string strReqIdentification = 3 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strreqidentification());

    // required .interfaces.msgError stErrInfo = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);

    // required uint32 uiPsnymCertNo = 6 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uipsnymcertno());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iLTCAIdRange = 4 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iltcaidrange());

    // required int32 iPCAIdRange = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipcaidrange());

    // required int32 iNonce = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int64 tTimeStamp = 9 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .interfaces.msgPsnymCertFormat stPsnymCert = 7;
  total_size += 1UL * this->_internal_stpsnymcert_size();
  for (const auto& msg : this->stpsnymcert_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsigner_);
  }

  // optional .interfaces.msgSignature stSign = 11;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsign_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgPsnymCertRes_PCA2V::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgPsnymCertRes_PCA2V)
  GOOGLE_DCHECK_NE(&from, this);
  const msgPsnymCertRes_PCA2V* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgPsnymCertRes_PCA2V>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgPsnymCertRes_PCA2V)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgPsnymCertRes_PCA2V)
    MergeFrom(*source);
  }
}

void msgPsnymCertRes_PCA2V::MergeFrom(const msgPsnymCertRes_PCA2V& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgPsnymCertRes_PCA2V)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stpsnymcert_.MergeFrom(from.stpsnymcert_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strreqidentification(from._internal_strreqidentification());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_sterrinfo()->::interfaces::msgError::MergeFrom(from._internal_sterrinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000010u) {
      uipsnymcertno_ = from.uipsnymcertno_;
    }
    if (cached_has_bits & 0x00000020u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000040u) {
      iltcaidrange_ = from.iltcaidrange_;
    }
    if (cached_has_bits & 0x00000080u) {
      ipcaidrange_ = from.ipcaidrange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      inonce_ = from.inonce_;
    }
    if (cached_has_bits & 0x00000200u) {
      ttimestamp_ = from.ttimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgPsnymCertRes_PCA2V::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgPsnymCertRes_PCA2V)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgPsnymCertRes_PCA2V::CopyFrom(const msgPsnymCertRes_PCA2V& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgPsnymCertRes_PCA2V)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgPsnymCertRes_PCA2V::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(stpsnymcert_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  if (_internal_has_sterrinfo()) {
    if (!sterrinfo_->IsInitialized()) return false;
  }
  return true;
}

void msgPsnymCertRes_PCA2V::InternalSwap(msgPsnymCertRes_PCA2V* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stpsnymcert_.InternalSwap(&other->stpsnymcert_);
  strreqidentification_.Swap(&other->strreqidentification_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgPsnymCertRes_PCA2V, uipsnymcertno_)
      + sizeof(msgPsnymCertRes_PCA2V::uipsnymcertno_)
      - PROTOBUF_FIELD_OFFSET(msgPsnymCertRes_PCA2V, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(ireqtype_, other->ireqtype_);
  swap(iltcaidrange_, other->iltcaidrange_);
  swap(ipcaidrange_, other->ipcaidrange_);
  swap(inonce_, other->inonce_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgPsnymCertRes_PCA2V::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgPsnymCertAck_V2PCA::InitAsDefaultInstance() {
  ::interfaces::_msgPsnymCertAck_V2PCA_default_instance_._instance.get_mutable()->sterrinfo_ = const_cast< ::interfaces::msgError*>(
      ::interfaces::msgError::internal_default_instance());
}
class msgPsnymCertAck_V2PCA::_Internal {
 public:
  using HasBits = decltype(std::declval<msgPsnymCertAck_V2PCA>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::interfaces::msgError& sterrinfo(const msgPsnymCertAck_V2PCA* msg);
  static void set_has_sterrinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::interfaces::msgError&
msgPsnymCertAck_V2PCA::_Internal::sterrinfo(const msgPsnymCertAck_V2PCA* msg) {
  return *msg->sterrinfo_;
}
msgPsnymCertAck_V2PCA::msgPsnymCertAck_V2PCA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgPsnymCertAck_V2PCA)
}
msgPsnymCertAck_V2PCA::msgPsnymCertAck_V2PCA(const msgPsnymCertAck_V2PCA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sterrinfo()) {
    sterrinfo_ = new ::interfaces::msgError(*from.sterrinfo_);
  } else {
    sterrinfo_ = nullptr;
  }
  ::memcpy(&ireqtype_, &from.ireqtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&ireqtype_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgPsnymCertAck_V2PCA)
}

void msgPsnymCertAck_V2PCA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgPsnymCertAck_V2PCA_Interfaces_2eproto.base);
  sterrinfo_ = nullptr;
  ireqtype_ = -1;
  inonce_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgPsnymCertAck_V2PCA::~msgPsnymCertAck_V2PCA() {
  // @@protoc_insertion_point(destructor:interfaces.msgPsnymCertAck_V2PCA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgPsnymCertAck_V2PCA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sterrinfo_;
}

void msgPsnymCertAck_V2PCA::ArenaDtor(void* object) {
  msgPsnymCertAck_V2PCA* _this = reinterpret_cast< msgPsnymCertAck_V2PCA* >(object);
  (void)_this;
}
void msgPsnymCertAck_V2PCA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgPsnymCertAck_V2PCA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgPsnymCertAck_V2PCA& msgPsnymCertAck_V2PCA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgPsnymCertAck_V2PCA_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgPsnymCertAck_V2PCA::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgPsnymCertAck_V2PCA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sterrinfo_ != nullptr);
      sterrinfo_->Clear();
    }
    ireqtype_ = -1;
    inonce_ = -1;
    ttimestamp_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgPsnymCertAck_V2PCA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgError stErrInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sterrinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgPsnymCertAck_V2PCA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgPsnymCertAck_V2PCA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // required int32 iNonce = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 3 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_ttimestamp(), target);
  }

  // required .interfaces.msgError stErrInfo = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::sterrinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgPsnymCertAck_V2PCA)
  return target;
}

size_t msgPsnymCertAck_V2PCA::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgPsnymCertAck_V2PCA)
  size_t total_size = 0;

  if (_internal_has_sterrinfo()) {
    // required .interfaces.msgError stErrInfo = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 2 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 3 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgPsnymCertAck_V2PCA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgPsnymCertAck_V2PCA)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .interfaces.msgError stErrInfo = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iNonce = 2 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int64 tTimeStamp = 3 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgPsnymCertAck_V2PCA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgPsnymCertAck_V2PCA)
  GOOGLE_DCHECK_NE(&from, this);
  const msgPsnymCertAck_V2PCA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgPsnymCertAck_V2PCA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgPsnymCertAck_V2PCA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgPsnymCertAck_V2PCA)
    MergeFrom(*source);
  }
}

void msgPsnymCertAck_V2PCA::MergeFrom(const msgPsnymCertAck_V2PCA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgPsnymCertAck_V2PCA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sterrinfo()->::interfaces::msgError::MergeFrom(from._internal_sterrinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000004u) {
      inonce_ = from.inonce_;
    }
    if (cached_has_bits & 0x00000008u) {
      ttimestamp_ = from.ttimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgPsnymCertAck_V2PCA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgPsnymCertAck_V2PCA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgPsnymCertAck_V2PCA::CopyFrom(const msgPsnymCertAck_V2PCA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgPsnymCertAck_V2PCA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgPsnymCertAck_V2PCA::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_sterrinfo()) {
    if (!sterrinfo_->IsInitialized()) return false;
  }
  return true;
}

void msgPsnymCertAck_V2PCA::InternalSwap(msgPsnymCertAck_V2PCA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sterrinfo_, other->sterrinfo_);
  swap(ireqtype_, other->ireqtype_);
  swap(inonce_, other->inonce_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgPsnymCertAck_V2PCA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgPsnymCRLFormat::InitAsDefaultInstance() {
}
class msgPsnymCRLFormat::_Internal {
 public:
  using HasBits = decltype(std::declval<msgPsnymCRLFormat>()._has_bits_);
  static void set_has_strpsnymcrlserialno(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uirevokedpsnymcertno(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

msgPsnymCRLFormat::msgPsnymCRLFormat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  strrevokedpsnymcertserialno_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgPsnymCRLFormat)
}
msgPsnymCRLFormat::msgPsnymCRLFormat(const msgPsnymCRLFormat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      strrevokedpsnymcertserialno_(from.strrevokedpsnymcertserialno_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strpsnymcrlserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strpsnymcrlserialno()) {
    strpsnymcrlserialno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strpsnymcrlserialno(),
      GetArena());
  }
  ::memcpy(&uirevokedpsnymcertno_, &from.uirevokedpsnymcertno_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&uirevokedpsnymcertno_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgPsnymCRLFormat)
}

void msgPsnymCRLFormat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgPsnymCRLFormat_Interfaces_2eproto.base);
  strpsnymcrlserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uirevokedpsnymcertno_ = 0u;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgPsnymCRLFormat::~msgPsnymCRLFormat() {
  // @@protoc_insertion_point(destructor:interfaces.msgPsnymCRLFormat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgPsnymCRLFormat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strpsnymcrlserialno_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msgPsnymCRLFormat::ArenaDtor(void* object) {
  msgPsnymCRLFormat* _this = reinterpret_cast< msgPsnymCRLFormat* >(object);
  (void)_this;
}
void msgPsnymCRLFormat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgPsnymCRLFormat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgPsnymCRLFormat& msgPsnymCRLFormat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgPsnymCRLFormat_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgPsnymCRLFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgPsnymCRLFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strrevokedpsnymcertserialno_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    strpsnymcrlserialno_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    uirevokedpsnymcertno_ = 0u;
    ttimestamp_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgPsnymCRLFormat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string strPsnymCRLSerialNo = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_strpsnymcrlserialno();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgPsnymCRLFormat.strPsnymCRLSerialNo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiRevokedPsnymCertNo = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_uirevokedpsnymcertno(&has_bits);
          uirevokedpsnymcertno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string strRevokedPsnymCertSerialNo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_strrevokedpsnymcertserialno();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgPsnymCRLFormat.strRevokedPsnymCertSerialNo");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgPsnymCRLFormat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgPsnymCRLFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string strPsnymCRLSerialNo = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strpsnymcrlserialno().data(), static_cast<int>(this->_internal_strpsnymcrlserialno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgPsnymCRLFormat.strPsnymCRLSerialNo");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_strpsnymcrlserialno(), target);
  }

  // required uint32 uiRevokedPsnymCertNo = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uirevokedpsnymcertno(), target);
  }

  // repeated string strRevokedPsnymCertSerialNo = 3;
  for (int i = 0, n = this->_internal_strrevokedpsnymcertserialno_size(); i < n; i++) {
    const auto& s = this->_internal_strrevokedpsnymcertserialno(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgPsnymCRLFormat.strRevokedPsnymCertSerialNo");
    target = stream->WriteString(3, s, target);
  }

  // required int64 tTimeStamp = 4 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_ttimestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgPsnymCRLFormat)
  return target;
}

size_t msgPsnymCRLFormat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgPsnymCRLFormat)
  size_t total_size = 0;

  if (_internal_has_strpsnymcrlserialno()) {
    // required string strPsnymCRLSerialNo = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpsnymcrlserialno());
  }

  if (_internal_has_uirevokedpsnymcertno()) {
    // required uint32 uiRevokedPsnymCertNo = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uirevokedpsnymcertno());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 4 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgPsnymCRLFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgPsnymCRLFormat)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string strPsnymCRLSerialNo = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpsnymcrlserialno());

    // required uint32 uiRevokedPsnymCertNo = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uirevokedpsnymcertno());

    // required int64 tTimeStamp = 4 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string strRevokedPsnymCertSerialNo = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(strrevokedpsnymcertserialno_.size());
  for (int i = 0, n = strrevokedpsnymcertserialno_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      strrevokedpsnymcertserialno_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgPsnymCRLFormat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgPsnymCRLFormat)
  GOOGLE_DCHECK_NE(&from, this);
  const msgPsnymCRLFormat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgPsnymCRLFormat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgPsnymCRLFormat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgPsnymCRLFormat)
    MergeFrom(*source);
  }
}

void msgPsnymCRLFormat::MergeFrom(const msgPsnymCRLFormat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgPsnymCRLFormat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  strrevokedpsnymcertserialno_.MergeFrom(from.strrevokedpsnymcertserialno_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strpsnymcrlserialno(from._internal_strpsnymcrlserialno());
    }
    if (cached_has_bits & 0x00000002u) {
      uirevokedpsnymcertno_ = from.uirevokedpsnymcertno_;
    }
    if (cached_has_bits & 0x00000004u) {
      ttimestamp_ = from.ttimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgPsnymCRLFormat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgPsnymCRLFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgPsnymCRLFormat::CopyFrom(const msgPsnymCRLFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgPsnymCRLFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgPsnymCRLFormat::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void msgPsnymCRLFormat::InternalSwap(msgPsnymCRLFormat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strrevokedpsnymcertserialno_.InternalSwap(&other->strrevokedpsnymcertserialno_);
  strpsnymcrlserialno_.Swap(&other->strpsnymcrlserialno_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(uirevokedpsnymcertno_, other->uirevokedpsnymcertno_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgPsnymCRLFormat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgIDAndDate::InitAsDefaultInstance() {
}
class msgIDAndDate::_Internal {
 public:
  using HasBits = decltype(std::declval<msgIDAndDate>()._has_bits_);
  static void set_has_strid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_expiry(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

msgIDAndDate::msgIDAndDate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgIDAndDate)
}
msgIDAndDate::msgIDAndDate(const msgIDAndDate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strid()) {
    strid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strid(),
      GetArena());
  }
  expiry_ = from.expiry_;
  // @@protoc_insertion_point(copy_constructor:interfaces.msgIDAndDate)
}

void msgIDAndDate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgIDAndDate_Interfaces_2eproto.base);
  strid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expiry_ = PROTOBUF_LONGLONG(-1);
}

msgIDAndDate::~msgIDAndDate() {
  // @@protoc_insertion_point(destructor:interfaces.msgIDAndDate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgIDAndDate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msgIDAndDate::ArenaDtor(void* object) {
  msgIDAndDate* _this = reinterpret_cast< msgIDAndDate* >(object);
  (void)_this;
}
void msgIDAndDate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgIDAndDate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgIDAndDate& msgIDAndDate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgIDAndDate_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgIDAndDate::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgIDAndDate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      strid_.ClearNonDefaultToEmpty();
    }
    expiry_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgIDAndDate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string strID = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_strid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgIDAndDate.strID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 expiry = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_expiry(&has_bits);
          expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgIDAndDate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgIDAndDate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string strID = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strid().data(), static_cast<int>(this->_internal_strid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgIDAndDate.strID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_strid(), target);
  }

  // required int64 expiry = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_expiry(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgIDAndDate)
  return target;
}

size_t msgIDAndDate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgIDAndDate)
  size_t total_size = 0;

  if (_internal_has_strid()) {
    // required string strID = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strid());
  }

  if (_internal_has_expiry()) {
    // required int64 expiry = 2 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expiry());
  }

  return total_size;
}
size_t msgIDAndDate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgIDAndDate)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string strID = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strid());

    // required int64 expiry = 2 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expiry());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgIDAndDate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgIDAndDate)
  GOOGLE_DCHECK_NE(&from, this);
  const msgIDAndDate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgIDAndDate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgIDAndDate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgIDAndDate)
    MergeFrom(*source);
  }
}

void msgIDAndDate::MergeFrom(const msgIDAndDate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgIDAndDate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strid(from._internal_strid());
    }
    if (cached_has_bits & 0x00000002u) {
      expiry_ = from.expiry_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgIDAndDate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgIDAndDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgIDAndDate::CopyFrom(const msgIDAndDate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgIDAndDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgIDAndDate::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void msgIDAndDate::InternalSwap(msgIDAndDate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strid_.Swap(&other->strid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(expiry_, other->expiry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgIDAndDate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgToBeSignedCRL::InitAsDefaultInstance() {
  ::interfaces::_msgToBeSignedCRL_default_instance_._instance.get_mutable()->stentriesidanddate_ = const_cast< ::interfaces::msgIDAndDate*>(
      ::interfaces::msgIDAndDate::internal_default_instance());
}
class msgToBeSignedCRL::_Internal {
 public:
  using HasBits = decltype(std::declval<msgToBeSignedCRL>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_crlseries(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_icaid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_crlserial(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tstartperiod(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tissuedate(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tnextcrl(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_uirevokedpsnymno(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::interfaces::msgIDAndDate& stentriesidanddate(const msgToBeSignedCRL* msg);
  static void set_has_stentriesidanddate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001ff) ^ 0x000001ff) != 0;
  }
};

const ::interfaces::msgIDAndDate&
msgToBeSignedCRL::_Internal::stentriesidanddate(const msgToBeSignedCRL* msg) {
  return *msg->stentriesidanddate_;
}
msgToBeSignedCRL::msgToBeSignedCRL(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  strrevokedpsnymcertserialno_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgToBeSignedCRL)
}
msgToBeSignedCRL::msgToBeSignedCRL(const msgToBeSignedCRL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      strrevokedpsnymcertserialno_(from.strrevokedpsnymcertserialno_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stentriesidanddate()) {
    stentriesidanddate_ = new ::interfaces::msgIDAndDate(*from.stentriesidanddate_);
  } else {
    stentriesidanddate_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&uirevokedpsnymno_) -
    reinterpret_cast<char*>(&type_)) + sizeof(uirevokedpsnymno_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgToBeSignedCRL)
}

void msgToBeSignedCRL::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgToBeSignedCRL_Interfaces_2eproto.base);
  ::memset(&stentriesidanddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uirevokedpsnymno_) -
      reinterpret_cast<char*>(&stentriesidanddate_)) + sizeof(uirevokedpsnymno_));
}

msgToBeSignedCRL::~msgToBeSignedCRL() {
  // @@protoc_insertion_point(destructor:interfaces.msgToBeSignedCRL)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgToBeSignedCRL::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stentriesidanddate_;
}

void msgToBeSignedCRL::ArenaDtor(void* object) {
  msgToBeSignedCRL* _this = reinterpret_cast< msgToBeSignedCRL* >(object);
  (void)_this;
}
void msgToBeSignedCRL::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgToBeSignedCRL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgToBeSignedCRL& msgToBeSignedCRL::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgToBeSignedCRL_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgToBeSignedCRL::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgToBeSignedCRL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strrevokedpsnymcertserialno_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(stentriesidanddate_ != nullptr);
    stentriesidanddate_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tnextcrl_) -
        reinterpret_cast<char*>(&type_)) + sizeof(tnextcrl_));
  }
  uirevokedpsnymno_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgToBeSignedCRL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .interfaces.msgCRLType.CRLType type = 1 [default = idOnly];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::interfaces::msgCRLType_CRLType_IsValid(val))) {
            _internal_set_type(static_cast<::interfaces::msgCRLType_CRLType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint32 crlSeries = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_crlseries(&has_bits);
          crlseries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 iCAID = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_icaid(&has_bits);
          icaid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 crlSerial = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_crlserial(&has_bits);
          crlserial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 tStartPeriod = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_tstartperiod(&has_bits);
          tstartperiod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 tIssueDate = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_tissuedate(&has_bits);
          tissuedate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 tNextCRL = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_tnextcrl(&has_bits);
          tnextcrl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 uiRevokedPsnymNo = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_uirevokedpsnymno(&has_bits);
          uirevokedpsnymno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string strRevokedPsnymCertSerialNo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_strrevokedpsnymcertserialno();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgToBeSignedCRL.strRevokedPsnymCertSerialNo");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgIDAndDate stEntriesIDAndDate = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_stentriesidanddate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgToBeSignedCRL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgToBeSignedCRL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .interfaces.msgCRLType.CRLType type = 1 [default = idOnly];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required uint32 crlSeries = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_crlseries(), target);
  }

  // required uint32 iCAID = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_icaid(), target);
  }

  // required uint32 crlSerial = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_crlserial(), target);
  }

  // required uint64 tStartPeriod = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_tstartperiod(), target);
  }

  // required uint64 tIssueDate = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_tissuedate(), target);
  }

  // required uint64 tNextCRL = 7 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_tnextcrl(), target);
  }

  // required uint64 uiRevokedPsnymNo = 8 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_uirevokedpsnymno(), target);
  }

  // repeated string strRevokedPsnymCertSerialNo = 9;
  for (int i = 0, n = this->_internal_strrevokedpsnymcertserialno_size(); i < n; i++) {
    const auto& s = this->_internal_strrevokedpsnymcertserialno(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgToBeSignedCRL.strRevokedPsnymCertSerialNo");
    target = stream->WriteString(9, s, target);
  }

  // required .interfaces.msgIDAndDate stEntriesIDAndDate = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::stentriesidanddate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgToBeSignedCRL)
  return target;
}

size_t msgToBeSignedCRL::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgToBeSignedCRL)
  size_t total_size = 0;

  if (_internal_has_stentriesidanddate()) {
    // required .interfaces.msgIDAndDate stEntriesIDAndDate = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stentriesidanddate_);
  }

  if (_internal_has_type()) {
    // required .interfaces.msgCRLType.CRLType type = 1 [default = idOnly];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (_internal_has_crlseries()) {
    // required uint32 crlSeries = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_crlseries());
  }

  if (_internal_has_icaid()) {
    // required uint32 iCAID = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_icaid());
  }

  if (_internal_has_crlserial()) {
    // required uint32 crlSerial = 4 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_crlserial());
  }

  if (_internal_has_tstartperiod()) {
    // required uint64 tStartPeriod = 5 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tstartperiod());
  }

  if (_internal_has_tissuedate()) {
    // required uint64 tIssueDate = 6 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tissuedate());
  }

  if (_internal_has_tnextcrl()) {
    // required uint64 tNextCRL = 7 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tnextcrl());
  }

  if (_internal_has_uirevokedpsnymno()) {
    // required uint64 uiRevokedPsnymNo = 8 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_uirevokedpsnymno());
  }

  return total_size;
}
size_t msgToBeSignedCRL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgToBeSignedCRL)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required .interfaces.msgIDAndDate stEntriesIDAndDate = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stentriesidanddate_);

    // required .interfaces.msgCRLType.CRLType type = 1 [default = idOnly];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

    // required uint32 crlSeries = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_crlseries());

    // required uint32 iCAID = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_icaid());

    // required uint32 crlSerial = 4 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_crlserial());

    // required uint64 tStartPeriod = 5 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tstartperiod());

    // required uint64 tIssueDate = 6 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tissuedate());

    // required uint64 tNextCRL = 7 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tnextcrl());

    // required uint64 uiRevokedPsnymNo = 8 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_uirevokedpsnymno());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string strRevokedPsnymCertSerialNo = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(strrevokedpsnymcertserialno_.size());
  for (int i = 0, n = strrevokedpsnymcertserialno_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      strrevokedpsnymcertserialno_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgToBeSignedCRL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgToBeSignedCRL)
  GOOGLE_DCHECK_NE(&from, this);
  const msgToBeSignedCRL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgToBeSignedCRL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgToBeSignedCRL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgToBeSignedCRL)
    MergeFrom(*source);
  }
}

void msgToBeSignedCRL::MergeFrom(const msgToBeSignedCRL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgToBeSignedCRL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  strrevokedpsnymcertserialno_.MergeFrom(from.strrevokedpsnymcertserialno_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stentriesidanddate()->::interfaces::msgIDAndDate::MergeFrom(from._internal_stentriesidanddate());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      crlseries_ = from.crlseries_;
    }
    if (cached_has_bits & 0x00000008u) {
      icaid_ = from.icaid_;
    }
    if (cached_has_bits & 0x00000010u) {
      crlserial_ = from.crlserial_;
    }
    if (cached_has_bits & 0x00000020u) {
      tstartperiod_ = from.tstartperiod_;
    }
    if (cached_has_bits & 0x00000040u) {
      tissuedate_ = from.tissuedate_;
    }
    if (cached_has_bits & 0x00000080u) {
      tnextcrl_ = from.tnextcrl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_uirevokedpsnymno(from._internal_uirevokedpsnymno());
  }
}

void msgToBeSignedCRL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgToBeSignedCRL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgToBeSignedCRL::CopyFrom(const msgToBeSignedCRL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgToBeSignedCRL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgToBeSignedCRL::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stentriesidanddate()) {
    if (!stentriesidanddate_->IsInitialized()) return false;
  }
  return true;
}

void msgToBeSignedCRL::InternalSwap(msgToBeSignedCRL* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strrevokedpsnymcertserialno_.InternalSwap(&other->strrevokedpsnymcertserialno_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgToBeSignedCRL, uirevokedpsnymno_)
      + sizeof(msgToBeSignedCRL::uirevokedpsnymno_)
      - PROTOBUF_FIELD_OFFSET(msgToBeSignedCRL, stentriesidanddate_)>(
          reinterpret_cast<char*>(&stentriesidanddate_),
          reinterpret_cast<char*>(&other->stentriesidanddate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata msgToBeSignedCRL::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgWAVECRL::InitAsDefaultInstance() {
  ::interfaces::_msgWAVECRL_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgWAVECRL_default_instance_._instance.get_mutable()->sttobesignedcrl_ = const_cast< ::interfaces::msgToBeSignedCRL*>(
      ::interfaces::msgToBeSignedCRL::internal_default_instance());
  ::interfaces::_msgWAVECRL_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgWAVECRL::_Internal {
 public:
  using HasBits = decltype(std::declval<msgWAVECRL>()._has_bits_);
  static void set_has_uiwavecrlversion(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgWAVECRL* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::interfaces::msgToBeSignedCRL& sttobesignedcrl(const msgWAVECRL* msg);
  static void set_has_sttobesignedcrl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::interfaces::msgSignature& stsign(const msgWAVECRL* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000a) ^ 0x0000000a) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgWAVECRL::_Internal::stsigner(const msgWAVECRL* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgToBeSignedCRL&
msgWAVECRL::_Internal::sttobesignedcrl(const msgWAVECRL* msg) {
  return *msg->sttobesignedcrl_;
}
const ::interfaces::msgSignature&
msgWAVECRL::_Internal::stsign(const msgWAVECRL* msg) {
  return *msg->stsign_;
}
msgWAVECRL::msgWAVECRL(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgWAVECRL)
}
msgWAVECRL::msgWAVECRL(const msgWAVECRL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_sttobesignedcrl()) {
    sttobesignedcrl_ = new ::interfaces::msgToBeSignedCRL(*from.sttobesignedcrl_);
  } else {
    sttobesignedcrl_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  uiwavecrlversion_ = from.uiwavecrlversion_;
  // @@protoc_insertion_point(copy_constructor:interfaces.msgWAVECRL)
}

void msgWAVECRL::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgWAVECRL_Interfaces_2eproto.base);
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uiwavecrlversion_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(uiwavecrlversion_));
}

msgWAVECRL::~msgWAVECRL() {
  // @@protoc_insertion_point(destructor:interfaces.msgWAVECRL)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgWAVECRL::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete sttobesignedcrl_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgWAVECRL::ArenaDtor(void* object) {
  msgWAVECRL* _this = reinterpret_cast< msgWAVECRL* >(object);
  (void)_this;
}
void msgWAVECRL::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgWAVECRL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgWAVECRL& msgWAVECRL::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgWAVECRL_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgWAVECRL::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgWAVECRL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sttobesignedcrl_ != nullptr);
      sttobesignedcrl_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
  }
  uiwavecrlversion_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgWAVECRL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 uiWaveCRLVersion = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uiwavecrlversion(&has_bits);
          uiwavecrlversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgToBeSignedCRL stToBeSignedCRL = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sttobesignedcrl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgWAVECRL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgWAVECRL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 uiWaveCRLVersion = 1 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uiwavecrlversion(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required .interfaces.msgToBeSignedCRL stToBeSignedCRL = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sttobesignedcrl(this), target, stream);
  }

  // optional .interfaces.msgSignature stSign = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgWAVECRL)
  return target;
}

size_t msgWAVECRL::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgWAVECRL)
  size_t total_size = 0;

  if (_internal_has_sttobesignedcrl()) {
    // required .interfaces.msgToBeSignedCRL stToBeSignedCRL = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sttobesignedcrl_);
  }

  if (_internal_has_uiwavecrlversion()) {
    // required uint32 uiWaveCRLVersion = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uiwavecrlversion());
  }

  return total_size;
}
size_t msgWAVECRL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgWAVECRL)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000a) ^ 0x0000000a) == 0) {  // All required fields are present.
    // required .interfaces.msgToBeSignedCRL stToBeSignedCRL = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sttobesignedcrl_);

    // required uint32 uiWaveCRLVersion = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uiwavecrlversion());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .interfaces.msgSignerInfo stSigner = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsigner_);
  }

  // optional .interfaces.msgSignature stSign = 4;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsign_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgWAVECRL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgWAVECRL)
  GOOGLE_DCHECK_NE(&from, this);
  const msgWAVECRL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgWAVECRL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgWAVECRL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgWAVECRL)
    MergeFrom(*source);
  }
}

void msgWAVECRL::MergeFrom(const msgWAVECRL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgWAVECRL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sttobesignedcrl()->::interfaces::msgToBeSignedCRL::MergeFrom(from._internal_sttobesignedcrl());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000008u) {
      uiwavecrlversion_ = from.uiwavecrlversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgWAVECRL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgWAVECRL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgWAVECRL::CopyFrom(const msgWAVECRL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgWAVECRL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgWAVECRL::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  if (_internal_has_sttobesignedcrl()) {
    if (!sttobesignedcrl_->IsInitialized()) return false;
  }
  return true;
}

void msgWAVECRL::InternalSwap(msgWAVECRL* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgWAVECRL, uiwavecrlversion_)
      + sizeof(msgWAVECRL::uiwavecrlversion_)
      - PROTOBUF_FIELD_OFFSET(msgWAVECRL, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
}

::PROTOBUF_NAMESPACE_ID::Metadata msgWAVECRL::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgWAVECertificateResponse::InitAsDefaultInstance() {
  ::interfaces::_msgWAVECertificateResponse_default_instance_._instance.get_mutable()->stcrlpath_ = const_cast< ::interfaces::msgWAVECRL*>(
      ::interfaces::msgWAVECRL::internal_default_instance());
}
class msgWAVECertificateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<msgWAVECertificateResponse>()._has_bits_);
  static const ::interfaces::msgWAVECRL& stcrlpath(const msgWAVECertificateResponse* msg);
  static void set_has_stcrlpath(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::interfaces::msgWAVECRL&
msgWAVECertificateResponse::_Internal::stcrlpath(const msgWAVECertificateResponse* msg) {
  return *msg->stcrlpath_;
}
msgWAVECertificateResponse::msgWAVECertificateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgWAVECertificateResponse)
}
msgWAVECertificateResponse::msgWAVECertificateResponse(const msgWAVECertificateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stcrlpath()) {
    stcrlpath_ = new ::interfaces::msgWAVECRL(*from.stcrlpath_);
  } else {
    stcrlpath_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:interfaces.msgWAVECertificateResponse)
}

void msgWAVECertificateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgWAVECertificateResponse_Interfaces_2eproto.base);
  stcrlpath_ = nullptr;
}

msgWAVECertificateResponse::~msgWAVECertificateResponse() {
  // @@protoc_insertion_point(destructor:interfaces.msgWAVECertificateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgWAVECertificateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stcrlpath_;
}

void msgWAVECertificateResponse::ArenaDtor(void* object) {
  msgWAVECertificateResponse* _this = reinterpret_cast< msgWAVECertificateResponse* >(object);
  (void)_this;
}
void msgWAVECertificateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgWAVECertificateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgWAVECertificateResponse& msgWAVECertificateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgWAVECertificateResponse_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgWAVECertificateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgWAVECertificateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(stcrlpath_ != nullptr);
    stcrlpath_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgWAVECertificateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .interfaces.msgWAVECRL stCRLPath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stcrlpath(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgWAVECertificateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgWAVECertificateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .interfaces.msgWAVECRL stCRLPath = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stcrlpath(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgWAVECertificateResponse)
  return target;
}

size_t msgWAVECertificateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgWAVECertificateResponse)
  size_t total_size = 0;

  // required .interfaces.msgWAVECRL stCRLPath = 1;
  if (_internal_has_stcrlpath()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stcrlpath_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgWAVECertificateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgWAVECertificateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const msgWAVECertificateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgWAVECertificateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgWAVECertificateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgWAVECertificateResponse)
    MergeFrom(*source);
  }
}

void msgWAVECertificateResponse::MergeFrom(const msgWAVECertificateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgWAVECertificateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stcrlpath()) {
    _internal_mutable_stcrlpath()->::interfaces::msgWAVECRL::MergeFrom(from._internal_stcrlpath());
  }
}

void msgWAVECertificateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgWAVECertificateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgWAVECertificateResponse::CopyFrom(const msgWAVECertificateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgWAVECertificateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgWAVECertificateResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stcrlpath()) {
    if (!stcrlpath_->IsInitialized()) return false;
  }
  return true;
}

void msgWAVECertificateResponse::InternalSwap(msgWAVECertificateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stcrlpath_, other->stcrlpath_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgWAVECertificateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgPsnymCRLReq_V2PCA::InitAsDefaultInstance() {
  ::interfaces::_msgPsnymCRLReq_V2PCA_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgPsnymCRLReq_V2PCA_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgPsnymCRLReq_V2PCA::_Internal {
 public:
  using HasBits = decltype(std::declval<msgPsnymCRLReq_V2PCA>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgPsnymCRLReq_V2PCA* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uicurrentcrlversion(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ipcaidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_iregionid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ipsnymcertlen(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_strpsnymcert(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::interfaces::msgSignature& stsign(const msgPsnymCRLReq_V2PCA* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000003f9) ^ 0x000003f9) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgPsnymCRLReq_V2PCA::_Internal::stsigner(const msgPsnymCRLReq_V2PCA* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgSignature&
msgPsnymCRLReq_V2PCA::_Internal::stsign(const msgPsnymCRLReq_V2PCA* msg) {
  return *msg->stsign_;
}
msgPsnymCRLReq_V2PCA::msgPsnymCRLReq_V2PCA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgPsnymCRLReq_V2PCA)
}
msgPsnymCRLReq_V2PCA::msgPsnymCRLReq_V2PCA(const msgPsnymCRLReq_V2PCA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strpsnymcert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strpsnymcert()) {
    strpsnymcert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strpsnymcert(),
      GetArena());
  }
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&uicurrentcrlversion_, &from.uicurrentcrlversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&uicurrentcrlversion_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgPsnymCRLReq_V2PCA)
}

void msgPsnymCRLReq_V2PCA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgPsnymCRLReq_V2PCA_Interfaces_2eproto.base);
  strpsnymcert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uicurrentcrlversion_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(uicurrentcrlversion_));
  inonce_ = -1;
  ireqtype_ = -1;
  ipcaidrange_ = -1;
  iregionid_ = -1;
  ipsnymcertlen_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgPsnymCRLReq_V2PCA::~msgPsnymCRLReq_V2PCA() {
  // @@protoc_insertion_point(destructor:interfaces.msgPsnymCRLReq_V2PCA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgPsnymCRLReq_V2PCA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strpsnymcert_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgPsnymCRLReq_V2PCA::ArenaDtor(void* object) {
  msgPsnymCRLReq_V2PCA* _this = reinterpret_cast< msgPsnymCRLReq_V2PCA* >(object);
  (void)_this;
}
void msgPsnymCRLReq_V2PCA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgPsnymCRLReq_V2PCA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgPsnymCRLReq_V2PCA& msgPsnymCRLReq_V2PCA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgPsnymCRLReq_V2PCA_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgPsnymCRLReq_V2PCA::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgPsnymCRLReq_V2PCA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      strpsnymcert_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    uicurrentcrlversion_ = 0u;
    inonce_ = -1;
    ireqtype_ = -1;
    ipcaidrange_ = -1;
    iregionid_ = -1;
  }
  if (cached_has_bits & 0x00000300u) {
    ipsnymcertlen_ = -1;
    ttimestamp_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgPsnymCRLReq_V2PCA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiCurrentCRLVersion = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uicurrentcrlversion(&has_bits);
          uicurrentcrlversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iPCAIdRange = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ipcaidrange(&has_bits);
          ipcaidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iRegionId = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_iregionid(&has_bits);
          iregionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iPsnymCertLen = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ipsnymcertlen(&has_bits);
          ipsnymcertlen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strPsnymCert = 7 [default = ""];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_strpsnymcert();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgPsnymCRLReq_V2PCA.strPsnymCert");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 9 [default = -1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgPsnymCRLReq_V2PCA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgPsnymCRLReq_V2PCA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required uint32 uiCurrentCRLVersion = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uicurrentcrlversion(), target);
  }

  // required int32 iPCAIdRange = 4 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ipcaidrange(), target);
  }

  // required int32 iRegionId = 5 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_iregionid(), target);
  }

  // required int32 iPsnymCertLen = 6 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_ipsnymcertlen(), target);
  }

  // required string strPsnymCert = 7 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strpsnymcert().data(), static_cast<int>(this->_internal_strpsnymcert().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgPsnymCRLReq_V2PCA.strPsnymCert");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_strpsnymcert(), target);
  }

  // required int32 iNonce = 8 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 9 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_ttimestamp(), target);
  }

  // optional .interfaces.msgSignature stSign = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgPsnymCRLReq_V2PCA)
  return target;
}

size_t msgPsnymCRLReq_V2PCA::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgPsnymCRLReq_V2PCA)
  size_t total_size = 0;

  if (_internal_has_strpsnymcert()) {
    // required string strPsnymCert = 7 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpsnymcert());
  }

  if (_internal_has_uicurrentcrlversion()) {
    // required uint32 uiCurrentCRLVersion = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uicurrentcrlversion());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_ipcaidrange()) {
    // required int32 iPCAIdRange = 4 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipcaidrange());
  }

  if (_internal_has_iregionid()) {
    // required int32 iRegionId = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iregionid());
  }

  if (_internal_has_ipsnymcertlen()) {
    // required int32 iPsnymCertLen = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipsnymcertlen());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 9 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgPsnymCRLReq_V2PCA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgPsnymCRLReq_V2PCA)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000003f9) ^ 0x000003f9) == 0) {  // All required fields are present.
    // required string strPsnymCert = 7 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpsnymcert());

    // required uint32 uiCurrentCRLVersion = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uicurrentcrlversion());

    // required int32 iNonce = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iPCAIdRange = 4 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipcaidrange());

    // required int32 iRegionId = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iregionid());

    // required int32 iPsnymCertLen = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipsnymcertlen());

    // required int64 tTimeStamp = 9 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .interfaces.msgSignerInfo stSigner = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsigner_);
    }

    // optional .interfaces.msgSignature stSign = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsign_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgPsnymCRLReq_V2PCA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgPsnymCRLReq_V2PCA)
  GOOGLE_DCHECK_NE(&from, this);
  const msgPsnymCRLReq_V2PCA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgPsnymCRLReq_V2PCA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgPsnymCRLReq_V2PCA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgPsnymCRLReq_V2PCA)
    MergeFrom(*source);
  }
}

void msgPsnymCRLReq_V2PCA::MergeFrom(const msgPsnymCRLReq_V2PCA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgPsnymCRLReq_V2PCA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strpsnymcert(from._internal_strpsnymcert());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000008u) {
      uicurrentcrlversion_ = from.uicurrentcrlversion_;
    }
    if (cached_has_bits & 0x00000010u) {
      inonce_ = from.inonce_;
    }
    if (cached_has_bits & 0x00000020u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000040u) {
      ipcaidrange_ = from.ipcaidrange_;
    }
    if (cached_has_bits & 0x00000080u) {
      iregionid_ = from.iregionid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      ipsnymcertlen_ = from.ipsnymcertlen_;
    }
    if (cached_has_bits & 0x00000200u) {
      ttimestamp_ = from.ttimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgPsnymCRLReq_V2PCA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgPsnymCRLReq_V2PCA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgPsnymCRLReq_V2PCA::CopyFrom(const msgPsnymCRLReq_V2PCA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgPsnymCRLReq_V2PCA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgPsnymCRLReq_V2PCA::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  return true;
}

void msgPsnymCRLReq_V2PCA::InternalSwap(msgPsnymCRLReq_V2PCA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strpsnymcert_.Swap(&other->strpsnymcert_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgPsnymCRLReq_V2PCA, uicurrentcrlversion_)
      + sizeof(msgPsnymCRLReq_V2PCA::uicurrentcrlversion_)
      - PROTOBUF_FIELD_OFFSET(msgPsnymCRLReq_V2PCA, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(inonce_, other->inonce_);
  swap(ireqtype_, other->ireqtype_);
  swap(ipcaidrange_, other->ipcaidrange_);
  swap(iregionid_, other->iregionid_);
  swap(ipsnymcertlen_, other->ipsnymcertlen_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgPsnymCRLReq_V2PCA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgPsnymCRLRes_PCA2V::InitAsDefaultInstance() {
  ::interfaces::_msgPsnymCRLRes_PCA2V_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgPsnymCRLRes_PCA2V_default_instance_._instance.get_mutable()->sterrinfo_ = const_cast< ::interfaces::msgError*>(
      ::interfaces::msgError::internal_default_instance());
  ::interfaces::_msgPsnymCRLRes_PCA2V_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgPsnymCRLRes_PCA2V::_Internal {
 public:
  using HasBits = decltype(std::declval<msgPsnymCRLRes_PCA2V>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgPsnymCRLRes_PCA2V* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ipcaidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::interfaces::msgError& sterrinfo(const msgPsnymCRLRes_PCA2V* msg);
  static void set_has_sterrinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_strwavecrlres(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::interfaces::msgSignature& stsign(const msgPsnymCRLRes_PCA2V* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000f4) ^ 0x000000f4) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgPsnymCRLRes_PCA2V::_Internal::stsigner(const msgPsnymCRLRes_PCA2V* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgError&
msgPsnymCRLRes_PCA2V::_Internal::sterrinfo(const msgPsnymCRLRes_PCA2V* msg) {
  return *msg->sterrinfo_;
}
const ::interfaces::msgSignature&
msgPsnymCRLRes_PCA2V::_Internal::stsign(const msgPsnymCRLRes_PCA2V* msg) {
  return *msg->stsign_;
}
msgPsnymCRLRes_PCA2V::msgPsnymCRLRes_PCA2V(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgPsnymCRLRes_PCA2V)
}
msgPsnymCRLRes_PCA2V::msgPsnymCRLRes_PCA2V(const msgPsnymCRLRes_PCA2V& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strwavecrlres_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strwavecrlres()) {
    strwavecrlres_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strwavecrlres(),
      GetArena());
  }
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_sterrinfo()) {
    sterrinfo_ = new ::interfaces::msgError(*from.sterrinfo_);
  } else {
    sterrinfo_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&inonce_, &from.inonce_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&inonce_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgPsnymCRLRes_PCA2V)
}

void msgPsnymCRLRes_PCA2V::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgPsnymCRLRes_PCA2V_Interfaces_2eproto.base);
  strwavecrlres_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stsign_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(stsign_));
  inonce_ = -1;
  ireqtype_ = -1;
  ipcaidrange_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgPsnymCRLRes_PCA2V::~msgPsnymCRLRes_PCA2V() {
  // @@protoc_insertion_point(destructor:interfaces.msgPsnymCRLRes_PCA2V)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgPsnymCRLRes_PCA2V::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strwavecrlres_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete sterrinfo_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgPsnymCRLRes_PCA2V::ArenaDtor(void* object) {
  msgPsnymCRLRes_PCA2V* _this = reinterpret_cast< msgPsnymCRLRes_PCA2V* >(object);
  (void)_this;
}
void msgPsnymCRLRes_PCA2V::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgPsnymCRLRes_PCA2V::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgPsnymCRLRes_PCA2V& msgPsnymCRLRes_PCA2V::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgPsnymCRLRes_PCA2V_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgPsnymCRLRes_PCA2V::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgPsnymCRLRes_PCA2V)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      strwavecrlres_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(sterrinfo_ != nullptr);
      sterrinfo_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
    inonce_ = -1;
    ireqtype_ = -1;
    ipcaidrange_ = -1;
    ttimestamp_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgPsnymCRLRes_PCA2V::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iPCAIdRange = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ipcaidrange(&has_bits);
          ipcaidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgError stErrInfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sterrinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string strWAVECRLRes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_strwavecrlres();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgPsnymCRLRes_PCA2V.strWAVECRLRes");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgPsnymCRLRes_PCA2V::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgPsnymCRLRes_PCA2V)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required int32 iPCAIdRange = 3 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ipcaidrange(), target);
  }

  // required int32 iNonce = 4 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 5 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_ttimestamp(), target);
  }

  // required .interfaces.msgError stErrInfo = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::sterrinfo(this), target, stream);
  }

  // optional string strWAVECRLRes = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strwavecrlres().data(), static_cast<int>(this->_internal_strwavecrlres().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgPsnymCRLRes_PCA2V.strWAVECRLRes");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_strwavecrlres(), target);
  }

  // optional .interfaces.msgSignature stSign = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgPsnymCRLRes_PCA2V)
  return target;
}

size_t msgPsnymCRLRes_PCA2V::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgPsnymCRLRes_PCA2V)
  size_t total_size = 0;

  if (_internal_has_sterrinfo()) {
    // required .interfaces.msgError stErrInfo = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 4 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_ipcaidrange()) {
    // required int32 iPCAIdRange = 3 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipcaidrange());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgPsnymCRLRes_PCA2V::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgPsnymCRLRes_PCA2V)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000f4) ^ 0x000000f4) == 0) {  // All required fields are present.
    // required .interfaces.msgError stErrInfo = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);

    // required int32 iNonce = 4 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iPCAIdRange = 3 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipcaidrange());

    // required int64 tTimeStamp = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string strWAVECRLRes = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_strwavecrlres());
    }

    // optional .interfaces.msgSignerInfo stSigner = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsigner_);
    }

  }
  // optional .interfaces.msgSignature stSign = 8;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsign_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgPsnymCRLRes_PCA2V::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgPsnymCRLRes_PCA2V)
  GOOGLE_DCHECK_NE(&from, this);
  const msgPsnymCRLRes_PCA2V* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgPsnymCRLRes_PCA2V>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgPsnymCRLRes_PCA2V)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgPsnymCRLRes_PCA2V)
    MergeFrom(*source);
  }
}

void msgPsnymCRLRes_PCA2V::MergeFrom(const msgPsnymCRLRes_PCA2V& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgPsnymCRLRes_PCA2V)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strwavecrlres(from._internal_strwavecrlres());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_sterrinfo()->::interfaces::msgError::MergeFrom(from._internal_sterrinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000010u) {
      inonce_ = from.inonce_;
    }
    if (cached_has_bits & 0x00000020u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000040u) {
      ipcaidrange_ = from.ipcaidrange_;
    }
    if (cached_has_bits & 0x00000080u) {
      ttimestamp_ = from.ttimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgPsnymCRLRes_PCA2V::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgPsnymCRLRes_PCA2V)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgPsnymCRLRes_PCA2V::CopyFrom(const msgPsnymCRLRes_PCA2V& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgPsnymCRLRes_PCA2V)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgPsnymCRLRes_PCA2V::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  if (_internal_has_sterrinfo()) {
    if (!sterrinfo_->IsInitialized()) return false;
  }
  return true;
}

void msgPsnymCRLRes_PCA2V::InternalSwap(msgPsnymCRLRes_PCA2V* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strwavecrlres_.Swap(&other->strwavecrlres_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgPsnymCRLRes_PCA2V, stsign_)
      + sizeof(msgPsnymCRLRes_PCA2V::stsign_)
      - PROTOBUF_FIELD_OFFSET(msgPsnymCRLRes_PCA2V, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(inonce_, other->inonce_);
  swap(ireqtype_, other->ireqtype_);
  swap(ipcaidrange_, other->ipcaidrange_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgPsnymCRLRes_PCA2V::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgPsnymOCSPReq_V2PCA::InitAsDefaultInstance() {
  ::interfaces::_msgPsnymOCSPReq_V2PCA_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgPsnymOCSPReq_V2PCA_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgPsnymOCSPReq_V2PCA::_Internal {
 public:
  using HasBits = decltype(std::declval<msgPsnymOCSPReq_V2PCA>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgPsnymOCSPReq_V2PCA* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ipcaidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_iregionid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_uinoofpsnymstobechecked(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ipsnymcertlen(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_strpsnymcert(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::interfaces::msgSignature& stsign(const msgPsnymOCSPReq_V2PCA* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000003f9) ^ 0x000003f9) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgPsnymOCSPReq_V2PCA::_Internal::stsigner(const msgPsnymOCSPReq_V2PCA* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgSignature&
msgPsnymOCSPReq_V2PCA::_Internal::stsign(const msgPsnymOCSPReq_V2PCA* msg) {
  return *msg->stsign_;
}
msgPsnymOCSPReq_V2PCA::msgPsnymOCSPReq_V2PCA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  strpsnymsserialnotobechecked_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgPsnymOCSPReq_V2PCA)
}
msgPsnymOCSPReq_V2PCA::msgPsnymOCSPReq_V2PCA(const msgPsnymOCSPReq_V2PCA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      strpsnymsserialnotobechecked_(from.strpsnymsserialnotobechecked_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strpsnymcert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strpsnymcert()) {
    strpsnymcert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strpsnymcert(),
      GetArena());
  }
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&uinoofpsnymstobechecked_, &from.uinoofpsnymstobechecked_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&uinoofpsnymstobechecked_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgPsnymOCSPReq_V2PCA)
}

void msgPsnymOCSPReq_V2PCA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgPsnymOCSPReq_V2PCA_Interfaces_2eproto.base);
  strpsnymcert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uinoofpsnymstobechecked_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(uinoofpsnymstobechecked_));
  inonce_ = -1;
  ireqtype_ = -1;
  ipcaidrange_ = -1;
  iregionid_ = -1;
  ipsnymcertlen_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgPsnymOCSPReq_V2PCA::~msgPsnymOCSPReq_V2PCA() {
  // @@protoc_insertion_point(destructor:interfaces.msgPsnymOCSPReq_V2PCA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgPsnymOCSPReq_V2PCA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strpsnymcert_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgPsnymOCSPReq_V2PCA::ArenaDtor(void* object) {
  msgPsnymOCSPReq_V2PCA* _this = reinterpret_cast< msgPsnymOCSPReq_V2PCA* >(object);
  (void)_this;
}
void msgPsnymOCSPReq_V2PCA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgPsnymOCSPReq_V2PCA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgPsnymOCSPReq_V2PCA& msgPsnymOCSPReq_V2PCA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgPsnymOCSPReq_V2PCA_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgPsnymOCSPReq_V2PCA::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgPsnymOCSPReq_V2PCA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strpsnymsserialnotobechecked_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      strpsnymcert_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    uinoofpsnymstobechecked_ = 0u;
    inonce_ = -1;
    ireqtype_ = -1;
    ipcaidrange_ = -1;
    iregionid_ = -1;
  }
  if (cached_has_bits & 0x00000300u) {
    ipsnymcertlen_ = -1;
    ttimestamp_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgPsnymOCSPReq_V2PCA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iPCAIdRange = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ipcaidrange(&has_bits);
          ipcaidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iRegionId = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_iregionid(&has_bits);
          iregionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiNoOfPsnymsToBeChecked = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_uinoofpsnymstobechecked(&has_bits);
          uinoofpsnymstobechecked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string strPsnymsSerialNoToBeChecked = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_strpsnymsserialnotobechecked();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgPsnymOCSPReq_V2PCA.strPsnymsSerialNoToBeChecked");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 iPsnymCertLen = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_ipsnymcertlen(&has_bits);
          ipsnymcertlen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strPsnymCert = 8 [default = ""];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_strpsnymcert();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgPsnymOCSPReq_V2PCA.strPsnymCert");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 9 [default = -1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 10 [default = -1];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgPsnymOCSPReq_V2PCA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgPsnymOCSPReq_V2PCA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required int32 iPCAIdRange = 3 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ipcaidrange(), target);
  }

  // required int32 iRegionId = 4 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_iregionid(), target);
  }

  // required uint32 uiNoOfPsnymsToBeChecked = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_uinoofpsnymstobechecked(), target);
  }

  // repeated string strPsnymsSerialNoToBeChecked = 6;
  for (int i = 0, n = this->_internal_strpsnymsserialnotobechecked_size(); i < n; i++) {
    const auto& s = this->_internal_strpsnymsserialnotobechecked(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgPsnymOCSPReq_V2PCA.strPsnymsSerialNoToBeChecked");
    target = stream->WriteString(6, s, target);
  }

  // required int32 iPsnymCertLen = 7 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_ipsnymcertlen(), target);
  }

  // required string strPsnymCert = 8 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strpsnymcert().data(), static_cast<int>(this->_internal_strpsnymcert().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgPsnymOCSPReq_V2PCA.strPsnymCert");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_strpsnymcert(), target);
  }

  // required int32 iNonce = 9 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 10 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_ttimestamp(), target);
  }

  // optional .interfaces.msgSignature stSign = 11;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgPsnymOCSPReq_V2PCA)
  return target;
}

size_t msgPsnymOCSPReq_V2PCA::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgPsnymOCSPReq_V2PCA)
  size_t total_size = 0;

  if (_internal_has_strpsnymcert()) {
    // required string strPsnymCert = 8 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpsnymcert());
  }

  if (_internal_has_uinoofpsnymstobechecked()) {
    // required uint32 uiNoOfPsnymsToBeChecked = 5 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofpsnymstobechecked());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 9 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_ipcaidrange()) {
    // required int32 iPCAIdRange = 3 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipcaidrange());
  }

  if (_internal_has_iregionid()) {
    // required int32 iRegionId = 4 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iregionid());
  }

  if (_internal_has_ipsnymcertlen()) {
    // required int32 iPsnymCertLen = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipsnymcertlen());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 10 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgPsnymOCSPReq_V2PCA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgPsnymOCSPReq_V2PCA)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000003f9) ^ 0x000003f9) == 0) {  // All required fields are present.
    // required string strPsnymCert = 8 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpsnymcert());

    // required uint32 uiNoOfPsnymsToBeChecked = 5 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofpsnymstobechecked());

    // required int32 iNonce = 9 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iPCAIdRange = 3 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipcaidrange());

    // required int32 iRegionId = 4 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iregionid());

    // required int32 iPsnymCertLen = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipsnymcertlen());

    // required int64 tTimeStamp = 10 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string strPsnymsSerialNoToBeChecked = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(strpsnymsserialnotobechecked_.size());
  for (int i = 0, n = strpsnymsserialnotobechecked_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      strpsnymsserialnotobechecked_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .interfaces.msgSignerInfo stSigner = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsigner_);
    }

    // optional .interfaces.msgSignature stSign = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsign_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgPsnymOCSPReq_V2PCA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgPsnymOCSPReq_V2PCA)
  GOOGLE_DCHECK_NE(&from, this);
  const msgPsnymOCSPReq_V2PCA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgPsnymOCSPReq_V2PCA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgPsnymOCSPReq_V2PCA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgPsnymOCSPReq_V2PCA)
    MergeFrom(*source);
  }
}

void msgPsnymOCSPReq_V2PCA::MergeFrom(const msgPsnymOCSPReq_V2PCA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgPsnymOCSPReq_V2PCA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  strpsnymsserialnotobechecked_.MergeFrom(from.strpsnymsserialnotobechecked_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strpsnymcert(from._internal_strpsnymcert());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000008u) {
      uinoofpsnymstobechecked_ = from.uinoofpsnymstobechecked_;
    }
    if (cached_has_bits & 0x00000010u) {
      inonce_ = from.inonce_;
    }
    if (cached_has_bits & 0x00000020u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000040u) {
      ipcaidrange_ = from.ipcaidrange_;
    }
    if (cached_has_bits & 0x00000080u) {
      iregionid_ = from.iregionid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      ipsnymcertlen_ = from.ipsnymcertlen_;
    }
    if (cached_has_bits & 0x00000200u) {
      ttimestamp_ = from.ttimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgPsnymOCSPReq_V2PCA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgPsnymOCSPReq_V2PCA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgPsnymOCSPReq_V2PCA::CopyFrom(const msgPsnymOCSPReq_V2PCA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgPsnymOCSPReq_V2PCA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgPsnymOCSPReq_V2PCA::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  return true;
}

void msgPsnymOCSPReq_V2PCA::InternalSwap(msgPsnymOCSPReq_V2PCA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strpsnymsserialnotobechecked_.InternalSwap(&other->strpsnymsserialnotobechecked_);
  strpsnymcert_.Swap(&other->strpsnymcert_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgPsnymOCSPReq_V2PCA, uinoofpsnymstobechecked_)
      + sizeof(msgPsnymOCSPReq_V2PCA::uinoofpsnymstobechecked_)
      - PROTOBUF_FIELD_OFFSET(msgPsnymOCSPReq_V2PCA, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(inonce_, other->inonce_);
  swap(ireqtype_, other->ireqtype_);
  swap(ipcaidrange_, other->ipcaidrange_);
  swap(iregionid_, other->iregionid_);
  swap(ipsnymcertlen_, other->ipsnymcertlen_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgPsnymOCSPReq_V2PCA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgPsnymRevocationStatus::InitAsDefaultInstance() {
}
class msgPsnymRevocationStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<msgPsnymRevocationStatus>()._has_bits_);
  static void set_has_strpsnymserialno(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_brevocationstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

msgPsnymRevocationStatus::msgPsnymRevocationStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgPsnymRevocationStatus)
}
msgPsnymRevocationStatus::msgPsnymRevocationStatus(const msgPsnymRevocationStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strpsnymserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strpsnymserialno()) {
    strpsnymserialno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strpsnymserialno(),
      GetArena());
  }
  brevocationstatus_ = from.brevocationstatus_;
  // @@protoc_insertion_point(copy_constructor:interfaces.msgPsnymRevocationStatus)
}

void msgPsnymRevocationStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgPsnymRevocationStatus_Interfaces_2eproto.base);
  strpsnymserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  brevocationstatus_ = false;
}

msgPsnymRevocationStatus::~msgPsnymRevocationStatus() {
  // @@protoc_insertion_point(destructor:interfaces.msgPsnymRevocationStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgPsnymRevocationStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strpsnymserialno_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msgPsnymRevocationStatus::ArenaDtor(void* object) {
  msgPsnymRevocationStatus* _this = reinterpret_cast< msgPsnymRevocationStatus* >(object);
  (void)_this;
}
void msgPsnymRevocationStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgPsnymRevocationStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgPsnymRevocationStatus& msgPsnymRevocationStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgPsnymRevocationStatus_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgPsnymRevocationStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgPsnymRevocationStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    strpsnymserialno_.ClearNonDefaultToEmpty();
  }
  brevocationstatus_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgPsnymRevocationStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string strPsnymSerialNo = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_strpsnymserialno();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgPsnymRevocationStatus.strPsnymSerialNo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool bRevocationStatus = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_brevocationstatus(&has_bits);
          brevocationstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgPsnymRevocationStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgPsnymRevocationStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string strPsnymSerialNo = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strpsnymserialno().data(), static_cast<int>(this->_internal_strpsnymserialno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgPsnymRevocationStatus.strPsnymSerialNo");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_strpsnymserialno(), target);
  }

  // required bool bRevocationStatus = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_brevocationstatus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgPsnymRevocationStatus)
  return target;
}

size_t msgPsnymRevocationStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgPsnymRevocationStatus)
  size_t total_size = 0;

  if (_internal_has_strpsnymserialno()) {
    // required string strPsnymSerialNo = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpsnymserialno());
  }

  if (_internal_has_brevocationstatus()) {
    // required bool bRevocationStatus = 2 [default = false];
    total_size += 1 + 1;
  }

  return total_size;
}
size_t msgPsnymRevocationStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgPsnymRevocationStatus)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string strPsnymSerialNo = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpsnymserialno());

    // required bool bRevocationStatus = 2 [default = false];
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgPsnymRevocationStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgPsnymRevocationStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const msgPsnymRevocationStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgPsnymRevocationStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgPsnymRevocationStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgPsnymRevocationStatus)
    MergeFrom(*source);
  }
}

void msgPsnymRevocationStatus::MergeFrom(const msgPsnymRevocationStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgPsnymRevocationStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strpsnymserialno(from._internal_strpsnymserialno());
    }
    if (cached_has_bits & 0x00000002u) {
      brevocationstatus_ = from.brevocationstatus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgPsnymRevocationStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgPsnymRevocationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgPsnymRevocationStatus::CopyFrom(const msgPsnymRevocationStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgPsnymRevocationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgPsnymRevocationStatus::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void msgPsnymRevocationStatus::InternalSwap(msgPsnymRevocationStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strpsnymserialno_.Swap(&other->strpsnymserialno_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(brevocationstatus_, other->brevocationstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgPsnymRevocationStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgPsnymOCSPRes_PCA2V::InitAsDefaultInstance() {
  ::interfaces::_msgPsnymOCSPRes_PCA2V_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgPsnymOCSPRes_PCA2V_default_instance_._instance.get_mutable()->sterrinfo_ = const_cast< ::interfaces::msgError*>(
      ::interfaces::msgError::internal_default_instance());
  ::interfaces::_msgPsnymOCSPRes_PCA2V_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgPsnymOCSPRes_PCA2V::_Internal {
 public:
  using HasBits = decltype(std::declval<msgPsnymOCSPRes_PCA2V>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgPsnymOCSPRes_PCA2V* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ipcaidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_uinoofpsnymstobechecked(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::interfaces::msgError& sterrinfo(const msgPsnymOCSPRes_PCA2V* msg);
  static void set_has_sterrinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::interfaces::msgSignature& stsign(const msgPsnymOCSPRes_PCA2V* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000fa) ^ 0x000000fa) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgPsnymOCSPRes_PCA2V::_Internal::stsigner(const msgPsnymOCSPRes_PCA2V* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgError&
msgPsnymOCSPRes_PCA2V::_Internal::sterrinfo(const msgPsnymOCSPRes_PCA2V* msg) {
  return *msg->sterrinfo_;
}
const ::interfaces::msgSignature&
msgPsnymOCSPRes_PCA2V::_Internal::stsign(const msgPsnymOCSPRes_PCA2V* msg) {
  return *msg->stsign_;
}
msgPsnymOCSPRes_PCA2V::msgPsnymOCSPRes_PCA2V(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  strevocationstatus_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgPsnymOCSPRes_PCA2V)
}
msgPsnymOCSPRes_PCA2V::msgPsnymOCSPRes_PCA2V(const msgPsnymOCSPRes_PCA2V& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      strevocationstatus_(from.strevocationstatus_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_sterrinfo()) {
    sterrinfo_ = new ::interfaces::msgError(*from.sterrinfo_);
  } else {
    sterrinfo_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&uinoofpsnymstobechecked_, &from.uinoofpsnymstobechecked_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&uinoofpsnymstobechecked_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgPsnymOCSPRes_PCA2V)
}

void msgPsnymOCSPRes_PCA2V::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgPsnymOCSPRes_PCA2V_Interfaces_2eproto.base);
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uinoofpsnymstobechecked_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(uinoofpsnymstobechecked_));
  inonce_ = -1;
  ireqtype_ = -1;
  ipcaidrange_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgPsnymOCSPRes_PCA2V::~msgPsnymOCSPRes_PCA2V() {
  // @@protoc_insertion_point(destructor:interfaces.msgPsnymOCSPRes_PCA2V)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgPsnymOCSPRes_PCA2V::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete sterrinfo_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgPsnymOCSPRes_PCA2V::ArenaDtor(void* object) {
  msgPsnymOCSPRes_PCA2V* _this = reinterpret_cast< msgPsnymOCSPRes_PCA2V* >(object);
  (void)_this;
}
void msgPsnymOCSPRes_PCA2V::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgPsnymOCSPRes_PCA2V::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgPsnymOCSPRes_PCA2V& msgPsnymOCSPRes_PCA2V::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgPsnymOCSPRes_PCA2V_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgPsnymOCSPRes_PCA2V::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgPsnymOCSPRes_PCA2V)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strevocationstatus_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sterrinfo_ != nullptr);
      sterrinfo_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    uinoofpsnymstobechecked_ = 0u;
    inonce_ = -1;
    ireqtype_ = -1;
    ipcaidrange_ = -1;
    ttimestamp_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgPsnymOCSPRes_PCA2V::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iPCAIdRange = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ipcaidrange(&has_bits);
          ipcaidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiNoOfPsnymsToBeChecked = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_uinoofpsnymstobechecked(&has_bits);
          uinoofpsnymstobechecked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .interfaces.msgPsnymRevocationStatus stRevocationStatus = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_strevocationstatus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgError stErrInfo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_sterrinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgPsnymOCSPRes_PCA2V::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgPsnymOCSPRes_PCA2V)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required int32 iPCAIdRange = 3 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ipcaidrange(), target);
  }

  // required uint32 uiNoOfPsnymsToBeChecked = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_uinoofpsnymstobechecked(), target);
  }

  // repeated .interfaces.msgPsnymRevocationStatus stRevocationStatus = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_strevocationstatus_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_strevocationstatus(i), target, stream);
  }

  // required int32 iNonce = 6 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 7 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_ttimestamp(), target);
  }

  // required .interfaces.msgError stErrInfo = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::sterrinfo(this), target, stream);
  }

  // optional .interfaces.msgSignature stSign = 9;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgPsnymOCSPRes_PCA2V)
  return target;
}

size_t msgPsnymOCSPRes_PCA2V::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgPsnymOCSPRes_PCA2V)
  size_t total_size = 0;

  if (_internal_has_sterrinfo()) {
    // required .interfaces.msgError stErrInfo = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);
  }

  if (_internal_has_uinoofpsnymstobechecked()) {
    // required uint32 uiNoOfPsnymsToBeChecked = 4 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofpsnymstobechecked());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_ipcaidrange()) {
    // required int32 iPCAIdRange = 3 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipcaidrange());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgPsnymOCSPRes_PCA2V::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgPsnymOCSPRes_PCA2V)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000fa) ^ 0x000000fa) == 0) {  // All required fields are present.
    // required .interfaces.msgError stErrInfo = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);

    // required uint32 uiNoOfPsnymsToBeChecked = 4 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofpsnymstobechecked());

    // required int32 iNonce = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iPCAIdRange = 3 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipcaidrange());

    // required int64 tTimeStamp = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .interfaces.msgPsnymRevocationStatus stRevocationStatus = 5;
  total_size += 1UL * this->_internal_strevocationstatus_size();
  for (const auto& msg : this->strevocationstatus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsigner_);
  }

  // optional .interfaces.msgSignature stSign = 9;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsign_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgPsnymOCSPRes_PCA2V::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgPsnymOCSPRes_PCA2V)
  GOOGLE_DCHECK_NE(&from, this);
  const msgPsnymOCSPRes_PCA2V* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgPsnymOCSPRes_PCA2V>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgPsnymOCSPRes_PCA2V)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgPsnymOCSPRes_PCA2V)
    MergeFrom(*source);
  }
}

void msgPsnymOCSPRes_PCA2V::MergeFrom(const msgPsnymOCSPRes_PCA2V& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgPsnymOCSPRes_PCA2V)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  strevocationstatus_.MergeFrom(from.strevocationstatus_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sterrinfo()->::interfaces::msgError::MergeFrom(from._internal_sterrinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000008u) {
      uinoofpsnymstobechecked_ = from.uinoofpsnymstobechecked_;
    }
    if (cached_has_bits & 0x00000010u) {
      inonce_ = from.inonce_;
    }
    if (cached_has_bits & 0x00000020u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000040u) {
      ipcaidrange_ = from.ipcaidrange_;
    }
    if (cached_has_bits & 0x00000080u) {
      ttimestamp_ = from.ttimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgPsnymOCSPRes_PCA2V::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgPsnymOCSPRes_PCA2V)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgPsnymOCSPRes_PCA2V::CopyFrom(const msgPsnymOCSPRes_PCA2V& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgPsnymOCSPRes_PCA2V)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgPsnymOCSPRes_PCA2V::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(strevocationstatus_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  if (_internal_has_sterrinfo()) {
    if (!sterrinfo_->IsInitialized()) return false;
  }
  return true;
}

void msgPsnymOCSPRes_PCA2V::InternalSwap(msgPsnymOCSPRes_PCA2V* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strevocationstatus_.InternalSwap(&other->strevocationstatus_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgPsnymOCSPRes_PCA2V, uinoofpsnymstobechecked_)
      + sizeof(msgPsnymOCSPRes_PCA2V::uinoofpsnymstobechecked_)
      - PROTOBUF_FIELD_OFFSET(msgPsnymOCSPRes_PCA2V, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(inonce_, other->inonce_);
  swap(ireqtype_, other->ireqtype_);
  swap(ipcaidrange_, other->ipcaidrange_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgPsnymOCSPRes_PCA2V::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgRevokePsnymCertReq_P2RA::InitAsDefaultInstance() {
  ::interfaces::_msgRevokePsnymCertReq_P2RA_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgRevokePsnymCertReq_P2RA_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgRevokePsnymCertReq_P2RA::_Internal {
 public:
  using HasBits = decltype(std::declval<msgRevokePsnymCertReq_P2RA>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgRevokePsnymCertReq_P2RA* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ipcaidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_strecsecmanecpubkey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uinoofpsnymstoberevoked(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::interfaces::msgSignature& stsign(const msgRevokePsnymCertReq_P2RA* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000f9) ^ 0x000000f9) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgRevokePsnymCertReq_P2RA::_Internal::stsigner(const msgRevokePsnymCertReq_P2RA* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgSignature&
msgRevokePsnymCertReq_P2RA::_Internal::stsign(const msgRevokePsnymCertReq_P2RA* msg) {
  return *msg->stsign_;
}
msgRevokePsnymCertReq_P2RA::msgRevokePsnymCertReq_P2RA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  strrevokedpsnymcert_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgRevokePsnymCertReq_P2RA)
}
msgRevokePsnymCertReq_P2RA::msgRevokePsnymCertReq_P2RA(const msgRevokePsnymCertReq_P2RA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      strrevokedpsnymcert_(from.strrevokedpsnymcert_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strecsecmanecpubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strecsecmanecpubkey()) {
    strecsecmanecpubkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strecsecmanecpubkey(),
      GetArena());
  }
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&uinoofpsnymstoberevoked_, &from.uinoofpsnymstoberevoked_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&uinoofpsnymstoberevoked_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgRevokePsnymCertReq_P2RA)
}

void msgRevokePsnymCertReq_P2RA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgRevokePsnymCertReq_P2RA_Interfaces_2eproto.base);
  strecsecmanecpubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uinoofpsnymstoberevoked_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(uinoofpsnymstoberevoked_));
  inonce_ = -1;
  ireqtype_ = -1;
  ipcaidrange_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgRevokePsnymCertReq_P2RA::~msgRevokePsnymCertReq_P2RA() {
  // @@protoc_insertion_point(destructor:interfaces.msgRevokePsnymCertReq_P2RA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgRevokePsnymCertReq_P2RA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strecsecmanecpubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgRevokePsnymCertReq_P2RA::ArenaDtor(void* object) {
  msgRevokePsnymCertReq_P2RA* _this = reinterpret_cast< msgRevokePsnymCertReq_P2RA* >(object);
  (void)_this;
}
void msgRevokePsnymCertReq_P2RA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgRevokePsnymCertReq_P2RA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgRevokePsnymCertReq_P2RA& msgRevokePsnymCertReq_P2RA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgRevokePsnymCertReq_P2RA_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgRevokePsnymCertReq_P2RA::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgRevokePsnymCertReq_P2RA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strrevokedpsnymcert_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      strecsecmanecpubkey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    uinoofpsnymstoberevoked_ = 0u;
    inonce_ = -1;
    ireqtype_ = -1;
    ipcaidrange_ = -1;
    ttimestamp_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgRevokePsnymCertReq_P2RA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iPCAIdRange = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ipcaidrange(&has_bits);
          ipcaidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strECSecManECPubKey = 4 [default = ""];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_strecsecmanecpubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgRevokePsnymCertReq_P2RA.strECSecManECPubKey");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiNoOfPsnymsToBeRevoked = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_uinoofpsnymstoberevoked(&has_bits);
          uinoofpsnymstoberevoked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string strRevokedPsnymCert = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_strrevokedpsnymcert();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgRevokePsnymCertReq_P2RA.strRevokedPsnymCert");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgRevokePsnymCertReq_P2RA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgRevokePsnymCertReq_P2RA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required int32 iPCAIdRange = 3 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ipcaidrange(), target);
  }

  // required string strECSecManECPubKey = 4 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strecsecmanecpubkey().data(), static_cast<int>(this->_internal_strecsecmanecpubkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgRevokePsnymCertReq_P2RA.strECSecManECPubKey");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_strecsecmanecpubkey(), target);
  }

  // required uint32 uiNoOfPsnymsToBeRevoked = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_uinoofpsnymstoberevoked(), target);
  }

  // repeated string strRevokedPsnymCert = 6;
  for (int i = 0, n = this->_internal_strrevokedpsnymcert_size(); i < n; i++) {
    const auto& s = this->_internal_strrevokedpsnymcert(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgRevokePsnymCertReq_P2RA.strRevokedPsnymCert");
    target = stream->WriteString(6, s, target);
  }

  // required int32 iNonce = 7 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 8 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_ttimestamp(), target);
  }

  // optional .interfaces.msgSignature stSign = 9;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgRevokePsnymCertReq_P2RA)
  return target;
}

size_t msgRevokePsnymCertReq_P2RA::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgRevokePsnymCertReq_P2RA)
  size_t total_size = 0;

  if (_internal_has_strecsecmanecpubkey()) {
    // required string strECSecManECPubKey = 4 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strecsecmanecpubkey());
  }

  if (_internal_has_uinoofpsnymstoberevoked()) {
    // required uint32 uiNoOfPsnymsToBeRevoked = 5 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofpsnymstoberevoked());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_ipcaidrange()) {
    // required int32 iPCAIdRange = 3 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipcaidrange());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgRevokePsnymCertReq_P2RA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgRevokePsnymCertReq_P2RA)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000f9) ^ 0x000000f9) == 0) {  // All required fields are present.
    // required string strECSecManECPubKey = 4 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strecsecmanecpubkey());

    // required uint32 uiNoOfPsnymsToBeRevoked = 5 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofpsnymstoberevoked());

    // required int32 iNonce = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iPCAIdRange = 3 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipcaidrange());

    // required int64 tTimeStamp = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string strRevokedPsnymCert = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(strrevokedpsnymcert_.size());
  for (int i = 0, n = strrevokedpsnymcert_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      strrevokedpsnymcert_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .interfaces.msgSignerInfo stSigner = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsigner_);
    }

    // optional .interfaces.msgSignature stSign = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsign_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgRevokePsnymCertReq_P2RA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgRevokePsnymCertReq_P2RA)
  GOOGLE_DCHECK_NE(&from, this);
  const msgRevokePsnymCertReq_P2RA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgRevokePsnymCertReq_P2RA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgRevokePsnymCertReq_P2RA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgRevokePsnymCertReq_P2RA)
    MergeFrom(*source);
  }
}

void msgRevokePsnymCertReq_P2RA::MergeFrom(const msgRevokePsnymCertReq_P2RA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgRevokePsnymCertReq_P2RA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  strrevokedpsnymcert_.MergeFrom(from.strrevokedpsnymcert_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strecsecmanecpubkey(from._internal_strecsecmanecpubkey());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000008u) {
      uinoofpsnymstoberevoked_ = from.uinoofpsnymstoberevoked_;
    }
    if (cached_has_bits & 0x00000010u) {
      inonce_ = from.inonce_;
    }
    if (cached_has_bits & 0x00000020u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000040u) {
      ipcaidrange_ = from.ipcaidrange_;
    }
    if (cached_has_bits & 0x00000080u) {
      ttimestamp_ = from.ttimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgRevokePsnymCertReq_P2RA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgRevokePsnymCertReq_P2RA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgRevokePsnymCertReq_P2RA::CopyFrom(const msgRevokePsnymCertReq_P2RA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgRevokePsnymCertReq_P2RA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgRevokePsnymCertReq_P2RA::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  return true;
}

void msgRevokePsnymCertReq_P2RA::InternalSwap(msgRevokePsnymCertReq_P2RA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strrevokedpsnymcert_.InternalSwap(&other->strrevokedpsnymcert_);
  strecsecmanecpubkey_.Swap(&other->strecsecmanecpubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgRevokePsnymCertReq_P2RA, uinoofpsnymstoberevoked_)
      + sizeof(msgRevokePsnymCertReq_P2RA::uinoofpsnymstoberevoked_)
      - PROTOBUF_FIELD_OFFSET(msgRevokePsnymCertReq_P2RA, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(inonce_, other->inonce_);
  swap(ireqtype_, other->ireqtype_);
  swap(ipcaidrange_, other->ipcaidrange_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgRevokePsnymCertReq_P2RA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgRevokePsnymCertReq_RA2PCA::InitAsDefaultInstance() {
  ::interfaces::_msgRevokePsnymCertReq_RA2PCA_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgRevokePsnymCertReq_RA2PCA_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgRevokePsnymCertReq_RA2PCA::_Internal {
 public:
  using HasBits = decltype(std::declval<msgRevokePsnymCertReq_RA2PCA>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgRevokePsnymCertReq_RA2PCA* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uinoofpsnymstoberevoked(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::interfaces::msgSignature& stsign(const msgRevokePsnymCertReq_RA2PCA* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003c) ^ 0x0000003c) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgRevokePsnymCertReq_RA2PCA::_Internal::stsigner(const msgRevokePsnymCertReq_RA2PCA* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgSignature&
msgRevokePsnymCertReq_RA2PCA::_Internal::stsign(const msgRevokePsnymCertReq_RA2PCA* msg) {
  return *msg->stsign_;
}
msgRevokePsnymCertReq_RA2PCA::msgRevokePsnymCertReq_RA2PCA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  strrevokedpsnymcert_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgRevokePsnymCertReq_RA2PCA)
}
msgRevokePsnymCertReq_RA2PCA::msgRevokePsnymCertReq_RA2PCA(const msgRevokePsnymCertReq_RA2PCA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      strrevokedpsnymcert_(from.strrevokedpsnymcert_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&uinoofpsnymstoberevoked_, &from.uinoofpsnymstoberevoked_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&uinoofpsnymstoberevoked_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgRevokePsnymCertReq_RA2PCA)
}

void msgRevokePsnymCertReq_RA2PCA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgRevokePsnymCertReq_RA2PCA_Interfaces_2eproto.base);
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uinoofpsnymstoberevoked_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(uinoofpsnymstoberevoked_));
  ireqtype_ = -1;
  inonce_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgRevokePsnymCertReq_RA2PCA::~msgRevokePsnymCertReq_RA2PCA() {
  // @@protoc_insertion_point(destructor:interfaces.msgRevokePsnymCertReq_RA2PCA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgRevokePsnymCertReq_RA2PCA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgRevokePsnymCertReq_RA2PCA::ArenaDtor(void* object) {
  msgRevokePsnymCertReq_RA2PCA* _this = reinterpret_cast< msgRevokePsnymCertReq_RA2PCA* >(object);
  (void)_this;
}
void msgRevokePsnymCertReq_RA2PCA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgRevokePsnymCertReq_RA2PCA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgRevokePsnymCertReq_RA2PCA& msgRevokePsnymCertReq_RA2PCA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgRevokePsnymCertReq_RA2PCA_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgRevokePsnymCertReq_RA2PCA::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgRevokePsnymCertReq_RA2PCA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strrevokedpsnymcert_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    uinoofpsnymstoberevoked_ = 0u;
    ireqtype_ = -1;
    inonce_ = -1;
    ttimestamp_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgRevokePsnymCertReq_RA2PCA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiNoOfPsnymsToBeRevoked = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uinoofpsnymstoberevoked(&has_bits);
          uinoofpsnymstoberevoked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string strRevokedPsnymCert = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_strrevokedpsnymcert();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgRevokePsnymCertReq_RA2PCA.strRevokedPsnymCert");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgRevokePsnymCertReq_RA2PCA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgRevokePsnymCertReq_RA2PCA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required uint32 uiNoOfPsnymsToBeRevoked = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uinoofpsnymstoberevoked(), target);
  }

  // repeated string strRevokedPsnymCert = 4;
  for (int i = 0, n = this->_internal_strrevokedpsnymcert_size(); i < n; i++) {
    const auto& s = this->_internal_strrevokedpsnymcert(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgRevokePsnymCertReq_RA2PCA.strRevokedPsnymCert");
    target = stream->WriteString(4, s, target);
  }

  // required int32 iNonce = 5 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 6 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_ttimestamp(), target);
  }

  // optional .interfaces.msgSignature stSign = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgRevokePsnymCertReq_RA2PCA)
  return target;
}

size_t msgRevokePsnymCertReq_RA2PCA::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgRevokePsnymCertReq_RA2PCA)
  size_t total_size = 0;

  if (_internal_has_uinoofpsnymstoberevoked()) {
    // required uint32 uiNoOfPsnymsToBeRevoked = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofpsnymstoberevoked());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgRevokePsnymCertReq_RA2PCA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgRevokePsnymCertReq_RA2PCA)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003c) ^ 0x0000003c) == 0) {  // All required fields are present.
    // required uint32 uiNoOfPsnymsToBeRevoked = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofpsnymstoberevoked());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iNonce = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int64 tTimeStamp = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string strRevokedPsnymCert = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(strrevokedpsnymcert_.size());
  for (int i = 0, n = strrevokedpsnymcert_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      strrevokedpsnymcert_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .interfaces.msgSignerInfo stSigner = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsigner_);
    }

    // optional .interfaces.msgSignature stSign = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsign_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgRevokePsnymCertReq_RA2PCA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgRevokePsnymCertReq_RA2PCA)
  GOOGLE_DCHECK_NE(&from, this);
  const msgRevokePsnymCertReq_RA2PCA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgRevokePsnymCertReq_RA2PCA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgRevokePsnymCertReq_RA2PCA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgRevokePsnymCertReq_RA2PCA)
    MergeFrom(*source);
  }
}

void msgRevokePsnymCertReq_RA2PCA::MergeFrom(const msgRevokePsnymCertReq_RA2PCA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgRevokePsnymCertReq_RA2PCA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  strrevokedpsnymcert_.MergeFrom(from.strrevokedpsnymcert_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000004u) {
      uinoofpsnymstoberevoked_ = from.uinoofpsnymstoberevoked_;
    }
    if (cached_has_bits & 0x00000008u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000010u) {
      inonce_ = from.inonce_;
    }
    if (cached_has_bits & 0x00000020u) {
      ttimestamp_ = from.ttimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgRevokePsnymCertReq_RA2PCA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgRevokePsnymCertReq_RA2PCA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgRevokePsnymCertReq_RA2PCA::CopyFrom(const msgRevokePsnymCertReq_RA2PCA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgRevokePsnymCertReq_RA2PCA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgRevokePsnymCertReq_RA2PCA::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  return true;
}

void msgRevokePsnymCertReq_RA2PCA::InternalSwap(msgRevokePsnymCertReq_RA2PCA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strrevokedpsnymcert_.InternalSwap(&other->strrevokedpsnymcert_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgRevokePsnymCertReq_RA2PCA, uinoofpsnymstoberevoked_)
      + sizeof(msgRevokePsnymCertReq_RA2PCA::uinoofpsnymstoberevoked_)
      - PROTOBUF_FIELD_OFFSET(msgRevokePsnymCertReq_RA2PCA, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(ireqtype_, other->ireqtype_);
  swap(inonce_, other->inonce_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgRevokePsnymCertReq_RA2PCA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgRevokePsnymCertRes_PCA2RA::InitAsDefaultInstance() {
  ::interfaces::_msgRevokePsnymCertRes_PCA2RA_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
}
class msgRevokePsnymCertRes_PCA2RA::_Internal {
 public:
  using HasBits = decltype(std::declval<msgRevokePsnymCertRes_PCA2RA>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgRevokePsnymCertRes_PCA2RA* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uinoofpsnymstoberevoked(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uinoofsuccessfullyrevokedpsnyms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uinoofsuccessfullyrevokedtickets(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001e) ^ 0x0000001e) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgRevokePsnymCertRes_PCA2RA::_Internal::stsigner(const msgRevokePsnymCertRes_PCA2RA* msg) {
  return *msg->stsigner_;
}
msgRevokePsnymCertRes_PCA2RA::msgRevokePsnymCertRes_PCA2RA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgRevokePsnymCertRes_PCA2RA)
}
msgRevokePsnymCertRes_PCA2RA::msgRevokePsnymCertRes_PCA2RA(const msgRevokePsnymCertRes_PCA2RA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  ::memcpy(&uinoofpsnymstoberevoked_, &from.uinoofpsnymstoberevoked_,
    static_cast<size_t>(reinterpret_cast<char*>(&ireqtype_) -
    reinterpret_cast<char*>(&uinoofpsnymstoberevoked_)) + sizeof(ireqtype_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgRevokePsnymCertRes_PCA2RA)
}

void msgRevokePsnymCertRes_PCA2RA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgRevokePsnymCertRes_PCA2RA_Interfaces_2eproto.base);
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uinoofsuccessfullyrevokedtickets_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(uinoofsuccessfullyrevokedtickets_));
  ireqtype_ = -1;
}

msgRevokePsnymCertRes_PCA2RA::~msgRevokePsnymCertRes_PCA2RA() {
  // @@protoc_insertion_point(destructor:interfaces.msgRevokePsnymCertRes_PCA2RA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgRevokePsnymCertRes_PCA2RA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stsigner_;
}

void msgRevokePsnymCertRes_PCA2RA::ArenaDtor(void* object) {
  msgRevokePsnymCertRes_PCA2RA* _this = reinterpret_cast< msgRevokePsnymCertRes_PCA2RA* >(object);
  (void)_this;
}
void msgRevokePsnymCertRes_PCA2RA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgRevokePsnymCertRes_PCA2RA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgRevokePsnymCertRes_PCA2RA& msgRevokePsnymCertRes_PCA2RA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgRevokePsnymCertRes_PCA2RA_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgRevokePsnymCertRes_PCA2RA::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgRevokePsnymCertRes_PCA2RA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(stsigner_ != nullptr);
    stsigner_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&uinoofpsnymstoberevoked_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uinoofsuccessfullyrevokedtickets_) -
        reinterpret_cast<char*>(&uinoofpsnymstoberevoked_)) + sizeof(uinoofsuccessfullyrevokedtickets_));
    ireqtype_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgRevokePsnymCertRes_PCA2RA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiNoOfPsnymsToBeRevoked = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uinoofpsnymstoberevoked(&has_bits);
          uinoofpsnymstoberevoked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiNoOfSuccessfullyRevokedPsnyms = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_uinoofsuccessfullyrevokedpsnyms(&has_bits);
          uinoofsuccessfullyrevokedpsnyms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiNoOfSuccessfullyRevokedTickets = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_uinoofsuccessfullyrevokedtickets(&has_bits);
          uinoofsuccessfullyrevokedtickets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgRevokePsnymCertRes_PCA2RA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgRevokePsnymCertRes_PCA2RA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required uint32 uiNoOfPsnymsToBeRevoked = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uinoofpsnymstoberevoked(), target);
  }

  // required uint32 uiNoOfSuccessfullyRevokedPsnyms = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_uinoofsuccessfullyrevokedpsnyms(), target);
  }

  // required uint32 uiNoOfSuccessfullyRevokedTickets = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_uinoofsuccessfullyrevokedtickets(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgRevokePsnymCertRes_PCA2RA)
  return target;
}

size_t msgRevokePsnymCertRes_PCA2RA::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgRevokePsnymCertRes_PCA2RA)
  size_t total_size = 0;

  if (_internal_has_uinoofpsnymstoberevoked()) {
    // required uint32 uiNoOfPsnymsToBeRevoked = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofpsnymstoberevoked());
  }

  if (_internal_has_uinoofsuccessfullyrevokedpsnyms()) {
    // required uint32 uiNoOfSuccessfullyRevokedPsnyms = 4 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofsuccessfullyrevokedpsnyms());
  }

  if (_internal_has_uinoofsuccessfullyrevokedtickets()) {
    // required uint32 uiNoOfSuccessfullyRevokedTickets = 5 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofsuccessfullyrevokedtickets());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  return total_size;
}
size_t msgRevokePsnymCertRes_PCA2RA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgRevokePsnymCertRes_PCA2RA)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001e) ^ 0x0000001e) == 0) {  // All required fields are present.
    // required uint32 uiNoOfPsnymsToBeRevoked = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofpsnymstoberevoked());

    // required uint32 uiNoOfSuccessfullyRevokedPsnyms = 4 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofsuccessfullyrevokedpsnyms());

    // required uint32 uiNoOfSuccessfullyRevokedTickets = 5 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofsuccessfullyrevokedtickets());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .interfaces.msgSignerInfo stSigner = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsigner_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgRevokePsnymCertRes_PCA2RA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgRevokePsnymCertRes_PCA2RA)
  GOOGLE_DCHECK_NE(&from, this);
  const msgRevokePsnymCertRes_PCA2RA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgRevokePsnymCertRes_PCA2RA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgRevokePsnymCertRes_PCA2RA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgRevokePsnymCertRes_PCA2RA)
    MergeFrom(*source);
  }
}

void msgRevokePsnymCertRes_PCA2RA::MergeFrom(const msgRevokePsnymCertRes_PCA2RA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgRevokePsnymCertRes_PCA2RA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000002u) {
      uinoofpsnymstoberevoked_ = from.uinoofpsnymstoberevoked_;
    }
    if (cached_has_bits & 0x00000004u) {
      uinoofsuccessfullyrevokedpsnyms_ = from.uinoofsuccessfullyrevokedpsnyms_;
    }
    if (cached_has_bits & 0x00000008u) {
      uinoofsuccessfullyrevokedtickets_ = from.uinoofsuccessfullyrevokedtickets_;
    }
    if (cached_has_bits & 0x00000010u) {
      ireqtype_ = from.ireqtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgRevokePsnymCertRes_PCA2RA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgRevokePsnymCertRes_PCA2RA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgRevokePsnymCertRes_PCA2RA::CopyFrom(const msgRevokePsnymCertRes_PCA2RA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgRevokePsnymCertRes_PCA2RA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgRevokePsnymCertRes_PCA2RA::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  return true;
}

void msgRevokePsnymCertRes_PCA2RA::InternalSwap(msgRevokePsnymCertRes_PCA2RA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgRevokePsnymCertRes_PCA2RA, uinoofsuccessfullyrevokedtickets_)
      + sizeof(msgRevokePsnymCertRes_PCA2RA::uinoofsuccessfullyrevokedtickets_)
      - PROTOBUF_FIELD_OFFSET(msgRevokePsnymCertRes_PCA2RA, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(ireqtype_, other->ireqtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgRevokePsnymCertRes_PCA2RA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgRevokeX509CertReq_RA2LTCA::InitAsDefaultInstance() {
  ::interfaces::_msgRevokeX509CertReq_RA2LTCA_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgRevokeX509CertReq_RA2LTCA_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgRevokeX509CertReq_RA2LTCA::_Internal {
 public:
  using HasBits = decltype(std::declval<msgRevokeX509CertReq_RA2LTCA>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgRevokeX509CertReq_RA2LTCA* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uinoofpsnymstoberevoked(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::interfaces::msgSignature& stsign(const msgRevokeX509CertReq_RA2LTCA* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003c) ^ 0x0000003c) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgRevokeX509CertReq_RA2LTCA::_Internal::stsigner(const msgRevokeX509CertReq_RA2LTCA* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgSignature&
msgRevokeX509CertReq_RA2LTCA::_Internal::stsign(const msgRevokeX509CertReq_RA2LTCA* msg) {
  return *msg->stsign_;
}
msgRevokeX509CertReq_RA2LTCA::msgRevokeX509CertReq_RA2LTCA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  strticketserialno_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgRevokeX509CertReq_RA2LTCA)
}
msgRevokeX509CertReq_RA2LTCA::msgRevokeX509CertReq_RA2LTCA(const msgRevokeX509CertReq_RA2LTCA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      strticketserialno_(from.strticketserialno_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&uinoofpsnymstoberevoked_, &from.uinoofpsnymstoberevoked_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&uinoofpsnymstoberevoked_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgRevokeX509CertReq_RA2LTCA)
}

void msgRevokeX509CertReq_RA2LTCA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgRevokeX509CertReq_RA2LTCA_Interfaces_2eproto.base);
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uinoofpsnymstoberevoked_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(uinoofpsnymstoberevoked_));
  ireqtype_ = -1;
  inonce_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgRevokeX509CertReq_RA2LTCA::~msgRevokeX509CertReq_RA2LTCA() {
  // @@protoc_insertion_point(destructor:interfaces.msgRevokeX509CertReq_RA2LTCA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgRevokeX509CertReq_RA2LTCA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgRevokeX509CertReq_RA2LTCA::ArenaDtor(void* object) {
  msgRevokeX509CertReq_RA2LTCA* _this = reinterpret_cast< msgRevokeX509CertReq_RA2LTCA* >(object);
  (void)_this;
}
void msgRevokeX509CertReq_RA2LTCA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgRevokeX509CertReq_RA2LTCA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgRevokeX509CertReq_RA2LTCA& msgRevokeX509CertReq_RA2LTCA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgRevokeX509CertReq_RA2LTCA_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgRevokeX509CertReq_RA2LTCA::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgRevokeX509CertReq_RA2LTCA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strticketserialno_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    uinoofpsnymstoberevoked_ = 0u;
    ireqtype_ = -1;
    inonce_ = -1;
    ttimestamp_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgRevokeX509CertReq_RA2LTCA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiNoOfPsnymsToBeRevoked = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uinoofpsnymstoberevoked(&has_bits);
          uinoofpsnymstoberevoked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string strTicketSerialNo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_strticketserialno();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgRevokeX509CertReq_RA2LTCA.strTicketSerialNo");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgRevokeX509CertReq_RA2LTCA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgRevokeX509CertReq_RA2LTCA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required uint32 uiNoOfPsnymsToBeRevoked = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uinoofpsnymstoberevoked(), target);
  }

  // repeated string strTicketSerialNo = 4;
  for (int i = 0, n = this->_internal_strticketserialno_size(); i < n; i++) {
    const auto& s = this->_internal_strticketserialno(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgRevokeX509CertReq_RA2LTCA.strTicketSerialNo");
    target = stream->WriteString(4, s, target);
  }

  // required int32 iNonce = 5 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 6 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_ttimestamp(), target);
  }

  // optional .interfaces.msgSignature stSign = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgRevokeX509CertReq_RA2LTCA)
  return target;
}

size_t msgRevokeX509CertReq_RA2LTCA::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgRevokeX509CertReq_RA2LTCA)
  size_t total_size = 0;

  if (_internal_has_uinoofpsnymstoberevoked()) {
    // required uint32 uiNoOfPsnymsToBeRevoked = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofpsnymstoberevoked());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgRevokeX509CertReq_RA2LTCA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgRevokeX509CertReq_RA2LTCA)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003c) ^ 0x0000003c) == 0) {  // All required fields are present.
    // required uint32 uiNoOfPsnymsToBeRevoked = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofpsnymstoberevoked());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iNonce = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int64 tTimeStamp = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string strTicketSerialNo = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(strticketserialno_.size());
  for (int i = 0, n = strticketserialno_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      strticketserialno_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .interfaces.msgSignerInfo stSigner = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsigner_);
    }

    // optional .interfaces.msgSignature stSign = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsign_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgRevokeX509CertReq_RA2LTCA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgRevokeX509CertReq_RA2LTCA)
  GOOGLE_DCHECK_NE(&from, this);
  const msgRevokeX509CertReq_RA2LTCA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgRevokeX509CertReq_RA2LTCA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgRevokeX509CertReq_RA2LTCA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgRevokeX509CertReq_RA2LTCA)
    MergeFrom(*source);
  }
}

void msgRevokeX509CertReq_RA2LTCA::MergeFrom(const msgRevokeX509CertReq_RA2LTCA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgRevokeX509CertReq_RA2LTCA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  strticketserialno_.MergeFrom(from.strticketserialno_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000004u) {
      uinoofpsnymstoberevoked_ = from.uinoofpsnymstoberevoked_;
    }
    if (cached_has_bits & 0x00000008u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000010u) {
      inonce_ = from.inonce_;
    }
    if (cached_has_bits & 0x00000020u) {
      ttimestamp_ = from.ttimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgRevokeX509CertReq_RA2LTCA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgRevokeX509CertReq_RA2LTCA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgRevokeX509CertReq_RA2LTCA::CopyFrom(const msgRevokeX509CertReq_RA2LTCA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgRevokeX509CertReq_RA2LTCA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgRevokeX509CertReq_RA2LTCA::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  return true;
}

void msgRevokeX509CertReq_RA2LTCA::InternalSwap(msgRevokeX509CertReq_RA2LTCA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strticketserialno_.InternalSwap(&other->strticketserialno_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgRevokeX509CertReq_RA2LTCA, uinoofpsnymstoberevoked_)
      + sizeof(msgRevokeX509CertReq_RA2LTCA::uinoofpsnymstoberevoked_)
      - PROTOBUF_FIELD_OFFSET(msgRevokeX509CertReq_RA2LTCA, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(ireqtype_, other->ireqtype_);
  swap(inonce_, other->inonce_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgRevokeX509CertReq_RA2LTCA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo::InitAsDefaultInstance() {
  ::interfaces::_msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo_default_instance_._instance.get_mutable()->stdetailederrinfo_ = const_cast< ::interfaces::msgError*>(
      ::interfaces::msgError::internal_default_instance());
}
class msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo>()._has_bits_);
  static void set_has_ierrgensource(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::interfaces::msgError& stdetailederrinfo(const msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo* msg);
  static void set_has_stdetailederrinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::interfaces::msgError&
msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo::_Internal::stdetailederrinfo(const msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo* msg) {
  return *msg->stdetailederrinfo_;
}
msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo::msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgRevokePsnymCertRes_RA2P.msgPsnymRevocationErrInfo)
}
msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo::msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo(const msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stdetailederrinfo()) {
    stdetailederrinfo_ = new ::interfaces::msgError(*from.stdetailederrinfo_);
  } else {
    stdetailederrinfo_ = nullptr;
  }
  ierrgensource_ = from.ierrgensource_;
  // @@protoc_insertion_point(copy_constructor:interfaces.msgRevokePsnymCertRes_RA2P.msgPsnymRevocationErrInfo)
}

void msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo_Interfaces_2eproto.base);
  stdetailederrinfo_ = nullptr;
  ierrgensource_ = -1;
}

msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo::~msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo() {
  // @@protoc_insertion_point(destructor:interfaces.msgRevokePsnymCertRes_RA2P.msgPsnymRevocationErrInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stdetailederrinfo_;
}

void msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo::ArenaDtor(void* object) {
  msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo* _this = reinterpret_cast< msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo* >(object);
  (void)_this;
}
void msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo& msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgRevokePsnymCertRes_RA2P.msgPsnymRevocationErrInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stdetailederrinfo_ != nullptr);
      stdetailederrinfo_->Clear();
    }
    ierrgensource_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iErrGenSource = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ierrgensource(&has_bits);
          ierrgensource_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgError stDetailedErrInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stdetailederrinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgRevokePsnymCertRes_RA2P.msgPsnymRevocationErrInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iErrGenSource = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ierrgensource(), target);
  }

  // required .interfaces.msgError stDetailedErrInfo = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stdetailederrinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgRevokePsnymCertRes_RA2P.msgPsnymRevocationErrInfo)
  return target;
}

size_t msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgRevokePsnymCertRes_RA2P.msgPsnymRevocationErrInfo)
  size_t total_size = 0;

  if (_internal_has_stdetailederrinfo()) {
    // required .interfaces.msgError stDetailedErrInfo = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stdetailederrinfo_);
  }

  if (_internal_has_ierrgensource()) {
    // required int32 iErrGenSource = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ierrgensource());
  }

  return total_size;
}
size_t msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgRevokePsnymCertRes_RA2P.msgPsnymRevocationErrInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .interfaces.msgError stDetailedErrInfo = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stdetailederrinfo_);

    // required int32 iErrGenSource = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ierrgensource());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgRevokePsnymCertRes_RA2P.msgPsnymRevocationErrInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgRevokePsnymCertRes_RA2P.msgPsnymRevocationErrInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgRevokePsnymCertRes_RA2P.msgPsnymRevocationErrInfo)
    MergeFrom(*source);
  }
}

void msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo::MergeFrom(const msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgRevokePsnymCertRes_RA2P.msgPsnymRevocationErrInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stdetailederrinfo()->::interfaces::msgError::MergeFrom(from._internal_stdetailederrinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      ierrgensource_ = from.ierrgensource_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgRevokePsnymCertRes_RA2P.msgPsnymRevocationErrInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo::CopyFrom(const msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgRevokePsnymCertRes_RA2P.msgPsnymRevocationErrInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stdetailederrinfo()) {
    if (!stdetailederrinfo_->IsInitialized()) return false;
  }
  return true;
}

void msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo::InternalSwap(msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stdetailederrinfo_, other->stdetailederrinfo_);
  swap(ierrgensource_, other->ierrgensource_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgRevokePsnymCertRes_RA2P::InitAsDefaultInstance() {
  ::interfaces::_msgRevokePsnymCertRes_RA2P_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgRevokePsnymCertRes_RA2P_default_instance_._instance.get_mutable()->sterrinfo_ = const_cast< ::interfaces::msgError*>(
      ::interfaces::msgError::internal_default_instance());
  ::interfaces::_msgRevokePsnymCertRes_RA2P_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgRevokePsnymCertRes_RA2P::_Internal {
 public:
  using HasBits = decltype(std::declval<msgRevokePsnymCertRes_RA2P>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgRevokePsnymCertRes_RA2P* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uinoofpsnymstoberevoked(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_uinoofsuccessfullyrevokedx509cert(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_uinoofsuccessfullyrevokedpsnyms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::interfaces::msgError& sterrinfo(const msgRevokePsnymCertRes_RA2P* msg);
  static void set_has_sterrinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::interfaces::msgSignature& stsign(const msgRevokePsnymCertRes_RA2P* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001fa) ^ 0x000001fa) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgRevokePsnymCertRes_RA2P::_Internal::stsigner(const msgRevokePsnymCertRes_RA2P* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgError&
msgRevokePsnymCertRes_RA2P::_Internal::sterrinfo(const msgRevokePsnymCertRes_RA2P* msg) {
  return *msg->sterrinfo_;
}
const ::interfaces::msgSignature&
msgRevokePsnymCertRes_RA2P::_Internal::stsign(const msgRevokePsnymCertRes_RA2P* msg) {
  return *msg->stsign_;
}
msgRevokePsnymCertRes_RA2P::msgRevokePsnymCertRes_RA2P(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pstpsnymrevocationerrinfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgRevokePsnymCertRes_RA2P)
}
msgRevokePsnymCertRes_RA2P::msgRevokePsnymCertRes_RA2P(const msgRevokePsnymCertRes_RA2P& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pstpsnymrevocationerrinfo_(from.pstpsnymrevocationerrinfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_sterrinfo()) {
    sterrinfo_ = new ::interfaces::msgError(*from.sterrinfo_);
  } else {
    sterrinfo_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&uinoofpsnymstoberevoked_, &from.uinoofpsnymstoberevoked_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&uinoofpsnymstoberevoked_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgRevokePsnymCertRes_RA2P)
}

void msgRevokePsnymCertRes_RA2P::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgRevokePsnymCertRes_RA2P_Interfaces_2eproto.base);
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uinoofsuccessfullyrevokedpsnyms_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(uinoofsuccessfullyrevokedpsnyms_));
  ireqtype_ = -1;
  inonce_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgRevokePsnymCertRes_RA2P::~msgRevokePsnymCertRes_RA2P() {
  // @@protoc_insertion_point(destructor:interfaces.msgRevokePsnymCertRes_RA2P)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgRevokePsnymCertRes_RA2P::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete sterrinfo_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgRevokePsnymCertRes_RA2P::ArenaDtor(void* object) {
  msgRevokePsnymCertRes_RA2P* _this = reinterpret_cast< msgRevokePsnymCertRes_RA2P* >(object);
  (void)_this;
}
void msgRevokePsnymCertRes_RA2P::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgRevokePsnymCertRes_RA2P::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgRevokePsnymCertRes_RA2P& msgRevokePsnymCertRes_RA2P::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgRevokePsnymCertRes_RA2P_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgRevokePsnymCertRes_RA2P::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgRevokePsnymCertRes_RA2P)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pstpsnymrevocationerrinfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sterrinfo_ != nullptr);
      sterrinfo_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&uinoofpsnymstoberevoked_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uinoofsuccessfullyrevokedpsnyms_) -
        reinterpret_cast<char*>(&uinoofpsnymstoberevoked_)) + sizeof(uinoofsuccessfullyrevokedpsnyms_));
    ireqtype_ = -1;
    inonce_ = -1;
  }
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgRevokePsnymCertRes_RA2P::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiNoOfPsnymsToBeRevoked = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uinoofpsnymstoberevoked(&has_bits);
          uinoofpsnymstoberevoked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiNoOfSuccessfullyRevokedX509Cert = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_uinoofsuccessfullyrevokedx509cert(&has_bits);
          uinoofsuccessfullyrevokedx509cert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiNoOfSuccessfullyRevokedPsnyms = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_uinoofsuccessfullyrevokedpsnyms(&has_bits);
          uinoofsuccessfullyrevokedpsnyms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .interfaces.msgRevokePsnymCertRes_RA2P.msgPsnymRevocationErrInfo pstPsnymRevocationErrInfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pstpsnymrevocationerrinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgError stErrInfo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_sterrinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgRevokePsnymCertRes_RA2P::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgRevokePsnymCertRes_RA2P)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required uint32 uiNoOfPsnymsToBeRevoked = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uinoofpsnymstoberevoked(), target);
  }

  // required uint32 uiNoOfSuccessfullyRevokedX509Cert = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_uinoofsuccessfullyrevokedx509cert(), target);
  }

  // required uint32 uiNoOfSuccessfullyRevokedPsnyms = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_uinoofsuccessfullyrevokedpsnyms(), target);
  }

  // repeated .interfaces.msgRevokePsnymCertRes_RA2P.msgPsnymRevocationErrInfo pstPsnymRevocationErrInfo = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pstpsnymrevocationerrinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_pstpsnymrevocationerrinfo(i), target, stream);
  }

  // required int32 iNonce = 7 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 8 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_ttimestamp(), target);
  }

  // required .interfaces.msgError stErrInfo = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::sterrinfo(this), target, stream);
  }

  // optional .interfaces.msgSignature stSign = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgRevokePsnymCertRes_RA2P)
  return target;
}

size_t msgRevokePsnymCertRes_RA2P::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgRevokePsnymCertRes_RA2P)
  size_t total_size = 0;

  if (_internal_has_sterrinfo()) {
    // required .interfaces.msgError stErrInfo = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);
  }

  if (_internal_has_uinoofpsnymstoberevoked()) {
    // required uint32 uiNoOfPsnymsToBeRevoked = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofpsnymstoberevoked());
  }

  if (_internal_has_uinoofsuccessfullyrevokedx509cert()) {
    // required uint32 uiNoOfSuccessfullyRevokedX509Cert = 4 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofsuccessfullyrevokedx509cert());
  }

  if (_internal_has_uinoofsuccessfullyrevokedpsnyms()) {
    // required uint32 uiNoOfSuccessfullyRevokedPsnyms = 5 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofsuccessfullyrevokedpsnyms());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgRevokePsnymCertRes_RA2P::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgRevokePsnymCertRes_RA2P)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000001fa) ^ 0x000001fa) == 0) {  // All required fields are present.
    // required .interfaces.msgError stErrInfo = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);

    // required uint32 uiNoOfPsnymsToBeRevoked = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofpsnymstoberevoked());

    // required uint32 uiNoOfSuccessfullyRevokedX509Cert = 4 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofsuccessfullyrevokedx509cert());

    // required uint32 uiNoOfSuccessfullyRevokedPsnyms = 5 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofsuccessfullyrevokedpsnyms());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iNonce = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int64 tTimeStamp = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .interfaces.msgRevokePsnymCertRes_RA2P.msgPsnymRevocationErrInfo pstPsnymRevocationErrInfo = 6;
  total_size += 1UL * this->_internal_pstpsnymrevocationerrinfo_size();
  for (const auto& msg : this->pstpsnymrevocationerrinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsigner_);
  }

  // optional .interfaces.msgSignature stSign = 10;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsign_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgRevokePsnymCertRes_RA2P::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgRevokePsnymCertRes_RA2P)
  GOOGLE_DCHECK_NE(&from, this);
  const msgRevokePsnymCertRes_RA2P* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgRevokePsnymCertRes_RA2P>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgRevokePsnymCertRes_RA2P)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgRevokePsnymCertRes_RA2P)
    MergeFrom(*source);
  }
}

void msgRevokePsnymCertRes_RA2P::MergeFrom(const msgRevokePsnymCertRes_RA2P& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgRevokePsnymCertRes_RA2P)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pstpsnymrevocationerrinfo_.MergeFrom(from.pstpsnymrevocationerrinfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sterrinfo()->::interfaces::msgError::MergeFrom(from._internal_sterrinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000008u) {
      uinoofpsnymstoberevoked_ = from.uinoofpsnymstoberevoked_;
    }
    if (cached_has_bits & 0x00000010u) {
      uinoofsuccessfullyrevokedx509cert_ = from.uinoofsuccessfullyrevokedx509cert_;
    }
    if (cached_has_bits & 0x00000020u) {
      uinoofsuccessfullyrevokedpsnyms_ = from.uinoofsuccessfullyrevokedpsnyms_;
    }
    if (cached_has_bits & 0x00000040u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000080u) {
      inonce_ = from.inonce_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_ttimestamp(from._internal_ttimestamp());
  }
}

void msgRevokePsnymCertRes_RA2P::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgRevokePsnymCertRes_RA2P)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgRevokePsnymCertRes_RA2P::CopyFrom(const msgRevokePsnymCertRes_RA2P& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgRevokePsnymCertRes_RA2P)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgRevokePsnymCertRes_RA2P::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pstpsnymrevocationerrinfo_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  if (_internal_has_sterrinfo()) {
    if (!sterrinfo_->IsInitialized()) return false;
  }
  return true;
}

void msgRevokePsnymCertRes_RA2P::InternalSwap(msgRevokePsnymCertRes_RA2P* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pstpsnymrevocationerrinfo_.InternalSwap(&other->pstpsnymrevocationerrinfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgRevokePsnymCertRes_RA2P, uinoofsuccessfullyrevokedpsnyms_)
      + sizeof(msgRevokePsnymCertRes_RA2P::uinoofsuccessfullyrevokedpsnyms_)
      - PROTOBUF_FIELD_OFFSET(msgRevokePsnymCertRes_RA2P, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(ireqtype_, other->ireqtype_);
  swap(inonce_, other->inonce_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgRevokePsnymCertRes_RA2P::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgPsnymResolutionReq_Police2RA::InitAsDefaultInstance() {
  ::interfaces::_msgPsnymResolutionReq_Police2RA_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgPsnymResolutionReq_Police2RA_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgPsnymResolutionReq_Police2RA::_Internal {
 public:
  using HasBits = decltype(std::declval<msgPsnymResolutionReq_Police2RA>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgPsnymResolutionReq_Police2RA* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uinoofpsnymstoberesolved(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ipoliceid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_iraidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::interfaces::msgSignature& stsign(const msgPsnymResolutionReq_Police2RA* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000fc) ^ 0x000000fc) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgPsnymResolutionReq_Police2RA::_Internal::stsigner(const msgPsnymResolutionReq_Police2RA* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgSignature&
msgPsnymResolutionReq_Police2RA::_Internal::stsign(const msgPsnymResolutionReq_Police2RA* msg) {
  return *msg->stsign_;
}
msgPsnymResolutionReq_Police2RA::msgPsnymResolutionReq_Police2RA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  strpsnymsserialnotoberesolved_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgPsnymResolutionReq_Police2RA)
}
msgPsnymResolutionReq_Police2RA::msgPsnymResolutionReq_Police2RA(const msgPsnymResolutionReq_Police2RA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      strpsnymsserialnotoberesolved_(from.strpsnymsserialnotoberesolved_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&uinoofpsnymstoberesolved_, &from.uinoofpsnymstoberesolved_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&uinoofpsnymstoberesolved_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgPsnymResolutionReq_Police2RA)
}

void msgPsnymResolutionReq_Police2RA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgPsnymResolutionReq_Police2RA_Interfaces_2eproto.base);
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uinoofpsnymstoberesolved_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(uinoofpsnymstoberesolved_));
  ireqtype_ = -1;
  ipoliceid_ = -1;
  iraidrange_ = -1;
  inonce_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgPsnymResolutionReq_Police2RA::~msgPsnymResolutionReq_Police2RA() {
  // @@protoc_insertion_point(destructor:interfaces.msgPsnymResolutionReq_Police2RA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgPsnymResolutionReq_Police2RA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgPsnymResolutionReq_Police2RA::ArenaDtor(void* object) {
  msgPsnymResolutionReq_Police2RA* _this = reinterpret_cast< msgPsnymResolutionReq_Police2RA* >(object);
  (void)_this;
}
void msgPsnymResolutionReq_Police2RA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgPsnymResolutionReq_Police2RA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgPsnymResolutionReq_Police2RA& msgPsnymResolutionReq_Police2RA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgPsnymResolutionReq_Police2RA_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgPsnymResolutionReq_Police2RA::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgPsnymResolutionReq_Police2RA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strpsnymsserialnotoberesolved_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    uinoofpsnymstoberesolved_ = 0u;
    ireqtype_ = -1;
    ipoliceid_ = -1;
    iraidrange_ = -1;
    inonce_ = -1;
    ttimestamp_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgPsnymResolutionReq_Police2RA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uinoofpsnymstoberesolved(&has_bits);
          uinoofpsnymstoberesolved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string strPsnymsSerialNoToBeResolved = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_strpsnymsserialnotoberesolved();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgPsnymResolutionReq_Police2RA.strPsnymsSerialNoToBeResolved");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 iPoliceId = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ipoliceid(&has_bits);
          ipoliceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iRAIdRange = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_iraidrange(&has_bits);
          iraidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgPsnymResolutionReq_Police2RA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgPsnymResolutionReq_Police2RA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uinoofpsnymstoberesolved(), target);
  }

  // repeated string strPsnymsSerialNoToBeResolved = 4;
  for (int i = 0, n = this->_internal_strpsnymsserialnotoberesolved_size(); i < n; i++) {
    const auto& s = this->_internal_strpsnymsserialnotoberesolved(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgPsnymResolutionReq_Police2RA.strPsnymsSerialNoToBeResolved");
    target = stream->WriteString(4, s, target);
  }

  // required int32 iPoliceId = 5 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_ipoliceid(), target);
  }

  // required int32 iRAIdRange = 6 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_iraidrange(), target);
  }

  // required int32 iNonce = 7 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 8 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_ttimestamp(), target);
  }

  // optional .interfaces.msgSignature stSign = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgPsnymResolutionReq_Police2RA)
  return target;
}

size_t msgPsnymResolutionReq_Police2RA::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgPsnymResolutionReq_Police2RA)
  size_t total_size = 0;

  if (_internal_has_uinoofpsnymstoberesolved()) {
    // required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofpsnymstoberesolved());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_ipoliceid()) {
    // required int32 iPoliceId = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipoliceid());
  }

  if (_internal_has_iraidrange()) {
    // required int32 iRAIdRange = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iraidrange());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgPsnymResolutionReq_Police2RA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgPsnymResolutionReq_Police2RA)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000fc) ^ 0x000000fc) == 0) {  // All required fields are present.
    // required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofpsnymstoberesolved());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iPoliceId = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipoliceid());

    // required int32 iRAIdRange = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iraidrange());

    // required int32 iNonce = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int64 tTimeStamp = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string strPsnymsSerialNoToBeResolved = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(strpsnymsserialnotoberesolved_.size());
  for (int i = 0, n = strpsnymsserialnotoberesolved_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      strpsnymsserialnotoberesolved_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .interfaces.msgSignerInfo stSigner = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsigner_);
    }

    // optional .interfaces.msgSignature stSign = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsign_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgPsnymResolutionReq_Police2RA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgPsnymResolutionReq_Police2RA)
  GOOGLE_DCHECK_NE(&from, this);
  const msgPsnymResolutionReq_Police2RA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgPsnymResolutionReq_Police2RA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgPsnymResolutionReq_Police2RA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgPsnymResolutionReq_Police2RA)
    MergeFrom(*source);
  }
}

void msgPsnymResolutionReq_Police2RA::MergeFrom(const msgPsnymResolutionReq_Police2RA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgPsnymResolutionReq_Police2RA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  strpsnymsserialnotoberesolved_.MergeFrom(from.strpsnymsserialnotoberesolved_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000004u) {
      uinoofpsnymstoberesolved_ = from.uinoofpsnymstoberesolved_;
    }
    if (cached_has_bits & 0x00000008u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000010u) {
      ipoliceid_ = from.ipoliceid_;
    }
    if (cached_has_bits & 0x00000020u) {
      iraidrange_ = from.iraidrange_;
    }
    if (cached_has_bits & 0x00000040u) {
      inonce_ = from.inonce_;
    }
    if (cached_has_bits & 0x00000080u) {
      ttimestamp_ = from.ttimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgPsnymResolutionReq_Police2RA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgPsnymResolutionReq_Police2RA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgPsnymResolutionReq_Police2RA::CopyFrom(const msgPsnymResolutionReq_Police2RA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgPsnymResolutionReq_Police2RA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgPsnymResolutionReq_Police2RA::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  return true;
}

void msgPsnymResolutionReq_Police2RA::InternalSwap(msgPsnymResolutionReq_Police2RA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strpsnymsserialnotoberesolved_.InternalSwap(&other->strpsnymsserialnotoberesolved_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgPsnymResolutionReq_Police2RA, uinoofpsnymstoberesolved_)
      + sizeof(msgPsnymResolutionReq_Police2RA::uinoofpsnymstoberesolved_)
      - PROTOBUF_FIELD_OFFSET(msgPsnymResolutionReq_Police2RA, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(ireqtype_, other->ireqtype_);
  swap(ipoliceid_, other->ipoliceid_);
  swap(iraidrange_, other->iraidrange_);
  swap(inonce_, other->inonce_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgPsnymResolutionReq_Police2RA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgPsnymResolutionReq_RA2PCA::InitAsDefaultInstance() {
  ::interfaces::_msgPsnymResolutionReq_RA2PCA_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgPsnymResolutionReq_RA2PCA_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgPsnymResolutionReq_RA2PCA::_Internal {
 public:
  using HasBits = decltype(std::declval<msgPsnymResolutionReq_RA2PCA>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgPsnymResolutionReq_RA2PCA* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uinoofpsnymstoberesolved(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_iraidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ipcaidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::interfaces::msgSignature& stsign(const msgPsnymResolutionReq_RA2PCA* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000fc) ^ 0x000000fc) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgPsnymResolutionReq_RA2PCA::_Internal::stsigner(const msgPsnymResolutionReq_RA2PCA* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgSignature&
msgPsnymResolutionReq_RA2PCA::_Internal::stsign(const msgPsnymResolutionReq_RA2PCA* msg) {
  return *msg->stsign_;
}
msgPsnymResolutionReq_RA2PCA::msgPsnymResolutionReq_RA2PCA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  strpsnymsserialnotoberesolved_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgPsnymResolutionReq_RA2PCA)
}
msgPsnymResolutionReq_RA2PCA::msgPsnymResolutionReq_RA2PCA(const msgPsnymResolutionReq_RA2PCA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      strpsnymsserialnotoberesolved_(from.strpsnymsserialnotoberesolved_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&uinoofpsnymstoberesolved_, &from.uinoofpsnymstoberesolved_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&uinoofpsnymstoberesolved_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgPsnymResolutionReq_RA2PCA)
}

void msgPsnymResolutionReq_RA2PCA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgPsnymResolutionReq_RA2PCA_Interfaces_2eproto.base);
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uinoofpsnymstoberesolved_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(uinoofpsnymstoberesolved_));
  ireqtype_ = -1;
  iraidrange_ = -1;
  ipcaidrange_ = -1;
  inonce_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgPsnymResolutionReq_RA2PCA::~msgPsnymResolutionReq_RA2PCA() {
  // @@protoc_insertion_point(destructor:interfaces.msgPsnymResolutionReq_RA2PCA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgPsnymResolutionReq_RA2PCA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgPsnymResolutionReq_RA2PCA::ArenaDtor(void* object) {
  msgPsnymResolutionReq_RA2PCA* _this = reinterpret_cast< msgPsnymResolutionReq_RA2PCA* >(object);
  (void)_this;
}
void msgPsnymResolutionReq_RA2PCA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgPsnymResolutionReq_RA2PCA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgPsnymResolutionReq_RA2PCA& msgPsnymResolutionReq_RA2PCA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgPsnymResolutionReq_RA2PCA_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgPsnymResolutionReq_RA2PCA::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgPsnymResolutionReq_RA2PCA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strpsnymsserialnotoberesolved_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    uinoofpsnymstoberesolved_ = 0u;
    ireqtype_ = -1;
    iraidrange_ = -1;
    ipcaidrange_ = -1;
    inonce_ = -1;
    ttimestamp_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgPsnymResolutionReq_RA2PCA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uinoofpsnymstoberesolved(&has_bits);
          uinoofpsnymstoberesolved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string strPsnymsSerialNoToBeResolved = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_strpsnymsserialnotoberesolved();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgPsnymResolutionReq_RA2PCA.strPsnymsSerialNoToBeResolved");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 iRAIdRange = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_iraidrange(&has_bits);
          iraidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iPCAIdRange = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ipcaidrange(&has_bits);
          ipcaidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgPsnymResolutionReq_RA2PCA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgPsnymResolutionReq_RA2PCA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uinoofpsnymstoberesolved(), target);
  }

  // repeated string strPsnymsSerialNoToBeResolved = 4;
  for (int i = 0, n = this->_internal_strpsnymsserialnotoberesolved_size(); i < n; i++) {
    const auto& s = this->_internal_strpsnymsserialnotoberesolved(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgPsnymResolutionReq_RA2PCA.strPsnymsSerialNoToBeResolved");
    target = stream->WriteString(4, s, target);
  }

  // required int32 iRAIdRange = 5 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_iraidrange(), target);
  }

  // required int32 iPCAIdRange = 6 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_ipcaidrange(), target);
  }

  // required int32 iNonce = 7 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 8 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_ttimestamp(), target);
  }

  // optional .interfaces.msgSignature stSign = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgPsnymResolutionReq_RA2PCA)
  return target;
}

size_t msgPsnymResolutionReq_RA2PCA::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgPsnymResolutionReq_RA2PCA)
  size_t total_size = 0;

  if (_internal_has_uinoofpsnymstoberesolved()) {
    // required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofpsnymstoberesolved());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_iraidrange()) {
    // required int32 iRAIdRange = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iraidrange());
  }

  if (_internal_has_ipcaidrange()) {
    // required int32 iPCAIdRange = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipcaidrange());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgPsnymResolutionReq_RA2PCA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgPsnymResolutionReq_RA2PCA)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000fc) ^ 0x000000fc) == 0) {  // All required fields are present.
    // required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofpsnymstoberesolved());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iRAIdRange = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iraidrange());

    // required int32 iPCAIdRange = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipcaidrange());

    // required int32 iNonce = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int64 tTimeStamp = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string strPsnymsSerialNoToBeResolved = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(strpsnymsserialnotoberesolved_.size());
  for (int i = 0, n = strpsnymsserialnotoberesolved_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      strpsnymsserialnotoberesolved_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .interfaces.msgSignerInfo stSigner = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsigner_);
    }

    // optional .interfaces.msgSignature stSign = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsign_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgPsnymResolutionReq_RA2PCA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgPsnymResolutionReq_RA2PCA)
  GOOGLE_DCHECK_NE(&from, this);
  const msgPsnymResolutionReq_RA2PCA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgPsnymResolutionReq_RA2PCA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgPsnymResolutionReq_RA2PCA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgPsnymResolutionReq_RA2PCA)
    MergeFrom(*source);
  }
}

void msgPsnymResolutionReq_RA2PCA::MergeFrom(const msgPsnymResolutionReq_RA2PCA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgPsnymResolutionReq_RA2PCA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  strpsnymsserialnotoberesolved_.MergeFrom(from.strpsnymsserialnotoberesolved_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000004u) {
      uinoofpsnymstoberesolved_ = from.uinoofpsnymstoberesolved_;
    }
    if (cached_has_bits & 0x00000008u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000010u) {
      iraidrange_ = from.iraidrange_;
    }
    if (cached_has_bits & 0x00000020u) {
      ipcaidrange_ = from.ipcaidrange_;
    }
    if (cached_has_bits & 0x00000040u) {
      inonce_ = from.inonce_;
    }
    if (cached_has_bits & 0x00000080u) {
      ttimestamp_ = from.ttimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgPsnymResolutionReq_RA2PCA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgPsnymResolutionReq_RA2PCA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgPsnymResolutionReq_RA2PCA::CopyFrom(const msgPsnymResolutionReq_RA2PCA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgPsnymResolutionReq_RA2PCA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgPsnymResolutionReq_RA2PCA::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  return true;
}

void msgPsnymResolutionReq_RA2PCA::InternalSwap(msgPsnymResolutionReq_RA2PCA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strpsnymsserialnotoberesolved_.InternalSwap(&other->strpsnymsserialnotoberesolved_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgPsnymResolutionReq_RA2PCA, uinoofpsnymstoberesolved_)
      + sizeof(msgPsnymResolutionReq_RA2PCA::uinoofpsnymstoberesolved_)
      - PROTOBUF_FIELD_OFFSET(msgPsnymResolutionReq_RA2PCA, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(ireqtype_, other->ireqtype_);
  swap(iraidrange_, other->iraidrange_);
  swap(ipcaidrange_, other->ipcaidrange_);
  swap(inonce_, other->inonce_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgPsnymResolutionReq_RA2PCA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgPsnymResolutionRes_PCA2RA_msgPsnymResolution::InitAsDefaultInstance() {
  ::interfaces::_msgPsnymResolutionRes_PCA2RA_msgPsnymResolution_default_instance_._instance.get_mutable()->sterrinfo_ = const_cast< ::interfaces::msgError*>(
      ::interfaces::msgError::internal_default_instance());
}
class msgPsnymResolutionRes_PCA2RA_msgPsnymResolution::_Internal {
 public:
  using HasBits = decltype(std::declval<msgPsnymResolutionRes_PCA2RA_msgPsnymResolution>()._has_bits_);
  static void set_has_strpsnymcertserialno(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_strticketserialno(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_strticketidentifiablekey(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::interfaces::msgError& sterrinfo(const msgPsnymResolutionRes_PCA2RA_msgPsnymResolution* msg);
  static void set_has_sterrinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::interfaces::msgError&
msgPsnymResolutionRes_PCA2RA_msgPsnymResolution::_Internal::sterrinfo(const msgPsnymResolutionRes_PCA2RA_msgPsnymResolution* msg) {
  return *msg->sterrinfo_;
}
msgPsnymResolutionRes_PCA2RA_msgPsnymResolution::msgPsnymResolutionRes_PCA2RA_msgPsnymResolution(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgPsnymResolutionRes_PCA2RA.msgPsnymResolution)
}
msgPsnymResolutionRes_PCA2RA_msgPsnymResolution::msgPsnymResolutionRes_PCA2RA_msgPsnymResolution(const msgPsnymResolutionRes_PCA2RA_msgPsnymResolution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strpsnymcertserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strpsnymcertserialno()) {
    strpsnymcertserialno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strpsnymcertserialno(),
      GetArena());
  }
  strticketserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strticketserialno()) {
    strticketserialno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strticketserialno(),
      GetArena());
  }
  strticketidentifiablekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strticketidentifiablekey()) {
    strticketidentifiablekey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strticketidentifiablekey(),
      GetArena());
  }
  if (from._internal_has_sterrinfo()) {
    sterrinfo_ = new ::interfaces::msgError(*from.sterrinfo_);
  } else {
    sterrinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:interfaces.msgPsnymResolutionRes_PCA2RA.msgPsnymResolution)
}

void msgPsnymResolutionRes_PCA2RA_msgPsnymResolution::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgPsnymResolutionRes_PCA2RA_msgPsnymResolution_Interfaces_2eproto.base);
  strpsnymcertserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strticketserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strticketidentifiablekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sterrinfo_ = nullptr;
}

msgPsnymResolutionRes_PCA2RA_msgPsnymResolution::~msgPsnymResolutionRes_PCA2RA_msgPsnymResolution() {
  // @@protoc_insertion_point(destructor:interfaces.msgPsnymResolutionRes_PCA2RA.msgPsnymResolution)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgPsnymResolutionRes_PCA2RA_msgPsnymResolution::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strpsnymcertserialno_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strticketserialno_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strticketidentifiablekey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sterrinfo_;
}

void msgPsnymResolutionRes_PCA2RA_msgPsnymResolution::ArenaDtor(void* object) {
  msgPsnymResolutionRes_PCA2RA_msgPsnymResolution* _this = reinterpret_cast< msgPsnymResolutionRes_PCA2RA_msgPsnymResolution* >(object);
  (void)_this;
}
void msgPsnymResolutionRes_PCA2RA_msgPsnymResolution::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgPsnymResolutionRes_PCA2RA_msgPsnymResolution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgPsnymResolutionRes_PCA2RA_msgPsnymResolution& msgPsnymResolutionRes_PCA2RA_msgPsnymResolution::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgPsnymResolutionRes_PCA2RA_msgPsnymResolution_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgPsnymResolutionRes_PCA2RA_msgPsnymResolution::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgPsnymResolutionRes_PCA2RA.msgPsnymResolution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      strpsnymcertserialno_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      strticketserialno_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      strticketidentifiablekey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(sterrinfo_ != nullptr);
      sterrinfo_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgPsnymResolutionRes_PCA2RA_msgPsnymResolution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string strPsnymCertSerialNo = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_strpsnymcertserialno();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgPsnymResolutionRes_PCA2RA.msgPsnymResolution.strPsnymCertSerialNo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strTicketSerialNo = 2 [default = ""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_strticketserialno();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgPsnymResolutionRes_PCA2RA.msgPsnymResolution.strTicketSerialNo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strTicketIdentifiableKey = 3 [default = ""];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_strticketidentifiablekey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgPsnymResolutionRes_PCA2RA.msgPsnymResolution.strTicketIdentifiableKey");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgError stErrInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sterrinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgPsnymResolutionRes_PCA2RA_msgPsnymResolution::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgPsnymResolutionRes_PCA2RA.msgPsnymResolution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string strPsnymCertSerialNo = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strpsnymcertserialno().data(), static_cast<int>(this->_internal_strpsnymcertserialno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgPsnymResolutionRes_PCA2RA.msgPsnymResolution.strPsnymCertSerialNo");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_strpsnymcertserialno(), target);
  }

  // required string strTicketSerialNo = 2 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strticketserialno().data(), static_cast<int>(this->_internal_strticketserialno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgPsnymResolutionRes_PCA2RA.msgPsnymResolution.strTicketSerialNo");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_strticketserialno(), target);
  }

  // required string strTicketIdentifiableKey = 3 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strticketidentifiablekey().data(), static_cast<int>(this->_internal_strticketidentifiablekey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgPsnymResolutionRes_PCA2RA.msgPsnymResolution.strTicketIdentifiableKey");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_strticketidentifiablekey(), target);
  }

  // required .interfaces.msgError stErrInfo = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::sterrinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgPsnymResolutionRes_PCA2RA.msgPsnymResolution)
  return target;
}

size_t msgPsnymResolutionRes_PCA2RA_msgPsnymResolution::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgPsnymResolutionRes_PCA2RA.msgPsnymResolution)
  size_t total_size = 0;

  if (_internal_has_strpsnymcertserialno()) {
    // required string strPsnymCertSerialNo = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpsnymcertserialno());
  }

  if (_internal_has_strticketserialno()) {
    // required string strTicketSerialNo = 2 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticketserialno());
  }

  if (_internal_has_strticketidentifiablekey()) {
    // required string strTicketIdentifiableKey = 3 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticketidentifiablekey());
  }

  if (_internal_has_sterrinfo()) {
    // required .interfaces.msgError stErrInfo = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);
  }

  return total_size;
}
size_t msgPsnymResolutionRes_PCA2RA_msgPsnymResolution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgPsnymResolutionRes_PCA2RA.msgPsnymResolution)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string strPsnymCertSerialNo = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpsnymcertserialno());

    // required string strTicketSerialNo = 2 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticketserialno());

    // required string strTicketIdentifiableKey = 3 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticketidentifiablekey());

    // required .interfaces.msgError stErrInfo = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgPsnymResolutionRes_PCA2RA_msgPsnymResolution::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgPsnymResolutionRes_PCA2RA.msgPsnymResolution)
  GOOGLE_DCHECK_NE(&from, this);
  const msgPsnymResolutionRes_PCA2RA_msgPsnymResolution* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgPsnymResolutionRes_PCA2RA_msgPsnymResolution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgPsnymResolutionRes_PCA2RA.msgPsnymResolution)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgPsnymResolutionRes_PCA2RA.msgPsnymResolution)
    MergeFrom(*source);
  }
}

void msgPsnymResolutionRes_PCA2RA_msgPsnymResolution::MergeFrom(const msgPsnymResolutionRes_PCA2RA_msgPsnymResolution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgPsnymResolutionRes_PCA2RA.msgPsnymResolution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strpsnymcertserialno(from._internal_strpsnymcertserialno());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_strticketserialno(from._internal_strticketserialno());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_strticketidentifiablekey(from._internal_strticketidentifiablekey());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_sterrinfo()->::interfaces::msgError::MergeFrom(from._internal_sterrinfo());
    }
  }
}

void msgPsnymResolutionRes_PCA2RA_msgPsnymResolution::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgPsnymResolutionRes_PCA2RA.msgPsnymResolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgPsnymResolutionRes_PCA2RA_msgPsnymResolution::CopyFrom(const msgPsnymResolutionRes_PCA2RA_msgPsnymResolution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgPsnymResolutionRes_PCA2RA.msgPsnymResolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgPsnymResolutionRes_PCA2RA_msgPsnymResolution::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_sterrinfo()) {
    if (!sterrinfo_->IsInitialized()) return false;
  }
  return true;
}

void msgPsnymResolutionRes_PCA2RA_msgPsnymResolution::InternalSwap(msgPsnymResolutionRes_PCA2RA_msgPsnymResolution* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strpsnymcertserialno_.Swap(&other->strpsnymcertserialno_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strticketserialno_.Swap(&other->strticketserialno_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strticketidentifiablekey_.Swap(&other->strticketidentifiablekey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(sterrinfo_, other->sterrinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgPsnymResolutionRes_PCA2RA_msgPsnymResolution::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgPsnymResolutionRes_PCA2RA::InitAsDefaultInstance() {
  ::interfaces::_msgPsnymResolutionRes_PCA2RA_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgPsnymResolutionRes_PCA2RA_default_instance_._instance.get_mutable()->sterrinfo_ = const_cast< ::interfaces::msgError*>(
      ::interfaces::msgError::internal_default_instance());
  ::interfaces::_msgPsnymResolutionRes_PCA2RA_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgPsnymResolutionRes_PCA2RA::_Internal {
 public:
  using HasBits = decltype(std::declval<msgPsnymResolutionRes_PCA2RA>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgPsnymResolutionRes_PCA2RA* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uinoofpsnymstoberesolved(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_iraidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ipcaidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::interfaces::msgError& sterrinfo(const msgPsnymResolutionRes_PCA2RA* msg);
  static void set_has_sterrinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::interfaces::msgSignature& stsign(const msgPsnymResolutionRes_PCA2RA* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001fa) ^ 0x000001fa) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgPsnymResolutionRes_PCA2RA::_Internal::stsigner(const msgPsnymResolutionRes_PCA2RA* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgError&
msgPsnymResolutionRes_PCA2RA::_Internal::sterrinfo(const msgPsnymResolutionRes_PCA2RA* msg) {
  return *msg->sterrinfo_;
}
const ::interfaces::msgSignature&
msgPsnymResolutionRes_PCA2RA::_Internal::stsign(const msgPsnymResolutionRes_PCA2RA* msg) {
  return *msg->stsign_;
}
msgPsnymResolutionRes_PCA2RA::msgPsnymResolutionRes_PCA2RA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pstpsnymresolutioninfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgPsnymResolutionRes_PCA2RA)
}
msgPsnymResolutionRes_PCA2RA::msgPsnymResolutionRes_PCA2RA(const msgPsnymResolutionRes_PCA2RA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pstpsnymresolutioninfo_(from.pstpsnymresolutioninfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_sterrinfo()) {
    sterrinfo_ = new ::interfaces::msgError(*from.sterrinfo_);
  } else {
    sterrinfo_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&uinoofpsnymstoberesolved_, &from.uinoofpsnymstoberesolved_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&uinoofpsnymstoberesolved_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgPsnymResolutionRes_PCA2RA)
}

void msgPsnymResolutionRes_PCA2RA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgPsnymResolutionRes_PCA2RA_Interfaces_2eproto.base);
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uinoofpsnymstoberesolved_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(uinoofpsnymstoberesolved_));
  ireqtype_ = -1;
  iraidrange_ = -1;
  ipcaidrange_ = -1;
  inonce_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgPsnymResolutionRes_PCA2RA::~msgPsnymResolutionRes_PCA2RA() {
  // @@protoc_insertion_point(destructor:interfaces.msgPsnymResolutionRes_PCA2RA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgPsnymResolutionRes_PCA2RA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete sterrinfo_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgPsnymResolutionRes_PCA2RA::ArenaDtor(void* object) {
  msgPsnymResolutionRes_PCA2RA* _this = reinterpret_cast< msgPsnymResolutionRes_PCA2RA* >(object);
  (void)_this;
}
void msgPsnymResolutionRes_PCA2RA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgPsnymResolutionRes_PCA2RA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgPsnymResolutionRes_PCA2RA& msgPsnymResolutionRes_PCA2RA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgPsnymResolutionRes_PCA2RA_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgPsnymResolutionRes_PCA2RA::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgPsnymResolutionRes_PCA2RA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pstpsnymresolutioninfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sterrinfo_ != nullptr);
      sterrinfo_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    uinoofpsnymstoberesolved_ = 0u;
    ireqtype_ = -1;
    iraidrange_ = -1;
    ipcaidrange_ = -1;
    inonce_ = -1;
  }
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgPsnymResolutionRes_PCA2RA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uinoofpsnymstoberesolved(&has_bits);
          uinoofpsnymstoberesolved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .interfaces.msgPsnymResolutionRes_PCA2RA.msgPsnymResolution pstPsnymResolutionInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pstpsnymresolutioninfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 iRAIdRange = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_iraidrange(&has_bits);
          iraidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iPCAIdRange = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ipcaidrange(&has_bits);
          ipcaidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgError stErrInfo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_sterrinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgPsnymResolutionRes_PCA2RA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgPsnymResolutionRes_PCA2RA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uinoofpsnymstoberesolved(), target);
  }

  // repeated .interfaces.msgPsnymResolutionRes_PCA2RA.msgPsnymResolution pstPsnymResolutionInfo = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pstpsnymresolutioninfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_pstpsnymresolutioninfo(i), target, stream);
  }

  // required int32 iRAIdRange = 5 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_iraidrange(), target);
  }

  // required int32 iPCAIdRange = 6 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_ipcaidrange(), target);
  }

  // required int32 iNonce = 7 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 8 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_ttimestamp(), target);
  }

  // required .interfaces.msgError stErrInfo = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::sterrinfo(this), target, stream);
  }

  // optional .interfaces.msgSignature stSign = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgPsnymResolutionRes_PCA2RA)
  return target;
}

size_t msgPsnymResolutionRes_PCA2RA::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgPsnymResolutionRes_PCA2RA)
  size_t total_size = 0;

  if (_internal_has_sterrinfo()) {
    // required .interfaces.msgError stErrInfo = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);
  }

  if (_internal_has_uinoofpsnymstoberesolved()) {
    // required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofpsnymstoberesolved());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_iraidrange()) {
    // required int32 iRAIdRange = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iraidrange());
  }

  if (_internal_has_ipcaidrange()) {
    // required int32 iPCAIdRange = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipcaidrange());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgPsnymResolutionRes_PCA2RA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgPsnymResolutionRes_PCA2RA)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000001fa) ^ 0x000001fa) == 0) {  // All required fields are present.
    // required .interfaces.msgError stErrInfo = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);

    // required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofpsnymstoberesolved());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iRAIdRange = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iraidrange());

    // required int32 iPCAIdRange = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipcaidrange());

    // required int32 iNonce = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int64 tTimeStamp = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .interfaces.msgPsnymResolutionRes_PCA2RA.msgPsnymResolution pstPsnymResolutionInfo = 4;
  total_size += 1UL * this->_internal_pstpsnymresolutioninfo_size();
  for (const auto& msg : this->pstpsnymresolutioninfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsigner_);
  }

  // optional .interfaces.msgSignature stSign = 10;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsign_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgPsnymResolutionRes_PCA2RA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgPsnymResolutionRes_PCA2RA)
  GOOGLE_DCHECK_NE(&from, this);
  const msgPsnymResolutionRes_PCA2RA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgPsnymResolutionRes_PCA2RA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgPsnymResolutionRes_PCA2RA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgPsnymResolutionRes_PCA2RA)
    MergeFrom(*source);
  }
}

void msgPsnymResolutionRes_PCA2RA::MergeFrom(const msgPsnymResolutionRes_PCA2RA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgPsnymResolutionRes_PCA2RA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pstpsnymresolutioninfo_.MergeFrom(from.pstpsnymresolutioninfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sterrinfo()->::interfaces::msgError::MergeFrom(from._internal_sterrinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000008u) {
      uinoofpsnymstoberesolved_ = from.uinoofpsnymstoberesolved_;
    }
    if (cached_has_bits & 0x00000010u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000020u) {
      iraidrange_ = from.iraidrange_;
    }
    if (cached_has_bits & 0x00000040u) {
      ipcaidrange_ = from.ipcaidrange_;
    }
    if (cached_has_bits & 0x00000080u) {
      inonce_ = from.inonce_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_ttimestamp(from._internal_ttimestamp());
  }
}

void msgPsnymResolutionRes_PCA2RA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgPsnymResolutionRes_PCA2RA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgPsnymResolutionRes_PCA2RA::CopyFrom(const msgPsnymResolutionRes_PCA2RA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgPsnymResolutionRes_PCA2RA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgPsnymResolutionRes_PCA2RA::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pstpsnymresolutioninfo_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  if (_internal_has_sterrinfo()) {
    if (!sterrinfo_->IsInitialized()) return false;
  }
  return true;
}

void msgPsnymResolutionRes_PCA2RA::InternalSwap(msgPsnymResolutionRes_PCA2RA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pstpsnymresolutioninfo_.InternalSwap(&other->pstpsnymresolutioninfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgPsnymResolutionRes_PCA2RA, uinoofpsnymstoberesolved_)
      + sizeof(msgPsnymResolutionRes_PCA2RA::uinoofpsnymstoberesolved_)
      - PROTOBUF_FIELD_OFFSET(msgPsnymResolutionRes_PCA2RA, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(ireqtype_, other->ireqtype_);
  swap(iraidrange_, other->iraidrange_);
  swap(ipcaidrange_, other->ipcaidrange_);
  swap(inonce_, other->inonce_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgPsnymResolutionRes_PCA2RA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution::InitAsDefaultInstance() {
}
class msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution::_Internal {
 public:
  using HasBits = decltype(std::declval<msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution>()._has_bits_);
  static void set_has_strticketserialno(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_strticketidentifiablekey(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution::msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgPsnymResolutionReq_RA2LTCA.msgPsnymResolution)
}
msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution::msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution(const msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strticketserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strticketserialno()) {
    strticketserialno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strticketserialno(),
      GetArena());
  }
  strticketidentifiablekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strticketidentifiablekey()) {
    strticketidentifiablekey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strticketidentifiablekey(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:interfaces.msgPsnymResolutionReq_RA2LTCA.msgPsnymResolution)
}

void msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution_Interfaces_2eproto.base);
  strticketserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strticketidentifiablekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution::~msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution() {
  // @@protoc_insertion_point(destructor:interfaces.msgPsnymResolutionReq_RA2LTCA.msgPsnymResolution)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strticketserialno_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strticketidentifiablekey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution::ArenaDtor(void* object) {
  msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution* _this = reinterpret_cast< msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution* >(object);
  (void)_this;
}
void msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution& msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgPsnymResolutionReq_RA2LTCA.msgPsnymResolution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      strticketserialno_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      strticketidentifiablekey_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string strTicketSerialNo = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_strticketserialno();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgPsnymResolutionReq_RA2LTCA.msgPsnymResolution.strTicketSerialNo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strTicketIdentifiableKey = 2 [default = ""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_strticketidentifiablekey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgPsnymResolutionReq_RA2LTCA.msgPsnymResolution.strTicketIdentifiableKey");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgPsnymResolutionReq_RA2LTCA.msgPsnymResolution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string strTicketSerialNo = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strticketserialno().data(), static_cast<int>(this->_internal_strticketserialno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgPsnymResolutionReq_RA2LTCA.msgPsnymResolution.strTicketSerialNo");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_strticketserialno(), target);
  }

  // required string strTicketIdentifiableKey = 2 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strticketidentifiablekey().data(), static_cast<int>(this->_internal_strticketidentifiablekey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgPsnymResolutionReq_RA2LTCA.msgPsnymResolution.strTicketIdentifiableKey");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_strticketidentifiablekey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgPsnymResolutionReq_RA2LTCA.msgPsnymResolution)
  return target;
}

size_t msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgPsnymResolutionReq_RA2LTCA.msgPsnymResolution)
  size_t total_size = 0;

  if (_internal_has_strticketserialno()) {
    // required string strTicketSerialNo = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticketserialno());
  }

  if (_internal_has_strticketidentifiablekey()) {
    // required string strTicketIdentifiableKey = 2 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticketidentifiablekey());
  }

  return total_size;
}
size_t msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgPsnymResolutionReq_RA2LTCA.msgPsnymResolution)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string strTicketSerialNo = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticketserialno());

    // required string strTicketIdentifiableKey = 2 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticketidentifiablekey());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgPsnymResolutionReq_RA2LTCA.msgPsnymResolution)
  GOOGLE_DCHECK_NE(&from, this);
  const msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgPsnymResolutionReq_RA2LTCA.msgPsnymResolution)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgPsnymResolutionReq_RA2LTCA.msgPsnymResolution)
    MergeFrom(*source);
  }
}

void msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution::MergeFrom(const msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgPsnymResolutionReq_RA2LTCA.msgPsnymResolution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strticketserialno(from._internal_strticketserialno());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_strticketidentifiablekey(from._internal_strticketidentifiablekey());
    }
  }
}

void msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgPsnymResolutionReq_RA2LTCA.msgPsnymResolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution::CopyFrom(const msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgPsnymResolutionReq_RA2LTCA.msgPsnymResolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution::InternalSwap(msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strticketserialno_.Swap(&other->strticketserialno_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strticketidentifiablekey_.Swap(&other->strticketidentifiablekey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgPsnymResolutionReq_RA2LTCA::InitAsDefaultInstance() {
  ::interfaces::_msgPsnymResolutionReq_RA2LTCA_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgPsnymResolutionReq_RA2LTCA_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgPsnymResolutionReq_RA2LTCA::_Internal {
 public:
  using HasBits = decltype(std::declval<msgPsnymResolutionReq_RA2LTCA>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgPsnymResolutionReq_RA2LTCA* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uinoofpsnymstoberesolved(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_iraidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_iltcaidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::interfaces::msgSignature& stsign(const msgPsnymResolutionReq_RA2LTCA* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000fc) ^ 0x000000fc) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgPsnymResolutionReq_RA2LTCA::_Internal::stsigner(const msgPsnymResolutionReq_RA2LTCA* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgSignature&
msgPsnymResolutionReq_RA2LTCA::_Internal::stsign(const msgPsnymResolutionReq_RA2LTCA* msg) {
  return *msg->stsign_;
}
msgPsnymResolutionReq_RA2LTCA::msgPsnymResolutionReq_RA2LTCA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pstpsnymresolutioninfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgPsnymResolutionReq_RA2LTCA)
}
msgPsnymResolutionReq_RA2LTCA::msgPsnymResolutionReq_RA2LTCA(const msgPsnymResolutionReq_RA2LTCA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pstpsnymresolutioninfo_(from.pstpsnymresolutioninfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&uinoofpsnymstoberesolved_, &from.uinoofpsnymstoberesolved_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&uinoofpsnymstoberesolved_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgPsnymResolutionReq_RA2LTCA)
}

void msgPsnymResolutionReq_RA2LTCA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgPsnymResolutionReq_RA2LTCA_Interfaces_2eproto.base);
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uinoofpsnymstoberesolved_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(uinoofpsnymstoberesolved_));
  ireqtype_ = -1;
  iraidrange_ = -1;
  iltcaidrange_ = -1;
  inonce_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgPsnymResolutionReq_RA2LTCA::~msgPsnymResolutionReq_RA2LTCA() {
  // @@protoc_insertion_point(destructor:interfaces.msgPsnymResolutionReq_RA2LTCA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgPsnymResolutionReq_RA2LTCA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgPsnymResolutionReq_RA2LTCA::ArenaDtor(void* object) {
  msgPsnymResolutionReq_RA2LTCA* _this = reinterpret_cast< msgPsnymResolutionReq_RA2LTCA* >(object);
  (void)_this;
}
void msgPsnymResolutionReq_RA2LTCA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgPsnymResolutionReq_RA2LTCA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgPsnymResolutionReq_RA2LTCA& msgPsnymResolutionReq_RA2LTCA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgPsnymResolutionReq_RA2LTCA_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgPsnymResolutionReq_RA2LTCA::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgPsnymResolutionReq_RA2LTCA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pstpsnymresolutioninfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    uinoofpsnymstoberesolved_ = 0u;
    ireqtype_ = -1;
    iraidrange_ = -1;
    iltcaidrange_ = -1;
    inonce_ = -1;
    ttimestamp_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgPsnymResolutionReq_RA2LTCA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uinoofpsnymstoberesolved(&has_bits);
          uinoofpsnymstoberesolved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .interfaces.msgPsnymResolutionReq_RA2LTCA.msgPsnymResolution pstPsnymResolutionInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pstpsnymresolutioninfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 iRAIdRange = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_iraidrange(&has_bits);
          iraidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iLTCAIdRange = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_iltcaidrange(&has_bits);
          iltcaidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgPsnymResolutionReq_RA2LTCA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgPsnymResolutionReq_RA2LTCA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uinoofpsnymstoberesolved(), target);
  }

  // repeated .interfaces.msgPsnymResolutionReq_RA2LTCA.msgPsnymResolution pstPsnymResolutionInfo = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pstpsnymresolutioninfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_pstpsnymresolutioninfo(i), target, stream);
  }

  // required int32 iRAIdRange = 5 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_iraidrange(), target);
  }

  // required int32 iLTCAIdRange = 6 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_iltcaidrange(), target);
  }

  // required int32 iNonce = 7 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 8 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_ttimestamp(), target);
  }

  // optional .interfaces.msgSignature stSign = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgPsnymResolutionReq_RA2LTCA)
  return target;
}

size_t msgPsnymResolutionReq_RA2LTCA::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgPsnymResolutionReq_RA2LTCA)
  size_t total_size = 0;

  if (_internal_has_uinoofpsnymstoberesolved()) {
    // required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofpsnymstoberesolved());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_iraidrange()) {
    // required int32 iRAIdRange = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iraidrange());
  }

  if (_internal_has_iltcaidrange()) {
    // required int32 iLTCAIdRange = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iltcaidrange());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgPsnymResolutionReq_RA2LTCA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgPsnymResolutionReq_RA2LTCA)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000fc) ^ 0x000000fc) == 0) {  // All required fields are present.
    // required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofpsnymstoberesolved());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iRAIdRange = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iraidrange());

    // required int32 iLTCAIdRange = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iltcaidrange());

    // required int32 iNonce = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int64 tTimeStamp = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .interfaces.msgPsnymResolutionReq_RA2LTCA.msgPsnymResolution pstPsnymResolutionInfo = 4;
  total_size += 1UL * this->_internal_pstpsnymresolutioninfo_size();
  for (const auto& msg : this->pstpsnymresolutioninfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .interfaces.msgSignerInfo stSigner = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsigner_);
    }

    // optional .interfaces.msgSignature stSign = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsign_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgPsnymResolutionReq_RA2LTCA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgPsnymResolutionReq_RA2LTCA)
  GOOGLE_DCHECK_NE(&from, this);
  const msgPsnymResolutionReq_RA2LTCA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgPsnymResolutionReq_RA2LTCA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgPsnymResolutionReq_RA2LTCA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgPsnymResolutionReq_RA2LTCA)
    MergeFrom(*source);
  }
}

void msgPsnymResolutionReq_RA2LTCA::MergeFrom(const msgPsnymResolutionReq_RA2LTCA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgPsnymResolutionReq_RA2LTCA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pstpsnymresolutioninfo_.MergeFrom(from.pstpsnymresolutioninfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000004u) {
      uinoofpsnymstoberesolved_ = from.uinoofpsnymstoberesolved_;
    }
    if (cached_has_bits & 0x00000008u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000010u) {
      iraidrange_ = from.iraidrange_;
    }
    if (cached_has_bits & 0x00000020u) {
      iltcaidrange_ = from.iltcaidrange_;
    }
    if (cached_has_bits & 0x00000040u) {
      inonce_ = from.inonce_;
    }
    if (cached_has_bits & 0x00000080u) {
      ttimestamp_ = from.ttimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgPsnymResolutionReq_RA2LTCA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgPsnymResolutionReq_RA2LTCA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgPsnymResolutionReq_RA2LTCA::CopyFrom(const msgPsnymResolutionReq_RA2LTCA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgPsnymResolutionReq_RA2LTCA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgPsnymResolutionReq_RA2LTCA::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pstpsnymresolutioninfo_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  return true;
}

void msgPsnymResolutionReq_RA2LTCA::InternalSwap(msgPsnymResolutionReq_RA2LTCA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pstpsnymresolutioninfo_.InternalSwap(&other->pstpsnymresolutioninfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgPsnymResolutionReq_RA2LTCA, uinoofpsnymstoberesolved_)
      + sizeof(msgPsnymResolutionReq_RA2LTCA::uinoofpsnymstoberesolved_)
      - PROTOBUF_FIELD_OFFSET(msgPsnymResolutionReq_RA2LTCA, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(ireqtype_, other->ireqtype_);
  swap(iraidrange_, other->iraidrange_);
  swap(iltcaidrange_, other->iltcaidrange_);
  swap(inonce_, other->inonce_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgPsnymResolutionReq_RA2LTCA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution::InitAsDefaultInstance() {
  ::interfaces::_msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution_default_instance_._instance.get_mutable()->sterrinfo_ = const_cast< ::interfaces::msgError*>(
      ::interfaces::msgError::internal_default_instance());
}
class msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution::_Internal {
 public:
  using HasBits = decltype(std::declval<msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution>()._has_bits_);
  static void set_has_strticketserialno(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_strvehx509certserialno(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_strticketidentifiablekey(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::interfaces::msgError& sterrinfo(const msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution* msg);
  static void set_has_sterrinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::interfaces::msgError&
msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution::_Internal::sterrinfo(const msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution* msg) {
  return *msg->sterrinfo_;
}
msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution::msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgPsnymResolutionRes_LTCA2RA.msgPsnymResolution)
}
msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution::msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution(const msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strticketserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strticketserialno()) {
    strticketserialno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strticketserialno(),
      GetArena());
  }
  strvehx509certserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strvehx509certserialno()) {
    strvehx509certserialno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strvehx509certserialno(),
      GetArena());
  }
  strticketidentifiablekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strticketidentifiablekey()) {
    strticketidentifiablekey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strticketidentifiablekey(),
      GetArena());
  }
  if (from._internal_has_sterrinfo()) {
    sterrinfo_ = new ::interfaces::msgError(*from.sterrinfo_);
  } else {
    sterrinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:interfaces.msgPsnymResolutionRes_LTCA2RA.msgPsnymResolution)
}

void msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution_Interfaces_2eproto.base);
  strticketserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strvehx509certserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strticketidentifiablekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sterrinfo_ = nullptr;
}

msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution::~msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution() {
  // @@protoc_insertion_point(destructor:interfaces.msgPsnymResolutionRes_LTCA2RA.msgPsnymResolution)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strticketserialno_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strvehx509certserialno_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strticketidentifiablekey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sterrinfo_;
}

void msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution::ArenaDtor(void* object) {
  msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution* _this = reinterpret_cast< msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution* >(object);
  (void)_this;
}
void msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution& msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgPsnymResolutionRes_LTCA2RA.msgPsnymResolution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      strticketserialno_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      strvehx509certserialno_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      strticketidentifiablekey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(sterrinfo_ != nullptr);
      sterrinfo_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string strTicketSerialNo = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_strticketserialno();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgPsnymResolutionRes_LTCA2RA.msgPsnymResolution.strTicketSerialNo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strVehX509CertSerialNo = 2 [default = ""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_strvehx509certserialno();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgPsnymResolutionRes_LTCA2RA.msgPsnymResolution.strVehX509CertSerialNo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strTicketIdentifiableKey = 3 [default = ""];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_strticketidentifiablekey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgPsnymResolutionRes_LTCA2RA.msgPsnymResolution.strTicketIdentifiableKey");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgError stErrInfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sterrinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgPsnymResolutionRes_LTCA2RA.msgPsnymResolution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string strTicketSerialNo = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strticketserialno().data(), static_cast<int>(this->_internal_strticketserialno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgPsnymResolutionRes_LTCA2RA.msgPsnymResolution.strTicketSerialNo");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_strticketserialno(), target);
  }

  // required string strVehX509CertSerialNo = 2 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strvehx509certserialno().data(), static_cast<int>(this->_internal_strvehx509certserialno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgPsnymResolutionRes_LTCA2RA.msgPsnymResolution.strVehX509CertSerialNo");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_strvehx509certserialno(), target);
  }

  // required string strTicketIdentifiableKey = 3 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strticketidentifiablekey().data(), static_cast<int>(this->_internal_strticketidentifiablekey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgPsnymResolutionRes_LTCA2RA.msgPsnymResolution.strTicketIdentifiableKey");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_strticketidentifiablekey(), target);
  }

  // required .interfaces.msgError stErrInfo = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::sterrinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgPsnymResolutionRes_LTCA2RA.msgPsnymResolution)
  return target;
}

size_t msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgPsnymResolutionRes_LTCA2RA.msgPsnymResolution)
  size_t total_size = 0;

  if (_internal_has_strticketserialno()) {
    // required string strTicketSerialNo = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticketserialno());
  }

  if (_internal_has_strvehx509certserialno()) {
    // required string strVehX509CertSerialNo = 2 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strvehx509certserialno());
  }

  if (_internal_has_strticketidentifiablekey()) {
    // required string strTicketIdentifiableKey = 3 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticketidentifiablekey());
  }

  if (_internal_has_sterrinfo()) {
    // required .interfaces.msgError stErrInfo = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);
  }

  return total_size;
}
size_t msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgPsnymResolutionRes_LTCA2RA.msgPsnymResolution)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string strTicketSerialNo = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticketserialno());

    // required string strVehX509CertSerialNo = 2 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strvehx509certserialno());

    // required string strTicketIdentifiableKey = 3 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticketidentifiablekey());

    // required .interfaces.msgError stErrInfo = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgPsnymResolutionRes_LTCA2RA.msgPsnymResolution)
  GOOGLE_DCHECK_NE(&from, this);
  const msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgPsnymResolutionRes_LTCA2RA.msgPsnymResolution)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgPsnymResolutionRes_LTCA2RA.msgPsnymResolution)
    MergeFrom(*source);
  }
}

void msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution::MergeFrom(const msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgPsnymResolutionRes_LTCA2RA.msgPsnymResolution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strticketserialno(from._internal_strticketserialno());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_strvehx509certserialno(from._internal_strvehx509certserialno());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_strticketidentifiablekey(from._internal_strticketidentifiablekey());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_sterrinfo()->::interfaces::msgError::MergeFrom(from._internal_sterrinfo());
    }
  }
}

void msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgPsnymResolutionRes_LTCA2RA.msgPsnymResolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution::CopyFrom(const msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgPsnymResolutionRes_LTCA2RA.msgPsnymResolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_sterrinfo()) {
    if (!sterrinfo_->IsInitialized()) return false;
  }
  return true;
}

void msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution::InternalSwap(msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strticketserialno_.Swap(&other->strticketserialno_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strvehx509certserialno_.Swap(&other->strvehx509certserialno_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strticketidentifiablekey_.Swap(&other->strticketidentifiablekey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(sterrinfo_, other->sterrinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgPsnymResolutionRes_LTCA2RA::InitAsDefaultInstance() {
  ::interfaces::_msgPsnymResolutionRes_LTCA2RA_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgPsnymResolutionRes_LTCA2RA_default_instance_._instance.get_mutable()->sterrinfo_ = const_cast< ::interfaces::msgError*>(
      ::interfaces::msgError::internal_default_instance());
  ::interfaces::_msgPsnymResolutionRes_LTCA2RA_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgPsnymResolutionRes_LTCA2RA::_Internal {
 public:
  using HasBits = decltype(std::declval<msgPsnymResolutionRes_LTCA2RA>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgPsnymResolutionRes_LTCA2RA* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uinoofpsnymstoberesolved(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_iraidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_iltcaidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::interfaces::msgError& sterrinfo(const msgPsnymResolutionRes_LTCA2RA* msg);
  static void set_has_sterrinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::interfaces::msgSignature& stsign(const msgPsnymResolutionRes_LTCA2RA* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001fa) ^ 0x000001fa) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgPsnymResolutionRes_LTCA2RA::_Internal::stsigner(const msgPsnymResolutionRes_LTCA2RA* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgError&
msgPsnymResolutionRes_LTCA2RA::_Internal::sterrinfo(const msgPsnymResolutionRes_LTCA2RA* msg) {
  return *msg->sterrinfo_;
}
const ::interfaces::msgSignature&
msgPsnymResolutionRes_LTCA2RA::_Internal::stsign(const msgPsnymResolutionRes_LTCA2RA* msg) {
  return *msg->stsign_;
}
msgPsnymResolutionRes_LTCA2RA::msgPsnymResolutionRes_LTCA2RA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pstpsnymresolutioninfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgPsnymResolutionRes_LTCA2RA)
}
msgPsnymResolutionRes_LTCA2RA::msgPsnymResolutionRes_LTCA2RA(const msgPsnymResolutionRes_LTCA2RA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pstpsnymresolutioninfo_(from.pstpsnymresolutioninfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_sterrinfo()) {
    sterrinfo_ = new ::interfaces::msgError(*from.sterrinfo_);
  } else {
    sterrinfo_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&uinoofpsnymstoberesolved_, &from.uinoofpsnymstoberesolved_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&uinoofpsnymstoberesolved_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgPsnymResolutionRes_LTCA2RA)
}

void msgPsnymResolutionRes_LTCA2RA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgPsnymResolutionRes_LTCA2RA_Interfaces_2eproto.base);
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uinoofpsnymstoberesolved_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(uinoofpsnymstoberesolved_));
  ireqtype_ = -1;
  iraidrange_ = -1;
  iltcaidrange_ = -1;
  inonce_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgPsnymResolutionRes_LTCA2RA::~msgPsnymResolutionRes_LTCA2RA() {
  // @@protoc_insertion_point(destructor:interfaces.msgPsnymResolutionRes_LTCA2RA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgPsnymResolutionRes_LTCA2RA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete sterrinfo_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgPsnymResolutionRes_LTCA2RA::ArenaDtor(void* object) {
  msgPsnymResolutionRes_LTCA2RA* _this = reinterpret_cast< msgPsnymResolutionRes_LTCA2RA* >(object);
  (void)_this;
}
void msgPsnymResolutionRes_LTCA2RA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgPsnymResolutionRes_LTCA2RA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgPsnymResolutionRes_LTCA2RA& msgPsnymResolutionRes_LTCA2RA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgPsnymResolutionRes_LTCA2RA_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgPsnymResolutionRes_LTCA2RA::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgPsnymResolutionRes_LTCA2RA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pstpsnymresolutioninfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sterrinfo_ != nullptr);
      sterrinfo_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    uinoofpsnymstoberesolved_ = 0u;
    ireqtype_ = -1;
    iraidrange_ = -1;
    iltcaidrange_ = -1;
    inonce_ = -1;
  }
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgPsnymResolutionRes_LTCA2RA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uinoofpsnymstoberesolved(&has_bits);
          uinoofpsnymstoberesolved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .interfaces.msgPsnymResolutionRes_LTCA2RA.msgPsnymResolution pstPsnymResolutionInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pstpsnymresolutioninfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 iRAIdRange = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_iraidrange(&has_bits);
          iraidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iLTCAIdRange = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_iltcaidrange(&has_bits);
          iltcaidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgError stErrInfo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_sterrinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgPsnymResolutionRes_LTCA2RA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgPsnymResolutionRes_LTCA2RA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uinoofpsnymstoberesolved(), target);
  }

  // repeated .interfaces.msgPsnymResolutionRes_LTCA2RA.msgPsnymResolution pstPsnymResolutionInfo = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pstpsnymresolutioninfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_pstpsnymresolutioninfo(i), target, stream);
  }

  // required int32 iRAIdRange = 5 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_iraidrange(), target);
  }

  // required int32 iLTCAIdRange = 6 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_iltcaidrange(), target);
  }

  // required int32 iNonce = 7 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 8 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_ttimestamp(), target);
  }

  // required .interfaces.msgError stErrInfo = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::sterrinfo(this), target, stream);
  }

  // optional .interfaces.msgSignature stSign = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgPsnymResolutionRes_LTCA2RA)
  return target;
}

size_t msgPsnymResolutionRes_LTCA2RA::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgPsnymResolutionRes_LTCA2RA)
  size_t total_size = 0;

  if (_internal_has_sterrinfo()) {
    // required .interfaces.msgError stErrInfo = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);
  }

  if (_internal_has_uinoofpsnymstoberesolved()) {
    // required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofpsnymstoberesolved());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_iraidrange()) {
    // required int32 iRAIdRange = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iraidrange());
  }

  if (_internal_has_iltcaidrange()) {
    // required int32 iLTCAIdRange = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iltcaidrange());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgPsnymResolutionRes_LTCA2RA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgPsnymResolutionRes_LTCA2RA)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000001fa) ^ 0x000001fa) == 0) {  // All required fields are present.
    // required .interfaces.msgError stErrInfo = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);

    // required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofpsnymstoberesolved());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iRAIdRange = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iraidrange());

    // required int32 iLTCAIdRange = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iltcaidrange());

    // required int32 iNonce = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int64 tTimeStamp = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .interfaces.msgPsnymResolutionRes_LTCA2RA.msgPsnymResolution pstPsnymResolutionInfo = 4;
  total_size += 1UL * this->_internal_pstpsnymresolutioninfo_size();
  for (const auto& msg : this->pstpsnymresolutioninfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsigner_);
  }

  // optional .interfaces.msgSignature stSign = 10;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsign_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgPsnymResolutionRes_LTCA2RA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgPsnymResolutionRes_LTCA2RA)
  GOOGLE_DCHECK_NE(&from, this);
  const msgPsnymResolutionRes_LTCA2RA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgPsnymResolutionRes_LTCA2RA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgPsnymResolutionRes_LTCA2RA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgPsnymResolutionRes_LTCA2RA)
    MergeFrom(*source);
  }
}

void msgPsnymResolutionRes_LTCA2RA::MergeFrom(const msgPsnymResolutionRes_LTCA2RA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgPsnymResolutionRes_LTCA2RA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pstpsnymresolutioninfo_.MergeFrom(from.pstpsnymresolutioninfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sterrinfo()->::interfaces::msgError::MergeFrom(from._internal_sterrinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000008u) {
      uinoofpsnymstoberesolved_ = from.uinoofpsnymstoberesolved_;
    }
    if (cached_has_bits & 0x00000010u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000020u) {
      iraidrange_ = from.iraidrange_;
    }
    if (cached_has_bits & 0x00000040u) {
      iltcaidrange_ = from.iltcaidrange_;
    }
    if (cached_has_bits & 0x00000080u) {
      inonce_ = from.inonce_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_ttimestamp(from._internal_ttimestamp());
  }
}

void msgPsnymResolutionRes_LTCA2RA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgPsnymResolutionRes_LTCA2RA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgPsnymResolutionRes_LTCA2RA::CopyFrom(const msgPsnymResolutionRes_LTCA2RA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgPsnymResolutionRes_LTCA2RA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgPsnymResolutionRes_LTCA2RA::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pstpsnymresolutioninfo_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  if (_internal_has_sterrinfo()) {
    if (!sterrinfo_->IsInitialized()) return false;
  }
  return true;
}

void msgPsnymResolutionRes_LTCA2RA::InternalSwap(msgPsnymResolutionRes_LTCA2RA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pstpsnymresolutioninfo_.InternalSwap(&other->pstpsnymresolutioninfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgPsnymResolutionRes_LTCA2RA, uinoofpsnymstoberesolved_)
      + sizeof(msgPsnymResolutionRes_LTCA2RA::uinoofpsnymstoberesolved_)
      - PROTOBUF_FIELD_OFFSET(msgPsnymResolutionRes_LTCA2RA, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(ireqtype_, other->ireqtype_);
  swap(iraidrange_, other->iraidrange_);
  swap(iltcaidrange_, other->iltcaidrange_);
  swap(inonce_, other->inonce_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgPsnymResolutionRes_LTCA2RA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgPsnymResolutionRes_RA2Police_msgPsnymResolution::InitAsDefaultInstance() {
  ::interfaces::_msgPsnymResolutionRes_RA2Police_msgPsnymResolution_default_instance_._instance.get_mutable()->sterrinfo_ = const_cast< ::interfaces::msgError*>(
      ::interfaces::msgError::internal_default_instance());
}
class msgPsnymResolutionRes_RA2Police_msgPsnymResolution::_Internal {
 public:
  using HasBits = decltype(std::declval<msgPsnymResolutionRes_RA2Police_msgPsnymResolution>()._has_bits_);
  static void set_has_strpsnymserialno(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_strvehx509certserialno(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::interfaces::msgError& sterrinfo(const msgPsnymResolutionRes_RA2Police_msgPsnymResolution* msg);
  static void set_has_sterrinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::interfaces::msgError&
msgPsnymResolutionRes_RA2Police_msgPsnymResolution::_Internal::sterrinfo(const msgPsnymResolutionRes_RA2Police_msgPsnymResolution* msg) {
  return *msg->sterrinfo_;
}
msgPsnymResolutionRes_RA2Police_msgPsnymResolution::msgPsnymResolutionRes_RA2Police_msgPsnymResolution(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgPsnymResolutionRes_RA2Police.msgPsnymResolution)
}
msgPsnymResolutionRes_RA2Police_msgPsnymResolution::msgPsnymResolutionRes_RA2Police_msgPsnymResolution(const msgPsnymResolutionRes_RA2Police_msgPsnymResolution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strpsnymserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strpsnymserialno()) {
    strpsnymserialno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strpsnymserialno(),
      GetArena());
  }
  strvehx509certserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strvehx509certserialno()) {
    strvehx509certserialno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strvehx509certserialno(),
      GetArena());
  }
  if (from._internal_has_sterrinfo()) {
    sterrinfo_ = new ::interfaces::msgError(*from.sterrinfo_);
  } else {
    sterrinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:interfaces.msgPsnymResolutionRes_RA2Police.msgPsnymResolution)
}

void msgPsnymResolutionRes_RA2Police_msgPsnymResolution::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgPsnymResolutionRes_RA2Police_msgPsnymResolution_Interfaces_2eproto.base);
  strpsnymserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strvehx509certserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sterrinfo_ = nullptr;
}

msgPsnymResolutionRes_RA2Police_msgPsnymResolution::~msgPsnymResolutionRes_RA2Police_msgPsnymResolution() {
  // @@protoc_insertion_point(destructor:interfaces.msgPsnymResolutionRes_RA2Police.msgPsnymResolution)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgPsnymResolutionRes_RA2Police_msgPsnymResolution::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strpsnymserialno_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strvehx509certserialno_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sterrinfo_;
}

void msgPsnymResolutionRes_RA2Police_msgPsnymResolution::ArenaDtor(void* object) {
  msgPsnymResolutionRes_RA2Police_msgPsnymResolution* _this = reinterpret_cast< msgPsnymResolutionRes_RA2Police_msgPsnymResolution* >(object);
  (void)_this;
}
void msgPsnymResolutionRes_RA2Police_msgPsnymResolution::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgPsnymResolutionRes_RA2Police_msgPsnymResolution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgPsnymResolutionRes_RA2Police_msgPsnymResolution& msgPsnymResolutionRes_RA2Police_msgPsnymResolution::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgPsnymResolutionRes_RA2Police_msgPsnymResolution_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgPsnymResolutionRes_RA2Police_msgPsnymResolution::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgPsnymResolutionRes_RA2Police.msgPsnymResolution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      strpsnymserialno_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      strvehx509certserialno_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(sterrinfo_ != nullptr);
      sterrinfo_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgPsnymResolutionRes_RA2Police_msgPsnymResolution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string strPsnymSerialNo = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_strpsnymserialno();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgPsnymResolutionRes_RA2Police.msgPsnymResolution.strPsnymSerialNo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strVehX509CertSerialNo = 2 [default = ""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_strvehx509certserialno();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgPsnymResolutionRes_RA2Police.msgPsnymResolution.strVehX509CertSerialNo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgError stErrInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sterrinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgPsnymResolutionRes_RA2Police_msgPsnymResolution::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgPsnymResolutionRes_RA2Police.msgPsnymResolution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string strPsnymSerialNo = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strpsnymserialno().data(), static_cast<int>(this->_internal_strpsnymserialno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgPsnymResolutionRes_RA2Police.msgPsnymResolution.strPsnymSerialNo");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_strpsnymserialno(), target);
  }

  // required string strVehX509CertSerialNo = 2 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strvehx509certserialno().data(), static_cast<int>(this->_internal_strvehx509certserialno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgPsnymResolutionRes_RA2Police.msgPsnymResolution.strVehX509CertSerialNo");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_strvehx509certserialno(), target);
  }

  // required .interfaces.msgError stErrInfo = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sterrinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgPsnymResolutionRes_RA2Police.msgPsnymResolution)
  return target;
}

size_t msgPsnymResolutionRes_RA2Police_msgPsnymResolution::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgPsnymResolutionRes_RA2Police.msgPsnymResolution)
  size_t total_size = 0;

  if (_internal_has_strpsnymserialno()) {
    // required string strPsnymSerialNo = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpsnymserialno());
  }

  if (_internal_has_strvehx509certserialno()) {
    // required string strVehX509CertSerialNo = 2 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strvehx509certserialno());
  }

  if (_internal_has_sterrinfo()) {
    // required .interfaces.msgError stErrInfo = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);
  }

  return total_size;
}
size_t msgPsnymResolutionRes_RA2Police_msgPsnymResolution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgPsnymResolutionRes_RA2Police.msgPsnymResolution)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string strPsnymSerialNo = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpsnymserialno());

    // required string strVehX509CertSerialNo = 2 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strvehx509certserialno());

    // required .interfaces.msgError stErrInfo = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgPsnymResolutionRes_RA2Police_msgPsnymResolution::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgPsnymResolutionRes_RA2Police.msgPsnymResolution)
  GOOGLE_DCHECK_NE(&from, this);
  const msgPsnymResolutionRes_RA2Police_msgPsnymResolution* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgPsnymResolutionRes_RA2Police_msgPsnymResolution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgPsnymResolutionRes_RA2Police.msgPsnymResolution)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgPsnymResolutionRes_RA2Police.msgPsnymResolution)
    MergeFrom(*source);
  }
}

void msgPsnymResolutionRes_RA2Police_msgPsnymResolution::MergeFrom(const msgPsnymResolutionRes_RA2Police_msgPsnymResolution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgPsnymResolutionRes_RA2Police.msgPsnymResolution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strpsnymserialno(from._internal_strpsnymserialno());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_strvehx509certserialno(from._internal_strvehx509certserialno());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_sterrinfo()->::interfaces::msgError::MergeFrom(from._internal_sterrinfo());
    }
  }
}

void msgPsnymResolutionRes_RA2Police_msgPsnymResolution::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgPsnymResolutionRes_RA2Police.msgPsnymResolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgPsnymResolutionRes_RA2Police_msgPsnymResolution::CopyFrom(const msgPsnymResolutionRes_RA2Police_msgPsnymResolution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgPsnymResolutionRes_RA2Police.msgPsnymResolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgPsnymResolutionRes_RA2Police_msgPsnymResolution::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_sterrinfo()) {
    if (!sterrinfo_->IsInitialized()) return false;
  }
  return true;
}

void msgPsnymResolutionRes_RA2Police_msgPsnymResolution::InternalSwap(msgPsnymResolutionRes_RA2Police_msgPsnymResolution* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strpsnymserialno_.Swap(&other->strpsnymserialno_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strvehx509certserialno_.Swap(&other->strvehx509certserialno_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(sterrinfo_, other->sterrinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgPsnymResolutionRes_RA2Police_msgPsnymResolution::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgPsnymResolutionRes_RA2Police::InitAsDefaultInstance() {
  ::interfaces::_msgPsnymResolutionRes_RA2Police_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgPsnymResolutionRes_RA2Police_default_instance_._instance.get_mutable()->sterrinfo_ = const_cast< ::interfaces::msgError*>(
      ::interfaces::msgError::internal_default_instance());
  ::interfaces::_msgPsnymResolutionRes_RA2Police_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgPsnymResolutionRes_RA2Police::_Internal {
 public:
  using HasBits = decltype(std::declval<msgPsnymResolutionRes_RA2Police>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgPsnymResolutionRes_RA2Police* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uinoofpsnymstoberesolved(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_iraidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_iltcaidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ipcaidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ipoliceid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::interfaces::msgError& sterrinfo(const msgPsnymResolutionRes_RA2Police* msg);
  static void set_has_sterrinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::interfaces::msgSignature& stsign(const msgPsnymResolutionRes_RA2Police* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000007fa) ^ 0x000007fa) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgPsnymResolutionRes_RA2Police::_Internal::stsigner(const msgPsnymResolutionRes_RA2Police* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgError&
msgPsnymResolutionRes_RA2Police::_Internal::sterrinfo(const msgPsnymResolutionRes_RA2Police* msg) {
  return *msg->sterrinfo_;
}
const ::interfaces::msgSignature&
msgPsnymResolutionRes_RA2Police::_Internal::stsign(const msgPsnymResolutionRes_RA2Police* msg) {
  return *msg->stsign_;
}
msgPsnymResolutionRes_RA2Police::msgPsnymResolutionRes_RA2Police(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pstpsnymresolutioninfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgPsnymResolutionRes_RA2Police)
}
msgPsnymResolutionRes_RA2Police::msgPsnymResolutionRes_RA2Police(const msgPsnymResolutionRes_RA2Police& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pstpsnymresolutioninfo_(from.pstpsnymresolutioninfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_sterrinfo()) {
    sterrinfo_ = new ::interfaces::msgError(*from.sterrinfo_);
  } else {
    sterrinfo_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&uinoofpsnymstoberesolved_, &from.uinoofpsnymstoberesolved_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&uinoofpsnymstoberesolved_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgPsnymResolutionRes_RA2Police)
}

void msgPsnymResolutionRes_RA2Police::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgPsnymResolutionRes_RA2Police_Interfaces_2eproto.base);
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uinoofpsnymstoberesolved_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(uinoofpsnymstoberesolved_));
  ireqtype_ = -1;
  iraidrange_ = -1;
  iltcaidrange_ = -1;
  ipcaidrange_ = -1;
  ipoliceid_ = -1;
  inonce_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgPsnymResolutionRes_RA2Police::~msgPsnymResolutionRes_RA2Police() {
  // @@protoc_insertion_point(destructor:interfaces.msgPsnymResolutionRes_RA2Police)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgPsnymResolutionRes_RA2Police::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete sterrinfo_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgPsnymResolutionRes_RA2Police::ArenaDtor(void* object) {
  msgPsnymResolutionRes_RA2Police* _this = reinterpret_cast< msgPsnymResolutionRes_RA2Police* >(object);
  (void)_this;
}
void msgPsnymResolutionRes_RA2Police::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgPsnymResolutionRes_RA2Police::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgPsnymResolutionRes_RA2Police& msgPsnymResolutionRes_RA2Police::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgPsnymResolutionRes_RA2Police_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgPsnymResolutionRes_RA2Police::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgPsnymResolutionRes_RA2Police)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pstpsnymresolutioninfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sterrinfo_ != nullptr);
      sterrinfo_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    uinoofpsnymstoberesolved_ = 0u;
    ireqtype_ = -1;
    iraidrange_ = -1;
    iltcaidrange_ = -1;
    ipcaidrange_ = -1;
  }
  if (cached_has_bits & 0x00000700u) {
    ipoliceid_ = -1;
    inonce_ = -1;
    ttimestamp_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgPsnymResolutionRes_RA2Police::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uinoofpsnymstoberesolved(&has_bits);
          uinoofpsnymstoberesolved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .interfaces.msgPsnymResolutionRes_RA2Police.msgPsnymResolution pstPsnymResolutionInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pstpsnymresolutioninfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 iRAIdRange = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_iraidrange(&has_bits);
          iraidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iLTCAIdRange = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_iltcaidrange(&has_bits);
          iltcaidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iPCAIdRange = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_ipcaidrange(&has_bits);
          ipcaidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iPoliceId = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_ipoliceid(&has_bits);
          ipoliceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 9 [default = -1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 10 [default = -1];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgError stErrInfo = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_sterrinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgPsnymResolutionRes_RA2Police::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgPsnymResolutionRes_RA2Police)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uinoofpsnymstoberesolved(), target);
  }

  // repeated .interfaces.msgPsnymResolutionRes_RA2Police.msgPsnymResolution pstPsnymResolutionInfo = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pstpsnymresolutioninfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_pstpsnymresolutioninfo(i), target, stream);
  }

  // required int32 iRAIdRange = 5 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_iraidrange(), target);
  }

  // required int32 iLTCAIdRange = 6 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_iltcaidrange(), target);
  }

  // required int32 iPCAIdRange = 7 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_ipcaidrange(), target);
  }

  // required int32 iPoliceId = 8 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_ipoliceid(), target);
  }

  // required int32 iNonce = 9 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 10 [default = -1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_ttimestamp(), target);
  }

  // required .interfaces.msgError stErrInfo = 11;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::sterrinfo(this), target, stream);
  }

  // optional .interfaces.msgSignature stSign = 12;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgPsnymResolutionRes_RA2Police)
  return target;
}

size_t msgPsnymResolutionRes_RA2Police::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgPsnymResolutionRes_RA2Police)
  size_t total_size = 0;

  if (_internal_has_sterrinfo()) {
    // required .interfaces.msgError stErrInfo = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);
  }

  if (_internal_has_uinoofpsnymstoberesolved()) {
    // required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofpsnymstoberesolved());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_iraidrange()) {
    // required int32 iRAIdRange = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iraidrange());
  }

  if (_internal_has_iltcaidrange()) {
    // required int32 iLTCAIdRange = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iltcaidrange());
  }

  if (_internal_has_ipcaidrange()) {
    // required int32 iPCAIdRange = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipcaidrange());
  }

  if (_internal_has_ipoliceid()) {
    // required int32 iPoliceId = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipoliceid());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 9 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 10 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgPsnymResolutionRes_RA2Police::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgPsnymResolutionRes_RA2Police)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000007fa) ^ 0x000007fa) == 0) {  // All required fields are present.
    // required .interfaces.msgError stErrInfo = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);

    // required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofpsnymstoberesolved());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iRAIdRange = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iraidrange());

    // required int32 iLTCAIdRange = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iltcaidrange());

    // required int32 iPCAIdRange = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipcaidrange());

    // required int32 iPoliceId = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipoliceid());

    // required int32 iNonce = 9 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int64 tTimeStamp = 10 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .interfaces.msgPsnymResolutionRes_RA2Police.msgPsnymResolution pstPsnymResolutionInfo = 4;
  total_size += 1UL * this->_internal_pstpsnymresolutioninfo_size();
  for (const auto& msg : this->pstpsnymresolutioninfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsigner_);
  }

  // optional .interfaces.msgSignature stSign = 12;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsign_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgPsnymResolutionRes_RA2Police::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgPsnymResolutionRes_RA2Police)
  GOOGLE_DCHECK_NE(&from, this);
  const msgPsnymResolutionRes_RA2Police* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgPsnymResolutionRes_RA2Police>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgPsnymResolutionRes_RA2Police)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgPsnymResolutionRes_RA2Police)
    MergeFrom(*source);
  }
}

void msgPsnymResolutionRes_RA2Police::MergeFrom(const msgPsnymResolutionRes_RA2Police& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgPsnymResolutionRes_RA2Police)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pstpsnymresolutioninfo_.MergeFrom(from.pstpsnymresolutioninfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sterrinfo()->::interfaces::msgError::MergeFrom(from._internal_sterrinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000008u) {
      uinoofpsnymstoberesolved_ = from.uinoofpsnymstoberesolved_;
    }
    if (cached_has_bits & 0x00000010u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000020u) {
      iraidrange_ = from.iraidrange_;
    }
    if (cached_has_bits & 0x00000040u) {
      iltcaidrange_ = from.iltcaidrange_;
    }
    if (cached_has_bits & 0x00000080u) {
      ipcaidrange_ = from.ipcaidrange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      ipoliceid_ = from.ipoliceid_;
    }
    if (cached_has_bits & 0x00000200u) {
      inonce_ = from.inonce_;
    }
    if (cached_has_bits & 0x00000400u) {
      ttimestamp_ = from.ttimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgPsnymResolutionRes_RA2Police::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgPsnymResolutionRes_RA2Police)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgPsnymResolutionRes_RA2Police::CopyFrom(const msgPsnymResolutionRes_RA2Police& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgPsnymResolutionRes_RA2Police)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgPsnymResolutionRes_RA2Police::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pstpsnymresolutioninfo_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  if (_internal_has_sterrinfo()) {
    if (!sterrinfo_->IsInitialized()) return false;
  }
  return true;
}

void msgPsnymResolutionRes_RA2Police::InternalSwap(msgPsnymResolutionRes_RA2Police* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pstpsnymresolutioninfo_.InternalSwap(&other->pstpsnymresolutioninfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgPsnymResolutionRes_RA2Police, uinoofpsnymstoberesolved_)
      + sizeof(msgPsnymResolutionRes_RA2Police::uinoofpsnymstoberesolved_)
      - PROTOBUF_FIELD_OFFSET(msgPsnymResolutionRes_RA2Police, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(ireqtype_, other->ireqtype_);
  swap(iraidrange_, other->iraidrange_);
  swap(iltcaidrange_, other->iltcaidrange_);
  swap(ipcaidrange_, other->ipcaidrange_);
  swap(ipoliceid_, other->ipoliceid_);
  swap(inonce_, other->inonce_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgPsnymResolutionRes_RA2Police::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgPsnymResolutionAck_Police2RA::InitAsDefaultInstance() {
  ::interfaces::_msgPsnymResolutionAck_Police2RA_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgPsnymResolutionAck_Police2RA_default_instance_._instance.get_mutable()->sterrinfo_ = const_cast< ::interfaces::msgError*>(
      ::interfaces::msgError::internal_default_instance());
  ::interfaces::_msgPsnymResolutionAck_Police2RA_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgPsnymResolutionAck_Police2RA::_Internal {
 public:
  using HasBits = decltype(std::declval<msgPsnymResolutionAck_Police2RA>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgPsnymResolutionAck_Police2RA* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uinoofpsnymstoberesolved(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ipoliceid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_iraidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::interfaces::msgError& sterrinfo(const msgPsnymResolutionAck_Police2RA* msg);
  static void set_has_sterrinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::interfaces::msgSignature& stsign(const msgPsnymResolutionAck_Police2RA* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001fa) ^ 0x000001fa) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgPsnymResolutionAck_Police2RA::_Internal::stsigner(const msgPsnymResolutionAck_Police2RA* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgError&
msgPsnymResolutionAck_Police2RA::_Internal::sterrinfo(const msgPsnymResolutionAck_Police2RA* msg) {
  return *msg->sterrinfo_;
}
const ::interfaces::msgSignature&
msgPsnymResolutionAck_Police2RA::_Internal::stsign(const msgPsnymResolutionAck_Police2RA* msg) {
  return *msg->stsign_;
}
msgPsnymResolutionAck_Police2RA::msgPsnymResolutionAck_Police2RA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pstpsnymresolutionerrinfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgPsnymResolutionAck_Police2RA)
}
msgPsnymResolutionAck_Police2RA::msgPsnymResolutionAck_Police2RA(const msgPsnymResolutionAck_Police2RA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pstpsnymresolutionerrinfo_(from.pstpsnymresolutionerrinfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_sterrinfo()) {
    sterrinfo_ = new ::interfaces::msgError(*from.sterrinfo_);
  } else {
    sterrinfo_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&uinoofpsnymstoberesolved_, &from.uinoofpsnymstoberesolved_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&uinoofpsnymstoberesolved_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgPsnymResolutionAck_Police2RA)
}

void msgPsnymResolutionAck_Police2RA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgPsnymResolutionAck_Police2RA_Interfaces_2eproto.base);
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uinoofpsnymstoberesolved_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(uinoofpsnymstoberesolved_));
  ireqtype_ = -1;
  ipoliceid_ = -1;
  iraidrange_ = -1;
  inonce_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgPsnymResolutionAck_Police2RA::~msgPsnymResolutionAck_Police2RA() {
  // @@protoc_insertion_point(destructor:interfaces.msgPsnymResolutionAck_Police2RA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgPsnymResolutionAck_Police2RA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete sterrinfo_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgPsnymResolutionAck_Police2RA::ArenaDtor(void* object) {
  msgPsnymResolutionAck_Police2RA* _this = reinterpret_cast< msgPsnymResolutionAck_Police2RA* >(object);
  (void)_this;
}
void msgPsnymResolutionAck_Police2RA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgPsnymResolutionAck_Police2RA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgPsnymResolutionAck_Police2RA& msgPsnymResolutionAck_Police2RA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgPsnymResolutionAck_Police2RA_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgPsnymResolutionAck_Police2RA::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgPsnymResolutionAck_Police2RA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pstpsnymresolutionerrinfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sterrinfo_ != nullptr);
      sterrinfo_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    uinoofpsnymstoberesolved_ = 0u;
    ireqtype_ = -1;
    ipoliceid_ = -1;
    iraidrange_ = -1;
    inonce_ = -1;
  }
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgPsnymResolutionAck_Police2RA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uinoofpsnymstoberesolved(&has_bits);
          uinoofpsnymstoberesolved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iPoliceId = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ipoliceid(&has_bits);
          ipoliceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iRAIdRange = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_iraidrange(&has_bits);
          iraidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .interfaces.msgError pstPsnymResolutionErrInfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pstpsnymresolutionerrinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgError stErrInfo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_sterrinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgPsnymResolutionAck_Police2RA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgPsnymResolutionAck_Police2RA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uinoofpsnymstoberesolved(), target);
  }

  // required int32 iPoliceId = 4 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ipoliceid(), target);
  }

  // required int32 iRAIdRange = 5 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_iraidrange(), target);
  }

  // repeated .interfaces.msgError pstPsnymResolutionErrInfo = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pstpsnymresolutionerrinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_pstpsnymresolutionerrinfo(i), target, stream);
  }

  // required int32 iNonce = 7 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 8 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_ttimestamp(), target);
  }

  // required .interfaces.msgError stErrInfo = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::sterrinfo(this), target, stream);
  }

  // optional .interfaces.msgSignature stSign = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgPsnymResolutionAck_Police2RA)
  return target;
}

size_t msgPsnymResolutionAck_Police2RA::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgPsnymResolutionAck_Police2RA)
  size_t total_size = 0;

  if (_internal_has_sterrinfo()) {
    // required .interfaces.msgError stErrInfo = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);
  }

  if (_internal_has_uinoofpsnymstoberesolved()) {
    // required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofpsnymstoberesolved());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_ipoliceid()) {
    // required int32 iPoliceId = 4 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipoliceid());
  }

  if (_internal_has_iraidrange()) {
    // required int32 iRAIdRange = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iraidrange());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgPsnymResolutionAck_Police2RA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgPsnymResolutionAck_Police2RA)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000001fa) ^ 0x000001fa) == 0) {  // All required fields are present.
    // required .interfaces.msgError stErrInfo = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);

    // required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofpsnymstoberesolved());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iPoliceId = 4 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipoliceid());

    // required int32 iRAIdRange = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iraidrange());

    // required int32 iNonce = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int64 tTimeStamp = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .interfaces.msgError pstPsnymResolutionErrInfo = 6;
  total_size += 1UL * this->_internal_pstpsnymresolutionerrinfo_size();
  for (const auto& msg : this->pstpsnymresolutionerrinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsigner_);
  }

  // optional .interfaces.msgSignature stSign = 10;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsign_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgPsnymResolutionAck_Police2RA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgPsnymResolutionAck_Police2RA)
  GOOGLE_DCHECK_NE(&from, this);
  const msgPsnymResolutionAck_Police2RA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgPsnymResolutionAck_Police2RA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgPsnymResolutionAck_Police2RA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgPsnymResolutionAck_Police2RA)
    MergeFrom(*source);
  }
}

void msgPsnymResolutionAck_Police2RA::MergeFrom(const msgPsnymResolutionAck_Police2RA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgPsnymResolutionAck_Police2RA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pstpsnymresolutionerrinfo_.MergeFrom(from.pstpsnymresolutionerrinfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sterrinfo()->::interfaces::msgError::MergeFrom(from._internal_sterrinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000008u) {
      uinoofpsnymstoberesolved_ = from.uinoofpsnymstoberesolved_;
    }
    if (cached_has_bits & 0x00000010u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000020u) {
      ipoliceid_ = from.ipoliceid_;
    }
    if (cached_has_bits & 0x00000040u) {
      iraidrange_ = from.iraidrange_;
    }
    if (cached_has_bits & 0x00000080u) {
      inonce_ = from.inonce_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_ttimestamp(from._internal_ttimestamp());
  }
}

void msgPsnymResolutionAck_Police2RA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgPsnymResolutionAck_Police2RA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgPsnymResolutionAck_Police2RA::CopyFrom(const msgPsnymResolutionAck_Police2RA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgPsnymResolutionAck_Police2RA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgPsnymResolutionAck_Police2RA::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pstpsnymresolutionerrinfo_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  if (_internal_has_sterrinfo()) {
    if (!sterrinfo_->IsInitialized()) return false;
  }
  return true;
}

void msgPsnymResolutionAck_Police2RA::InternalSwap(msgPsnymResolutionAck_Police2RA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pstpsnymresolutionerrinfo_.InternalSwap(&other->pstpsnymresolutionerrinfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgPsnymResolutionAck_Police2RA, uinoofpsnymstoberesolved_)
      + sizeof(msgPsnymResolutionAck_Police2RA::uinoofpsnymstoberesolved_)
      - PROTOBUF_FIELD_OFFSET(msgPsnymResolutionAck_Police2RA, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(ireqtype_, other->ireqtype_);
  swap(ipoliceid_, other->ipoliceid_);
  swap(iraidrange_, other->iraidrange_);
  swap(inonce_, other->inonce_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgPsnymResolutionAck_Police2RA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgBanTicketsReq_Police2RA_msgBannedTickets::InitAsDefaultInstance() {
}
class msgBanTicketsReq_Police2RA_msgBannedTickets::_Internal {
 public:
  using HasBits = decltype(std::declval<msgBanTicketsReq_Police2RA_msgBannedTickets>()._has_bits_);
  static void set_has_strserialno(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_strticket(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

msgBanTicketsReq_Police2RA_msgBannedTickets::msgBanTicketsReq_Police2RA_msgBannedTickets(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgBanTicketsReq_Police2RA.msgBannedTickets)
}
msgBanTicketsReq_Police2RA_msgBannedTickets::msgBanTicketsReq_Police2RA_msgBannedTickets(const msgBanTicketsReq_Police2RA_msgBannedTickets& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strserialno()) {
    strserialno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strserialno(),
      GetArena());
  }
  strticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strticket()) {
    strticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strticket(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:interfaces.msgBanTicketsReq_Police2RA.msgBannedTickets)
}

void msgBanTicketsReq_Police2RA_msgBannedTickets::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgBanTicketsReq_Police2RA_msgBannedTickets_Interfaces_2eproto.base);
  strserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

msgBanTicketsReq_Police2RA_msgBannedTickets::~msgBanTicketsReq_Police2RA_msgBannedTickets() {
  // @@protoc_insertion_point(destructor:interfaces.msgBanTicketsReq_Police2RA.msgBannedTickets)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgBanTicketsReq_Police2RA_msgBannedTickets::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strserialno_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msgBanTicketsReq_Police2RA_msgBannedTickets::ArenaDtor(void* object) {
  msgBanTicketsReq_Police2RA_msgBannedTickets* _this = reinterpret_cast< msgBanTicketsReq_Police2RA_msgBannedTickets* >(object);
  (void)_this;
}
void msgBanTicketsReq_Police2RA_msgBannedTickets::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgBanTicketsReq_Police2RA_msgBannedTickets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgBanTicketsReq_Police2RA_msgBannedTickets& msgBanTicketsReq_Police2RA_msgBannedTickets::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgBanTicketsReq_Police2RA_msgBannedTickets_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgBanTicketsReq_Police2RA_msgBannedTickets::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgBanTicketsReq_Police2RA.msgBannedTickets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      strserialno_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      strticket_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgBanTicketsReq_Police2RA_msgBannedTickets::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string strSerialNo = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_strserialno();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgBanTicketsReq_Police2RA.msgBannedTickets.strSerialNo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strTicket = 2 [default = ""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_strticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgBanTicketsReq_Police2RA.msgBannedTickets.strTicket");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgBanTicketsReq_Police2RA_msgBannedTickets::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgBanTicketsReq_Police2RA.msgBannedTickets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string strSerialNo = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strserialno().data(), static_cast<int>(this->_internal_strserialno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgBanTicketsReq_Police2RA.msgBannedTickets.strSerialNo");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_strserialno(), target);
  }

  // required string strTicket = 2 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strticket().data(), static_cast<int>(this->_internal_strticket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgBanTicketsReq_Police2RA.msgBannedTickets.strTicket");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_strticket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgBanTicketsReq_Police2RA.msgBannedTickets)
  return target;
}

size_t msgBanTicketsReq_Police2RA_msgBannedTickets::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgBanTicketsReq_Police2RA.msgBannedTickets)
  size_t total_size = 0;

  if (_internal_has_strserialno()) {
    // required string strSerialNo = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strserialno());
  }

  if (_internal_has_strticket()) {
    // required string strTicket = 2 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticket());
  }

  return total_size;
}
size_t msgBanTicketsReq_Police2RA_msgBannedTickets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgBanTicketsReq_Police2RA.msgBannedTickets)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string strSerialNo = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strserialno());

    // required string strTicket = 2 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticket());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgBanTicketsReq_Police2RA_msgBannedTickets::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgBanTicketsReq_Police2RA.msgBannedTickets)
  GOOGLE_DCHECK_NE(&from, this);
  const msgBanTicketsReq_Police2RA_msgBannedTickets* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgBanTicketsReq_Police2RA_msgBannedTickets>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgBanTicketsReq_Police2RA.msgBannedTickets)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgBanTicketsReq_Police2RA.msgBannedTickets)
    MergeFrom(*source);
  }
}

void msgBanTicketsReq_Police2RA_msgBannedTickets::MergeFrom(const msgBanTicketsReq_Police2RA_msgBannedTickets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgBanTicketsReq_Police2RA.msgBannedTickets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strserialno(from._internal_strserialno());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_strticket(from._internal_strticket());
    }
  }
}

void msgBanTicketsReq_Police2RA_msgBannedTickets::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgBanTicketsReq_Police2RA.msgBannedTickets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgBanTicketsReq_Police2RA_msgBannedTickets::CopyFrom(const msgBanTicketsReq_Police2RA_msgBannedTickets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgBanTicketsReq_Police2RA.msgBannedTickets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgBanTicketsReq_Police2RA_msgBannedTickets::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void msgBanTicketsReq_Police2RA_msgBannedTickets::InternalSwap(msgBanTicketsReq_Police2RA_msgBannedTickets* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strserialno_.Swap(&other->strserialno_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strticket_.Swap(&other->strticket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata msgBanTicketsReq_Police2RA_msgBannedTickets::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgBanTicketsReq_Police2RA::InitAsDefaultInstance() {
  ::interfaces::_msgBanTicketsReq_Police2RA_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgBanTicketsReq_Police2RA_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgBanTicketsReq_Police2RA::_Internal {
 public:
  using HasBits = decltype(std::declval<msgBanTicketsReq_Police2RA>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgBanTicketsReq_Police2RA* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chpolicyid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uinoofticketstobebanned(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ipoliceid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_iraidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::interfaces::msgSignature& stsign(const msgBanTicketsReq_Police2RA* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001fc) ^ 0x000001fc) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgBanTicketsReq_Police2RA::_Internal::stsigner(const msgBanTicketsReq_Police2RA* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgSignature&
msgBanTicketsReq_Police2RA::_Internal::stsign(const msgBanTicketsReq_Police2RA* msg) {
  return *msg->stsign_;
}
msgBanTicketsReq_Police2RA::msgBanTicketsReq_Police2RA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pstbannedticketsinfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgBanTicketsReq_Police2RA)
}
msgBanTicketsReq_Police2RA::msgBanTicketsReq_Police2RA(const msgBanTicketsReq_Police2RA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pstbannedticketsinfo_(from.pstbannedticketsinfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&chpolicyid_, &from.chpolicyid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&chpolicyid_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgBanTicketsReq_Police2RA)
}

void msgBanTicketsReq_Police2RA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgBanTicketsReq_Police2RA_Interfaces_2eproto.base);
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uinoofticketstobebanned_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(uinoofticketstobebanned_));
  ireqtype_ = -1;
  ipoliceid_ = -1;
  iraidrange_ = -1;
  inonce_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgBanTicketsReq_Police2RA::~msgBanTicketsReq_Police2RA() {
  // @@protoc_insertion_point(destructor:interfaces.msgBanTicketsReq_Police2RA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgBanTicketsReq_Police2RA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgBanTicketsReq_Police2RA::ArenaDtor(void* object) {
  msgBanTicketsReq_Police2RA* _this = reinterpret_cast< msgBanTicketsReq_Police2RA* >(object);
  (void)_this;
}
void msgBanTicketsReq_Police2RA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgBanTicketsReq_Police2RA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgBanTicketsReq_Police2RA& msgBanTicketsReq_Police2RA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgBanTicketsReq_Police2RA_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgBanTicketsReq_Police2RA::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgBanTicketsReq_Police2RA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pstbannedticketsinfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&chpolicyid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uinoofticketstobebanned_) -
        reinterpret_cast<char*>(&chpolicyid_)) + sizeof(uinoofticketstobebanned_));
    ireqtype_ = -1;
    ipoliceid_ = -1;
    iraidrange_ = -1;
    inonce_ = -1;
  }
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgBanTicketsReq_Police2RA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 chPolicyId = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_chpolicyid(&has_bits);
          chpolicyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiNoOfTicketsToBeBanned = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_uinoofticketstobebanned(&has_bits);
          uinoofticketstobebanned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .interfaces.msgBanTicketsReq_Police2RA.msgBannedTickets pstBannedTicketsInfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pstbannedticketsinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 iPoliceId = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ipoliceid(&has_bits);
          ipoliceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iRAIdRange = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_iraidrange(&has_bits);
          iraidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 9 [default = -1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgBanTicketsReq_Police2RA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgBanTicketsReq_Police2RA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required uint32 chPolicyId = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_chpolicyid(), target);
  }

  // required uint32 uiNoOfTicketsToBeBanned = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_uinoofticketstobebanned(), target);
  }

  // repeated .interfaces.msgBanTicketsReq_Police2RA.msgBannedTickets pstBannedTicketsInfo = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pstbannedticketsinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_pstbannedticketsinfo(i), target, stream);
  }

  // required int32 iPoliceId = 6 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_ipoliceid(), target);
  }

  // required int32 iRAIdRange = 7 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_iraidrange(), target);
  }

  // required int32 iNonce = 8 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 9 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_ttimestamp(), target);
  }

  // optional .interfaces.msgSignature stSign = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgBanTicketsReq_Police2RA)
  return target;
}

size_t msgBanTicketsReq_Police2RA::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgBanTicketsReq_Police2RA)
  size_t total_size = 0;

  if (_internal_has_chpolicyid()) {
    // required uint32 chPolicyId = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chpolicyid());
  }

  if (_internal_has_uinoofticketstobebanned()) {
    // required uint32 uiNoOfTicketsToBeBanned = 4 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofticketstobebanned());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_ipoliceid()) {
    // required int32 iPoliceId = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipoliceid());
  }

  if (_internal_has_iraidrange()) {
    // required int32 iRAIdRange = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iraidrange());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 9 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgBanTicketsReq_Police2RA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgBanTicketsReq_Police2RA)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000001fc) ^ 0x000001fc) == 0) {  // All required fields are present.
    // required uint32 chPolicyId = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chpolicyid());

    // required uint32 uiNoOfTicketsToBeBanned = 4 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofticketstobebanned());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iPoliceId = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipoliceid());

    // required int32 iRAIdRange = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iraidrange());

    // required int32 iNonce = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int64 tTimeStamp = 9 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .interfaces.msgBanTicketsReq_Police2RA.msgBannedTickets pstBannedTicketsInfo = 5;
  total_size += 1UL * this->_internal_pstbannedticketsinfo_size();
  for (const auto& msg : this->pstbannedticketsinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .interfaces.msgSignerInfo stSigner = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsigner_);
    }

    // optional .interfaces.msgSignature stSign = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsign_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgBanTicketsReq_Police2RA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgBanTicketsReq_Police2RA)
  GOOGLE_DCHECK_NE(&from, this);
  const msgBanTicketsReq_Police2RA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgBanTicketsReq_Police2RA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgBanTicketsReq_Police2RA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgBanTicketsReq_Police2RA)
    MergeFrom(*source);
  }
}

void msgBanTicketsReq_Police2RA::MergeFrom(const msgBanTicketsReq_Police2RA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgBanTicketsReq_Police2RA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pstbannedticketsinfo_.MergeFrom(from.pstbannedticketsinfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000004u) {
      chpolicyid_ = from.chpolicyid_;
    }
    if (cached_has_bits & 0x00000008u) {
      uinoofticketstobebanned_ = from.uinoofticketstobebanned_;
    }
    if (cached_has_bits & 0x00000010u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000020u) {
      ipoliceid_ = from.ipoliceid_;
    }
    if (cached_has_bits & 0x00000040u) {
      iraidrange_ = from.iraidrange_;
    }
    if (cached_has_bits & 0x00000080u) {
      inonce_ = from.inonce_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_ttimestamp(from._internal_ttimestamp());
  }
}

void msgBanTicketsReq_Police2RA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgBanTicketsReq_Police2RA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgBanTicketsReq_Police2RA::CopyFrom(const msgBanTicketsReq_Police2RA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgBanTicketsReq_Police2RA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgBanTicketsReq_Police2RA::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pstbannedticketsinfo_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  return true;
}

void msgBanTicketsReq_Police2RA::InternalSwap(msgBanTicketsReq_Police2RA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pstbannedticketsinfo_.InternalSwap(&other->pstbannedticketsinfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgBanTicketsReq_Police2RA, uinoofticketstobebanned_)
      + sizeof(msgBanTicketsReq_Police2RA::uinoofticketstobebanned_)
      - PROTOBUF_FIELD_OFFSET(msgBanTicketsReq_Police2RA, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(ireqtype_, other->ireqtype_);
  swap(ipoliceid_, other->ipoliceid_);
  swap(iraidrange_, other->iraidrange_);
  swap(inonce_, other->inonce_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgBanTicketsReq_Police2RA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgBanTicketsReq_RA2PCA_msgBannedTickets::InitAsDefaultInstance() {
}
class msgBanTicketsReq_RA2PCA_msgBannedTickets::_Internal {
 public:
  using HasBits = decltype(std::declval<msgBanTicketsReq_RA2PCA_msgBannedTickets>()._has_bits_);
  static void set_has_strserialno(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_strticket(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

msgBanTicketsReq_RA2PCA_msgBannedTickets::msgBanTicketsReq_RA2PCA_msgBannedTickets(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgBanTicketsReq_RA2PCA.msgBannedTickets)
}
msgBanTicketsReq_RA2PCA_msgBannedTickets::msgBanTicketsReq_RA2PCA_msgBannedTickets(const msgBanTicketsReq_RA2PCA_msgBannedTickets& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strserialno()) {
    strserialno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strserialno(),
      GetArena());
  }
  strticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strticket()) {
    strticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strticket(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:interfaces.msgBanTicketsReq_RA2PCA.msgBannedTickets)
}

void msgBanTicketsReq_RA2PCA_msgBannedTickets::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgBanTicketsReq_RA2PCA_msgBannedTickets_Interfaces_2eproto.base);
  strserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

msgBanTicketsReq_RA2PCA_msgBannedTickets::~msgBanTicketsReq_RA2PCA_msgBannedTickets() {
  // @@protoc_insertion_point(destructor:interfaces.msgBanTicketsReq_RA2PCA.msgBannedTickets)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgBanTicketsReq_RA2PCA_msgBannedTickets::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strserialno_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msgBanTicketsReq_RA2PCA_msgBannedTickets::ArenaDtor(void* object) {
  msgBanTicketsReq_RA2PCA_msgBannedTickets* _this = reinterpret_cast< msgBanTicketsReq_RA2PCA_msgBannedTickets* >(object);
  (void)_this;
}
void msgBanTicketsReq_RA2PCA_msgBannedTickets::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgBanTicketsReq_RA2PCA_msgBannedTickets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgBanTicketsReq_RA2PCA_msgBannedTickets& msgBanTicketsReq_RA2PCA_msgBannedTickets::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgBanTicketsReq_RA2PCA_msgBannedTickets_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgBanTicketsReq_RA2PCA_msgBannedTickets::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgBanTicketsReq_RA2PCA.msgBannedTickets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      strserialno_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      strticket_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgBanTicketsReq_RA2PCA_msgBannedTickets::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string strSerialNo = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_strserialno();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgBanTicketsReq_RA2PCA.msgBannedTickets.strSerialNo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strTicket = 2 [default = ""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_strticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgBanTicketsReq_RA2PCA.msgBannedTickets.strTicket");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgBanTicketsReq_RA2PCA_msgBannedTickets::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgBanTicketsReq_RA2PCA.msgBannedTickets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string strSerialNo = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strserialno().data(), static_cast<int>(this->_internal_strserialno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgBanTicketsReq_RA2PCA.msgBannedTickets.strSerialNo");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_strserialno(), target);
  }

  // required string strTicket = 2 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strticket().data(), static_cast<int>(this->_internal_strticket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgBanTicketsReq_RA2PCA.msgBannedTickets.strTicket");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_strticket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgBanTicketsReq_RA2PCA.msgBannedTickets)
  return target;
}

size_t msgBanTicketsReq_RA2PCA_msgBannedTickets::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgBanTicketsReq_RA2PCA.msgBannedTickets)
  size_t total_size = 0;

  if (_internal_has_strserialno()) {
    // required string strSerialNo = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strserialno());
  }

  if (_internal_has_strticket()) {
    // required string strTicket = 2 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticket());
  }

  return total_size;
}
size_t msgBanTicketsReq_RA2PCA_msgBannedTickets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgBanTicketsReq_RA2PCA.msgBannedTickets)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string strSerialNo = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strserialno());

    // required string strTicket = 2 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticket());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgBanTicketsReq_RA2PCA_msgBannedTickets::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgBanTicketsReq_RA2PCA.msgBannedTickets)
  GOOGLE_DCHECK_NE(&from, this);
  const msgBanTicketsReq_RA2PCA_msgBannedTickets* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgBanTicketsReq_RA2PCA_msgBannedTickets>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgBanTicketsReq_RA2PCA.msgBannedTickets)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgBanTicketsReq_RA2PCA.msgBannedTickets)
    MergeFrom(*source);
  }
}

void msgBanTicketsReq_RA2PCA_msgBannedTickets::MergeFrom(const msgBanTicketsReq_RA2PCA_msgBannedTickets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgBanTicketsReq_RA2PCA.msgBannedTickets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strserialno(from._internal_strserialno());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_strticket(from._internal_strticket());
    }
  }
}

void msgBanTicketsReq_RA2PCA_msgBannedTickets::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgBanTicketsReq_RA2PCA.msgBannedTickets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgBanTicketsReq_RA2PCA_msgBannedTickets::CopyFrom(const msgBanTicketsReq_RA2PCA_msgBannedTickets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgBanTicketsReq_RA2PCA.msgBannedTickets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgBanTicketsReq_RA2PCA_msgBannedTickets::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void msgBanTicketsReq_RA2PCA_msgBannedTickets::InternalSwap(msgBanTicketsReq_RA2PCA_msgBannedTickets* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strserialno_.Swap(&other->strserialno_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strticket_.Swap(&other->strticket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata msgBanTicketsReq_RA2PCA_msgBannedTickets::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgBanTicketsReq_RA2PCA::InitAsDefaultInstance() {
  ::interfaces::_msgBanTicketsReq_RA2PCA_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgBanTicketsReq_RA2PCA_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgBanTicketsReq_RA2PCA::_Internal {
 public:
  using HasBits = decltype(std::declval<msgBanTicketsReq_RA2PCA>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgBanTicketsReq_RA2PCA* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chpolicyid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uinoofticketstobebanned(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_iraidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_iltcaidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::interfaces::msgSignature& stsign(const msgBanTicketsReq_RA2PCA* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001fc) ^ 0x000001fc) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgBanTicketsReq_RA2PCA::_Internal::stsigner(const msgBanTicketsReq_RA2PCA* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgSignature&
msgBanTicketsReq_RA2PCA::_Internal::stsign(const msgBanTicketsReq_RA2PCA* msg) {
  return *msg->stsign_;
}
msgBanTicketsReq_RA2PCA::msgBanTicketsReq_RA2PCA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pstbannedticketsinfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgBanTicketsReq_RA2PCA)
}
msgBanTicketsReq_RA2PCA::msgBanTicketsReq_RA2PCA(const msgBanTicketsReq_RA2PCA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pstbannedticketsinfo_(from.pstbannedticketsinfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&chpolicyid_, &from.chpolicyid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&chpolicyid_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgBanTicketsReq_RA2PCA)
}

void msgBanTicketsReq_RA2PCA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgBanTicketsReq_RA2PCA_Interfaces_2eproto.base);
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uinoofticketstobebanned_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(uinoofticketstobebanned_));
  ireqtype_ = -1;
  iraidrange_ = -1;
  iltcaidrange_ = -1;
  inonce_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgBanTicketsReq_RA2PCA::~msgBanTicketsReq_RA2PCA() {
  // @@protoc_insertion_point(destructor:interfaces.msgBanTicketsReq_RA2PCA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgBanTicketsReq_RA2PCA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgBanTicketsReq_RA2PCA::ArenaDtor(void* object) {
  msgBanTicketsReq_RA2PCA* _this = reinterpret_cast< msgBanTicketsReq_RA2PCA* >(object);
  (void)_this;
}
void msgBanTicketsReq_RA2PCA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgBanTicketsReq_RA2PCA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgBanTicketsReq_RA2PCA& msgBanTicketsReq_RA2PCA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgBanTicketsReq_RA2PCA_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgBanTicketsReq_RA2PCA::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgBanTicketsReq_RA2PCA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pstbannedticketsinfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&chpolicyid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uinoofticketstobebanned_) -
        reinterpret_cast<char*>(&chpolicyid_)) + sizeof(uinoofticketstobebanned_));
    ireqtype_ = -1;
    iraidrange_ = -1;
    iltcaidrange_ = -1;
    inonce_ = -1;
  }
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgBanTicketsReq_RA2PCA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 chPolicyId = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_chpolicyid(&has_bits);
          chpolicyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiNoOfTicketsToBeBanned = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_uinoofticketstobebanned(&has_bits);
          uinoofticketstobebanned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .interfaces.msgBanTicketsReq_RA2PCA.msgBannedTickets pstBannedTicketsInfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pstbannedticketsinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 iRAIdRange = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_iraidrange(&has_bits);
          iraidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iLTCAIdRange = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_iltcaidrange(&has_bits);
          iltcaidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 9 [default = -1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgBanTicketsReq_RA2PCA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgBanTicketsReq_RA2PCA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required uint32 chPolicyId = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_chpolicyid(), target);
  }

  // required uint32 uiNoOfTicketsToBeBanned = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_uinoofticketstobebanned(), target);
  }

  // repeated .interfaces.msgBanTicketsReq_RA2PCA.msgBannedTickets pstBannedTicketsInfo = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pstbannedticketsinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_pstbannedticketsinfo(i), target, stream);
  }

  // required int32 iRAIdRange = 6 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_iraidrange(), target);
  }

  // required int32 iLTCAIdRange = 7 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_iltcaidrange(), target);
  }

  // required int32 iNonce = 8 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 9 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_ttimestamp(), target);
  }

  // optional .interfaces.msgSignature stSign = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgBanTicketsReq_RA2PCA)
  return target;
}

size_t msgBanTicketsReq_RA2PCA::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgBanTicketsReq_RA2PCA)
  size_t total_size = 0;

  if (_internal_has_chpolicyid()) {
    // required uint32 chPolicyId = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chpolicyid());
  }

  if (_internal_has_uinoofticketstobebanned()) {
    // required uint32 uiNoOfTicketsToBeBanned = 4 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofticketstobebanned());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_iraidrange()) {
    // required int32 iRAIdRange = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iraidrange());
  }

  if (_internal_has_iltcaidrange()) {
    // required int32 iLTCAIdRange = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iltcaidrange());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 9 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgBanTicketsReq_RA2PCA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgBanTicketsReq_RA2PCA)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000001fc) ^ 0x000001fc) == 0) {  // All required fields are present.
    // required uint32 chPolicyId = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chpolicyid());

    // required uint32 uiNoOfTicketsToBeBanned = 4 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofticketstobebanned());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iRAIdRange = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iraidrange());

    // required int32 iLTCAIdRange = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iltcaidrange());

    // required int32 iNonce = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int64 tTimeStamp = 9 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .interfaces.msgBanTicketsReq_RA2PCA.msgBannedTickets pstBannedTicketsInfo = 5;
  total_size += 1UL * this->_internal_pstbannedticketsinfo_size();
  for (const auto& msg : this->pstbannedticketsinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .interfaces.msgSignerInfo stSigner = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsigner_);
    }

    // optional .interfaces.msgSignature stSign = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsign_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgBanTicketsReq_RA2PCA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgBanTicketsReq_RA2PCA)
  GOOGLE_DCHECK_NE(&from, this);
  const msgBanTicketsReq_RA2PCA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgBanTicketsReq_RA2PCA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgBanTicketsReq_RA2PCA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgBanTicketsReq_RA2PCA)
    MergeFrom(*source);
  }
}

void msgBanTicketsReq_RA2PCA::MergeFrom(const msgBanTicketsReq_RA2PCA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgBanTicketsReq_RA2PCA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pstbannedticketsinfo_.MergeFrom(from.pstbannedticketsinfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000004u) {
      chpolicyid_ = from.chpolicyid_;
    }
    if (cached_has_bits & 0x00000008u) {
      uinoofticketstobebanned_ = from.uinoofticketstobebanned_;
    }
    if (cached_has_bits & 0x00000010u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000020u) {
      iraidrange_ = from.iraidrange_;
    }
    if (cached_has_bits & 0x00000040u) {
      iltcaidrange_ = from.iltcaidrange_;
    }
    if (cached_has_bits & 0x00000080u) {
      inonce_ = from.inonce_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_ttimestamp(from._internal_ttimestamp());
  }
}

void msgBanTicketsReq_RA2PCA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgBanTicketsReq_RA2PCA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgBanTicketsReq_RA2PCA::CopyFrom(const msgBanTicketsReq_RA2PCA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgBanTicketsReq_RA2PCA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgBanTicketsReq_RA2PCA::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pstbannedticketsinfo_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  return true;
}

void msgBanTicketsReq_RA2PCA::InternalSwap(msgBanTicketsReq_RA2PCA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pstbannedticketsinfo_.InternalSwap(&other->pstbannedticketsinfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgBanTicketsReq_RA2PCA, uinoofticketstobebanned_)
      + sizeof(msgBanTicketsReq_RA2PCA::uinoofticketstobebanned_)
      - PROTOBUF_FIELD_OFFSET(msgBanTicketsReq_RA2PCA, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(ireqtype_, other->ireqtype_);
  swap(iraidrange_, other->iraidrange_);
  swap(iltcaidrange_, other->iltcaidrange_);
  swap(inonce_, other->inonce_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgBanTicketsReq_RA2PCA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgBanTicketsRes_PCA2RA_msgBannedTickets::InitAsDefaultInstance() {
  ::interfaces::_msgBanTicketsRes_PCA2RA_msgBannedTickets_default_instance_._instance.get_mutable()->sterrinfo_ = const_cast< ::interfaces::msgError*>(
      ::interfaces::msgError::internal_default_instance());
}
class msgBanTicketsRes_PCA2RA_msgBannedTickets::_Internal {
 public:
  using HasBits = decltype(std::declval<msgBanTicketsRes_PCA2RA_msgBannedTickets>()._has_bits_);
  static void set_has_strticketserialno(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::interfaces::msgError& sterrinfo(const msgBanTicketsRes_PCA2RA_msgBannedTickets* msg);
  static void set_has_sterrinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::interfaces::msgError&
msgBanTicketsRes_PCA2RA_msgBannedTickets::_Internal::sterrinfo(const msgBanTicketsRes_PCA2RA_msgBannedTickets* msg) {
  return *msg->sterrinfo_;
}
msgBanTicketsRes_PCA2RA_msgBannedTickets::msgBanTicketsRes_PCA2RA_msgBannedTickets(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgBanTicketsRes_PCA2RA.msgBannedTickets)
}
msgBanTicketsRes_PCA2RA_msgBannedTickets::msgBanTicketsRes_PCA2RA_msgBannedTickets(const msgBanTicketsRes_PCA2RA_msgBannedTickets& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strticketserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strticketserialno()) {
    strticketserialno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strticketserialno(),
      GetArena());
  }
  if (from._internal_has_sterrinfo()) {
    sterrinfo_ = new ::interfaces::msgError(*from.sterrinfo_);
  } else {
    sterrinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:interfaces.msgBanTicketsRes_PCA2RA.msgBannedTickets)
}

void msgBanTicketsRes_PCA2RA_msgBannedTickets::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgBanTicketsRes_PCA2RA_msgBannedTickets_Interfaces_2eproto.base);
  strticketserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sterrinfo_ = nullptr;
}

msgBanTicketsRes_PCA2RA_msgBannedTickets::~msgBanTicketsRes_PCA2RA_msgBannedTickets() {
  // @@protoc_insertion_point(destructor:interfaces.msgBanTicketsRes_PCA2RA.msgBannedTickets)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgBanTicketsRes_PCA2RA_msgBannedTickets::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strticketserialno_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sterrinfo_;
}

void msgBanTicketsRes_PCA2RA_msgBannedTickets::ArenaDtor(void* object) {
  msgBanTicketsRes_PCA2RA_msgBannedTickets* _this = reinterpret_cast< msgBanTicketsRes_PCA2RA_msgBannedTickets* >(object);
  (void)_this;
}
void msgBanTicketsRes_PCA2RA_msgBannedTickets::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgBanTicketsRes_PCA2RA_msgBannedTickets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgBanTicketsRes_PCA2RA_msgBannedTickets& msgBanTicketsRes_PCA2RA_msgBannedTickets::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgBanTicketsRes_PCA2RA_msgBannedTickets_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgBanTicketsRes_PCA2RA_msgBannedTickets::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgBanTicketsRes_PCA2RA.msgBannedTickets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      strticketserialno_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sterrinfo_ != nullptr);
      sterrinfo_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgBanTicketsRes_PCA2RA_msgBannedTickets::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string strTicketSerialNo = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_strticketserialno();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgBanTicketsRes_PCA2RA.msgBannedTickets.strTicketSerialNo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgError stErrInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sterrinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgBanTicketsRes_PCA2RA_msgBannedTickets::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgBanTicketsRes_PCA2RA.msgBannedTickets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string strTicketSerialNo = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strticketserialno().data(), static_cast<int>(this->_internal_strticketserialno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgBanTicketsRes_PCA2RA.msgBannedTickets.strTicketSerialNo");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_strticketserialno(), target);
  }

  // required .interfaces.msgError stErrInfo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sterrinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgBanTicketsRes_PCA2RA.msgBannedTickets)
  return target;
}

size_t msgBanTicketsRes_PCA2RA_msgBannedTickets::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgBanTicketsRes_PCA2RA.msgBannedTickets)
  size_t total_size = 0;

  if (_internal_has_strticketserialno()) {
    // required string strTicketSerialNo = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticketserialno());
  }

  if (_internal_has_sterrinfo()) {
    // required .interfaces.msgError stErrInfo = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);
  }

  return total_size;
}
size_t msgBanTicketsRes_PCA2RA_msgBannedTickets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgBanTicketsRes_PCA2RA.msgBannedTickets)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string strTicketSerialNo = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticketserialno());

    // required .interfaces.msgError stErrInfo = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgBanTicketsRes_PCA2RA_msgBannedTickets::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgBanTicketsRes_PCA2RA.msgBannedTickets)
  GOOGLE_DCHECK_NE(&from, this);
  const msgBanTicketsRes_PCA2RA_msgBannedTickets* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgBanTicketsRes_PCA2RA_msgBannedTickets>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgBanTicketsRes_PCA2RA.msgBannedTickets)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgBanTicketsRes_PCA2RA.msgBannedTickets)
    MergeFrom(*source);
  }
}

void msgBanTicketsRes_PCA2RA_msgBannedTickets::MergeFrom(const msgBanTicketsRes_PCA2RA_msgBannedTickets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgBanTicketsRes_PCA2RA.msgBannedTickets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strticketserialno(from._internal_strticketserialno());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sterrinfo()->::interfaces::msgError::MergeFrom(from._internal_sterrinfo());
    }
  }
}

void msgBanTicketsRes_PCA2RA_msgBannedTickets::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgBanTicketsRes_PCA2RA.msgBannedTickets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgBanTicketsRes_PCA2RA_msgBannedTickets::CopyFrom(const msgBanTicketsRes_PCA2RA_msgBannedTickets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgBanTicketsRes_PCA2RA.msgBannedTickets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgBanTicketsRes_PCA2RA_msgBannedTickets::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_sterrinfo()) {
    if (!sterrinfo_->IsInitialized()) return false;
  }
  return true;
}

void msgBanTicketsRes_PCA2RA_msgBannedTickets::InternalSwap(msgBanTicketsRes_PCA2RA_msgBannedTickets* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strticketserialno_.Swap(&other->strticketserialno_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(sterrinfo_, other->sterrinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgBanTicketsRes_PCA2RA_msgBannedTickets::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgBanTicketsRes_PCA2RA::InitAsDefaultInstance() {
  ::interfaces::_msgBanTicketsRes_PCA2RA_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgBanTicketsRes_PCA2RA_default_instance_._instance.get_mutable()->sterrinfo_ = const_cast< ::interfaces::msgError*>(
      ::interfaces::msgError::internal_default_instance());
  ::interfaces::_msgBanTicketsRes_PCA2RA_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgBanTicketsRes_PCA2RA::_Internal {
 public:
  using HasBits = decltype(std::declval<msgBanTicketsRes_PCA2RA>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgBanTicketsRes_PCA2RA* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uinoofticketstobebanned(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_uinoofsuccessfullybannedtickets(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_iraidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_iltcaidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::interfaces::msgError& sterrinfo(const msgBanTicketsRes_PCA2RA* msg);
  static void set_has_sterrinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::interfaces::msgSignature& stsign(const msgBanTicketsRes_PCA2RA* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000003fa) ^ 0x000003fa) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgBanTicketsRes_PCA2RA::_Internal::stsigner(const msgBanTicketsRes_PCA2RA* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgError&
msgBanTicketsRes_PCA2RA::_Internal::sterrinfo(const msgBanTicketsRes_PCA2RA* msg) {
  return *msg->sterrinfo_;
}
const ::interfaces::msgSignature&
msgBanTicketsRes_PCA2RA::_Internal::stsign(const msgBanTicketsRes_PCA2RA* msg) {
  return *msg->stsign_;
}
msgBanTicketsRes_PCA2RA::msgBanTicketsRes_PCA2RA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pstbannedticketsinfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgBanTicketsRes_PCA2RA)
}
msgBanTicketsRes_PCA2RA::msgBanTicketsRes_PCA2RA(const msgBanTicketsRes_PCA2RA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pstbannedticketsinfo_(from.pstbannedticketsinfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_sterrinfo()) {
    sterrinfo_ = new ::interfaces::msgError(*from.sterrinfo_);
  } else {
    sterrinfo_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&uinoofticketstobebanned_, &from.uinoofticketstobebanned_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&uinoofticketstobebanned_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgBanTicketsRes_PCA2RA)
}

void msgBanTicketsRes_PCA2RA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgBanTicketsRes_PCA2RA_Interfaces_2eproto.base);
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uinoofsuccessfullybannedtickets_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(uinoofsuccessfullybannedtickets_));
  ireqtype_ = -1;
  iraidrange_ = -1;
  iltcaidrange_ = -1;
  inonce_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgBanTicketsRes_PCA2RA::~msgBanTicketsRes_PCA2RA() {
  // @@protoc_insertion_point(destructor:interfaces.msgBanTicketsRes_PCA2RA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgBanTicketsRes_PCA2RA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete sterrinfo_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgBanTicketsRes_PCA2RA::ArenaDtor(void* object) {
  msgBanTicketsRes_PCA2RA* _this = reinterpret_cast< msgBanTicketsRes_PCA2RA* >(object);
  (void)_this;
}
void msgBanTicketsRes_PCA2RA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgBanTicketsRes_PCA2RA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgBanTicketsRes_PCA2RA& msgBanTicketsRes_PCA2RA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgBanTicketsRes_PCA2RA_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgBanTicketsRes_PCA2RA::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgBanTicketsRes_PCA2RA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pstbannedticketsinfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sterrinfo_ != nullptr);
      sterrinfo_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&uinoofticketstobebanned_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uinoofsuccessfullybannedtickets_) -
        reinterpret_cast<char*>(&uinoofticketstobebanned_)) + sizeof(uinoofsuccessfullybannedtickets_));
    ireqtype_ = -1;
    iraidrange_ = -1;
    iltcaidrange_ = -1;
  }
  if (cached_has_bits & 0x00000300u) {
    inonce_ = -1;
    ttimestamp_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgBanTicketsRes_PCA2RA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiNoOfTicketsToBeBanned = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uinoofticketstobebanned(&has_bits);
          uinoofticketstobebanned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiNoOfSuccessfullyBannedTickets = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_uinoofsuccessfullybannedtickets(&has_bits);
          uinoofsuccessfullybannedtickets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .interfaces.msgBanTicketsRes_PCA2RA.msgBannedTickets pstBannedTicketsInfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pstbannedticketsinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 iRAIdRange = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_iraidrange(&has_bits);
          iraidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iLTCAIdRange = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_iltcaidrange(&has_bits);
          iltcaidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 9 [default = -1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgError stErrInfo = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_sterrinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgBanTicketsRes_PCA2RA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgBanTicketsRes_PCA2RA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required uint32 uiNoOfTicketsToBeBanned = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uinoofticketstobebanned(), target);
  }

  // required uint32 uiNoOfSuccessfullyBannedTickets = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_uinoofsuccessfullybannedtickets(), target);
  }

  // repeated .interfaces.msgBanTicketsRes_PCA2RA.msgBannedTickets pstBannedTicketsInfo = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pstbannedticketsinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_pstbannedticketsinfo(i), target, stream);
  }

  // required int32 iRAIdRange = 6 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_iraidrange(), target);
  }

  // required int32 iLTCAIdRange = 7 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_iltcaidrange(), target);
  }

  // required int32 iNonce = 8 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 9 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_ttimestamp(), target);
  }

  // required .interfaces.msgError stErrInfo = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::sterrinfo(this), target, stream);
  }

  // optional .interfaces.msgSignature stSign = 11;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgBanTicketsRes_PCA2RA)
  return target;
}

size_t msgBanTicketsRes_PCA2RA::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgBanTicketsRes_PCA2RA)
  size_t total_size = 0;

  if (_internal_has_sterrinfo()) {
    // required .interfaces.msgError stErrInfo = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);
  }

  if (_internal_has_uinoofticketstobebanned()) {
    // required uint32 uiNoOfTicketsToBeBanned = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofticketstobebanned());
  }

  if (_internal_has_uinoofsuccessfullybannedtickets()) {
    // required uint32 uiNoOfSuccessfullyBannedTickets = 4 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofsuccessfullybannedtickets());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_iraidrange()) {
    // required int32 iRAIdRange = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iraidrange());
  }

  if (_internal_has_iltcaidrange()) {
    // required int32 iLTCAIdRange = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iltcaidrange());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 9 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgBanTicketsRes_PCA2RA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgBanTicketsRes_PCA2RA)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000003fa) ^ 0x000003fa) == 0) {  // All required fields are present.
    // required .interfaces.msgError stErrInfo = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);

    // required uint32 uiNoOfTicketsToBeBanned = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofticketstobebanned());

    // required uint32 uiNoOfSuccessfullyBannedTickets = 4 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofsuccessfullybannedtickets());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iRAIdRange = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iraidrange());

    // required int32 iLTCAIdRange = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iltcaidrange());

    // required int32 iNonce = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int64 tTimeStamp = 9 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .interfaces.msgBanTicketsRes_PCA2RA.msgBannedTickets pstBannedTicketsInfo = 5;
  total_size += 1UL * this->_internal_pstbannedticketsinfo_size();
  for (const auto& msg : this->pstbannedticketsinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsigner_);
  }

  // optional .interfaces.msgSignature stSign = 11;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsign_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgBanTicketsRes_PCA2RA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgBanTicketsRes_PCA2RA)
  GOOGLE_DCHECK_NE(&from, this);
  const msgBanTicketsRes_PCA2RA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgBanTicketsRes_PCA2RA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgBanTicketsRes_PCA2RA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgBanTicketsRes_PCA2RA)
    MergeFrom(*source);
  }
}

void msgBanTicketsRes_PCA2RA::MergeFrom(const msgBanTicketsRes_PCA2RA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgBanTicketsRes_PCA2RA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pstbannedticketsinfo_.MergeFrom(from.pstbannedticketsinfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sterrinfo()->::interfaces::msgError::MergeFrom(from._internal_sterrinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000008u) {
      uinoofticketstobebanned_ = from.uinoofticketstobebanned_;
    }
    if (cached_has_bits & 0x00000010u) {
      uinoofsuccessfullybannedtickets_ = from.uinoofsuccessfullybannedtickets_;
    }
    if (cached_has_bits & 0x00000020u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000040u) {
      iraidrange_ = from.iraidrange_;
    }
    if (cached_has_bits & 0x00000080u) {
      iltcaidrange_ = from.iltcaidrange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      inonce_ = from.inonce_;
    }
    if (cached_has_bits & 0x00000200u) {
      ttimestamp_ = from.ttimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgBanTicketsRes_PCA2RA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgBanTicketsRes_PCA2RA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgBanTicketsRes_PCA2RA::CopyFrom(const msgBanTicketsRes_PCA2RA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgBanTicketsRes_PCA2RA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgBanTicketsRes_PCA2RA::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pstbannedticketsinfo_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  if (_internal_has_sterrinfo()) {
    if (!sterrinfo_->IsInitialized()) return false;
  }
  return true;
}

void msgBanTicketsRes_PCA2RA::InternalSwap(msgBanTicketsRes_PCA2RA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pstbannedticketsinfo_.InternalSwap(&other->pstbannedticketsinfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgBanTicketsRes_PCA2RA, uinoofsuccessfullybannedtickets_)
      + sizeof(msgBanTicketsRes_PCA2RA::uinoofsuccessfullybannedtickets_)
      - PROTOBUF_FIELD_OFFSET(msgBanTicketsRes_PCA2RA, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(ireqtype_, other->ireqtype_);
  swap(iraidrange_, other->iraidrange_);
  swap(iltcaidrange_, other->iltcaidrange_);
  swap(inonce_, other->inonce_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgBanTicketsRes_PCA2RA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgBanTicketsRes_RA2Police_msgBannedTickets::InitAsDefaultInstance() {
  ::interfaces::_msgBanTicketsRes_RA2Police_msgBannedTickets_default_instance_._instance.get_mutable()->sterrinfo_ = const_cast< ::interfaces::msgError*>(
      ::interfaces::msgError::internal_default_instance());
}
class msgBanTicketsRes_RA2Police_msgBannedTickets::_Internal {
 public:
  using HasBits = decltype(std::declval<msgBanTicketsRes_RA2Police_msgBannedTickets>()._has_bits_);
  static void set_has_strticketserialno(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_iticketlen(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_strticket(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::interfaces::msgError& sterrinfo(const msgBanTicketsRes_RA2Police_msgBannedTickets* msg);
  static void set_has_sterrinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::interfaces::msgError&
msgBanTicketsRes_RA2Police_msgBannedTickets::_Internal::sterrinfo(const msgBanTicketsRes_RA2Police_msgBannedTickets* msg) {
  return *msg->sterrinfo_;
}
msgBanTicketsRes_RA2Police_msgBannedTickets::msgBanTicketsRes_RA2Police_msgBannedTickets(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgBanTicketsRes_RA2Police.msgBannedTickets)
}
msgBanTicketsRes_RA2Police_msgBannedTickets::msgBanTicketsRes_RA2Police_msgBannedTickets(const msgBanTicketsRes_RA2Police_msgBannedTickets& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strticketserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strticketserialno()) {
    strticketserialno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strticketserialno(),
      GetArena());
  }
  strticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strticket()) {
    strticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strticket(),
      GetArena());
  }
  if (from._internal_has_sterrinfo()) {
    sterrinfo_ = new ::interfaces::msgError(*from.sterrinfo_);
  } else {
    sterrinfo_ = nullptr;
  }
  iticketlen_ = from.iticketlen_;
  // @@protoc_insertion_point(copy_constructor:interfaces.msgBanTicketsRes_RA2Police.msgBannedTickets)
}

void msgBanTicketsRes_RA2Police_msgBannedTickets::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgBanTicketsRes_RA2Police_msgBannedTickets_Interfaces_2eproto.base);
  strticketserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sterrinfo_ = nullptr;
  iticketlen_ = -1;
}

msgBanTicketsRes_RA2Police_msgBannedTickets::~msgBanTicketsRes_RA2Police_msgBannedTickets() {
  // @@protoc_insertion_point(destructor:interfaces.msgBanTicketsRes_RA2Police.msgBannedTickets)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgBanTicketsRes_RA2Police_msgBannedTickets::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strticketserialno_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sterrinfo_;
}

void msgBanTicketsRes_RA2Police_msgBannedTickets::ArenaDtor(void* object) {
  msgBanTicketsRes_RA2Police_msgBannedTickets* _this = reinterpret_cast< msgBanTicketsRes_RA2Police_msgBannedTickets* >(object);
  (void)_this;
}
void msgBanTicketsRes_RA2Police_msgBannedTickets::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgBanTicketsRes_RA2Police_msgBannedTickets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgBanTicketsRes_RA2Police_msgBannedTickets& msgBanTicketsRes_RA2Police_msgBannedTickets::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgBanTicketsRes_RA2Police_msgBannedTickets_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgBanTicketsRes_RA2Police_msgBannedTickets::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgBanTicketsRes_RA2Police.msgBannedTickets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      strticketserialno_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      strticket_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(sterrinfo_ != nullptr);
      sterrinfo_->Clear();
    }
    iticketlen_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgBanTicketsRes_RA2Police_msgBannedTickets::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string strTicketSerialNo = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_strticketserialno();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgBanTicketsRes_RA2Police.msgBannedTickets.strTicketSerialNo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iTicketLen = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_iticketlen(&has_bits);
          iticketlen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strTicket = 3 [default = ""];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_strticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgBanTicketsRes_RA2Police.msgBannedTickets.strTicket");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgError stErrInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sterrinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgBanTicketsRes_RA2Police_msgBannedTickets::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgBanTicketsRes_RA2Police.msgBannedTickets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string strTicketSerialNo = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strticketserialno().data(), static_cast<int>(this->_internal_strticketserialno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgBanTicketsRes_RA2Police.msgBannedTickets.strTicketSerialNo");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_strticketserialno(), target);
  }

  // required int32 iTicketLen = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_iticketlen(), target);
  }

  // required string strTicket = 3 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strticket().data(), static_cast<int>(this->_internal_strticket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgBanTicketsRes_RA2Police.msgBannedTickets.strTicket");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_strticket(), target);
  }

  // required .interfaces.msgError stErrInfo = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::sterrinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgBanTicketsRes_RA2Police.msgBannedTickets)
  return target;
}

size_t msgBanTicketsRes_RA2Police_msgBannedTickets::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgBanTicketsRes_RA2Police.msgBannedTickets)
  size_t total_size = 0;

  if (_internal_has_strticketserialno()) {
    // required string strTicketSerialNo = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticketserialno());
  }

  if (_internal_has_strticket()) {
    // required string strTicket = 3 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticket());
  }

  if (_internal_has_sterrinfo()) {
    // required .interfaces.msgError stErrInfo = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);
  }

  if (_internal_has_iticketlen()) {
    // required int32 iTicketLen = 2 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iticketlen());
  }

  return total_size;
}
size_t msgBanTicketsRes_RA2Police_msgBannedTickets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgBanTicketsRes_RA2Police.msgBannedTickets)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string strTicketSerialNo = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticketserialno());

    // required string strTicket = 3 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticket());

    // required .interfaces.msgError stErrInfo = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);

    // required int32 iTicketLen = 2 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iticketlen());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgBanTicketsRes_RA2Police_msgBannedTickets::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgBanTicketsRes_RA2Police.msgBannedTickets)
  GOOGLE_DCHECK_NE(&from, this);
  const msgBanTicketsRes_RA2Police_msgBannedTickets* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgBanTicketsRes_RA2Police_msgBannedTickets>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgBanTicketsRes_RA2Police.msgBannedTickets)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgBanTicketsRes_RA2Police.msgBannedTickets)
    MergeFrom(*source);
  }
}

void msgBanTicketsRes_RA2Police_msgBannedTickets::MergeFrom(const msgBanTicketsRes_RA2Police_msgBannedTickets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgBanTicketsRes_RA2Police.msgBannedTickets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strticketserialno(from._internal_strticketserialno());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_strticket(from._internal_strticket());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_sterrinfo()->::interfaces::msgError::MergeFrom(from._internal_sterrinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      iticketlen_ = from.iticketlen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgBanTicketsRes_RA2Police_msgBannedTickets::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgBanTicketsRes_RA2Police.msgBannedTickets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgBanTicketsRes_RA2Police_msgBannedTickets::CopyFrom(const msgBanTicketsRes_RA2Police_msgBannedTickets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgBanTicketsRes_RA2Police.msgBannedTickets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgBanTicketsRes_RA2Police_msgBannedTickets::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_sterrinfo()) {
    if (!sterrinfo_->IsInitialized()) return false;
  }
  return true;
}

void msgBanTicketsRes_RA2Police_msgBannedTickets::InternalSwap(msgBanTicketsRes_RA2Police_msgBannedTickets* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strticketserialno_.Swap(&other->strticketserialno_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strticket_.Swap(&other->strticket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(sterrinfo_, other->sterrinfo_);
  swap(iticketlen_, other->iticketlen_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgBanTicketsRes_RA2Police_msgBannedTickets::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgBanTicketsRes_RA2Police::InitAsDefaultInstance() {
  ::interfaces::_msgBanTicketsRes_RA2Police_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgBanTicketsRes_RA2Police_default_instance_._instance.get_mutable()->sterrinfo_ = const_cast< ::interfaces::msgError*>(
      ::interfaces::msgError::internal_default_instance());
  ::interfaces::_msgBanTicketsRes_RA2Police_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgBanTicketsRes_RA2Police::_Internal {
 public:
  using HasBits = decltype(std::declval<msgBanTicketsRes_RA2Police>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgBanTicketsRes_RA2Police* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uinoofticketstobebanned(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_uinoofsuccessfullybannedtickets(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_iraidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_iltcaidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ipcaidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ipoliceid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::interfaces::msgError& sterrinfo(const msgBanTicketsRes_RA2Police* msg);
  static void set_has_sterrinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::interfaces::msgSignature& stsign(const msgBanTicketsRes_RA2Police* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000ffa) ^ 0x00000ffa) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgBanTicketsRes_RA2Police::_Internal::stsigner(const msgBanTicketsRes_RA2Police* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgError&
msgBanTicketsRes_RA2Police::_Internal::sterrinfo(const msgBanTicketsRes_RA2Police* msg) {
  return *msg->sterrinfo_;
}
const ::interfaces::msgSignature&
msgBanTicketsRes_RA2Police::_Internal::stsign(const msgBanTicketsRes_RA2Police* msg) {
  return *msg->stsign_;
}
msgBanTicketsRes_RA2Police::msgBanTicketsRes_RA2Police(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pstbannedticketsinfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgBanTicketsRes_RA2Police)
}
msgBanTicketsRes_RA2Police::msgBanTicketsRes_RA2Police(const msgBanTicketsRes_RA2Police& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pstbannedticketsinfo_(from.pstbannedticketsinfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_sterrinfo()) {
    sterrinfo_ = new ::interfaces::msgError(*from.sterrinfo_);
  } else {
    sterrinfo_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&uinoofticketstobebanned_, &from.uinoofticketstobebanned_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&uinoofticketstobebanned_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgBanTicketsRes_RA2Police)
}

void msgBanTicketsRes_RA2Police::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgBanTicketsRes_RA2Police_Interfaces_2eproto.base);
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uinoofsuccessfullybannedtickets_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(uinoofsuccessfullybannedtickets_));
  ireqtype_ = -1;
  iraidrange_ = -1;
  iltcaidrange_ = -1;
  ipcaidrange_ = -1;
  ipoliceid_ = -1;
  inonce_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgBanTicketsRes_RA2Police::~msgBanTicketsRes_RA2Police() {
  // @@protoc_insertion_point(destructor:interfaces.msgBanTicketsRes_RA2Police)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgBanTicketsRes_RA2Police::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete sterrinfo_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgBanTicketsRes_RA2Police::ArenaDtor(void* object) {
  msgBanTicketsRes_RA2Police* _this = reinterpret_cast< msgBanTicketsRes_RA2Police* >(object);
  (void)_this;
}
void msgBanTicketsRes_RA2Police::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgBanTicketsRes_RA2Police::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgBanTicketsRes_RA2Police& msgBanTicketsRes_RA2Police::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgBanTicketsRes_RA2Police_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgBanTicketsRes_RA2Police::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgBanTicketsRes_RA2Police)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pstbannedticketsinfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sterrinfo_ != nullptr);
      sterrinfo_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&uinoofticketstobebanned_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uinoofsuccessfullybannedtickets_) -
        reinterpret_cast<char*>(&uinoofticketstobebanned_)) + sizeof(uinoofsuccessfullybannedtickets_));
    ireqtype_ = -1;
    iraidrange_ = -1;
    iltcaidrange_ = -1;
  }
  if (cached_has_bits & 0x00000f00u) {
    ipcaidrange_ = -1;
    ipoliceid_ = -1;
    inonce_ = -1;
    ttimestamp_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgBanTicketsRes_RA2Police::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiNoOfTicketsToBeBanned = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uinoofticketstobebanned(&has_bits);
          uinoofticketstobebanned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiNoOfSuccessfullyBannedTickets = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_uinoofsuccessfullybannedtickets(&has_bits);
          uinoofsuccessfullybannedtickets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .interfaces.msgBanTicketsRes_RA2Police.msgBannedTickets pstBannedTicketsInfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pstbannedticketsinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 iRAIdRange = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_iraidrange(&has_bits);
          iraidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iLTCAIdRange = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_iltcaidrange(&has_bits);
          iltcaidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iPCAIdRange = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_ipcaidrange(&has_bits);
          ipcaidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iPoliceId = 9 [default = -1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_ipoliceid(&has_bits);
          ipoliceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 10 [default = -1];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 11 [default = -1];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgError stErrInfo = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_sterrinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgBanTicketsRes_RA2Police::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgBanTicketsRes_RA2Police)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required uint32 uiNoOfTicketsToBeBanned = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uinoofticketstobebanned(), target);
  }

  // required uint32 uiNoOfSuccessfullyBannedTickets = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_uinoofsuccessfullybannedtickets(), target);
  }

  // repeated .interfaces.msgBanTicketsRes_RA2Police.msgBannedTickets pstBannedTicketsInfo = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pstbannedticketsinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_pstbannedticketsinfo(i), target, stream);
  }

  // required int32 iRAIdRange = 6 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_iraidrange(), target);
  }

  // required int32 iLTCAIdRange = 7 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_iltcaidrange(), target);
  }

  // required int32 iPCAIdRange = 8 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_ipcaidrange(), target);
  }

  // required int32 iPoliceId = 9 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_ipoliceid(), target);
  }

  // required int32 iNonce = 10 [default = -1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 11 [default = -1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_ttimestamp(), target);
  }

  // required .interfaces.msgError stErrInfo = 12;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::sterrinfo(this), target, stream);
  }

  // optional .interfaces.msgSignature stSign = 13;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgBanTicketsRes_RA2Police)
  return target;
}

size_t msgBanTicketsRes_RA2Police::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgBanTicketsRes_RA2Police)
  size_t total_size = 0;

  if (_internal_has_sterrinfo()) {
    // required .interfaces.msgError stErrInfo = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);
  }

  if (_internal_has_uinoofticketstobebanned()) {
    // required uint32 uiNoOfTicketsToBeBanned = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofticketstobebanned());
  }

  if (_internal_has_uinoofsuccessfullybannedtickets()) {
    // required uint32 uiNoOfSuccessfullyBannedTickets = 4 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofsuccessfullybannedtickets());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_iraidrange()) {
    // required int32 iRAIdRange = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iraidrange());
  }

  if (_internal_has_iltcaidrange()) {
    // required int32 iLTCAIdRange = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iltcaidrange());
  }

  if (_internal_has_ipcaidrange()) {
    // required int32 iPCAIdRange = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipcaidrange());
  }

  if (_internal_has_ipoliceid()) {
    // required int32 iPoliceId = 9 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipoliceid());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 10 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 11 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgBanTicketsRes_RA2Police::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgBanTicketsRes_RA2Police)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000ffa) ^ 0x00000ffa) == 0) {  // All required fields are present.
    // required .interfaces.msgError stErrInfo = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);

    // required uint32 uiNoOfTicketsToBeBanned = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofticketstobebanned());

    // required uint32 uiNoOfSuccessfullyBannedTickets = 4 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofsuccessfullybannedtickets());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iRAIdRange = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iraidrange());

    // required int32 iLTCAIdRange = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iltcaidrange());

    // required int32 iPCAIdRange = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipcaidrange());

    // required int32 iPoliceId = 9 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipoliceid());

    // required int32 iNonce = 10 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int64 tTimeStamp = 11 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .interfaces.msgBanTicketsRes_RA2Police.msgBannedTickets pstBannedTicketsInfo = 5;
  total_size += 1UL * this->_internal_pstbannedticketsinfo_size();
  for (const auto& msg : this->pstbannedticketsinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsigner_);
  }

  // optional .interfaces.msgSignature stSign = 13;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsign_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgBanTicketsRes_RA2Police::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgBanTicketsRes_RA2Police)
  GOOGLE_DCHECK_NE(&from, this);
  const msgBanTicketsRes_RA2Police* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgBanTicketsRes_RA2Police>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgBanTicketsRes_RA2Police)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgBanTicketsRes_RA2Police)
    MergeFrom(*source);
  }
}

void msgBanTicketsRes_RA2Police::MergeFrom(const msgBanTicketsRes_RA2Police& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgBanTicketsRes_RA2Police)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pstbannedticketsinfo_.MergeFrom(from.pstbannedticketsinfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sterrinfo()->::interfaces::msgError::MergeFrom(from._internal_sterrinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000008u) {
      uinoofticketstobebanned_ = from.uinoofticketstobebanned_;
    }
    if (cached_has_bits & 0x00000010u) {
      uinoofsuccessfullybannedtickets_ = from.uinoofsuccessfullybannedtickets_;
    }
    if (cached_has_bits & 0x00000020u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000040u) {
      iraidrange_ = from.iraidrange_;
    }
    if (cached_has_bits & 0x00000080u) {
      iltcaidrange_ = from.iltcaidrange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      ipcaidrange_ = from.ipcaidrange_;
    }
    if (cached_has_bits & 0x00000200u) {
      ipoliceid_ = from.ipoliceid_;
    }
    if (cached_has_bits & 0x00000400u) {
      inonce_ = from.inonce_;
    }
    if (cached_has_bits & 0x00000800u) {
      ttimestamp_ = from.ttimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgBanTicketsRes_RA2Police::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgBanTicketsRes_RA2Police)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgBanTicketsRes_RA2Police::CopyFrom(const msgBanTicketsRes_RA2Police& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgBanTicketsRes_RA2Police)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgBanTicketsRes_RA2Police::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pstbannedticketsinfo_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  if (_internal_has_sterrinfo()) {
    if (!sterrinfo_->IsInitialized()) return false;
  }
  return true;
}

void msgBanTicketsRes_RA2Police::InternalSwap(msgBanTicketsRes_RA2Police* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pstbannedticketsinfo_.InternalSwap(&other->pstbannedticketsinfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgBanTicketsRes_RA2Police, uinoofsuccessfullybannedtickets_)
      + sizeof(msgBanTicketsRes_RA2Police::uinoofsuccessfullybannedtickets_)
      - PROTOBUF_FIELD_OFFSET(msgBanTicketsRes_RA2Police, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(ireqtype_, other->ireqtype_);
  swap(iraidrange_, other->iraidrange_);
  swap(iltcaidrange_, other->iltcaidrange_);
  swap(ipcaidrange_, other->ipcaidrange_);
  swap(ipoliceid_, other->ipoliceid_);
  swap(inonce_, other->inonce_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgBanTicketsRes_RA2Police::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgBanTicketsAck_Police2RA::InitAsDefaultInstance() {
  ::interfaces::_msgBanTicketsAck_Police2RA_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgBanTicketsAck_Police2RA_default_instance_._instance.get_mutable()->sterrinfo_ = const_cast< ::interfaces::msgError*>(
      ::interfaces::msgError::internal_default_instance());
  ::interfaces::_msgBanTicketsAck_Police2RA_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgBanTicketsAck_Police2RA::_Internal {
 public:
  using HasBits = decltype(std::declval<msgBanTicketsAck_Police2RA>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgBanTicketsAck_Police2RA* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uinoofticketstobebanned(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ipoliceid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_iraidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::interfaces::msgError& sterrinfo(const msgBanTicketsAck_Police2RA* msg);
  static void set_has_sterrinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::interfaces::msgSignature& stsign(const msgBanTicketsAck_Police2RA* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001fa) ^ 0x000001fa) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgBanTicketsAck_Police2RA::_Internal::stsigner(const msgBanTicketsAck_Police2RA* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgError&
msgBanTicketsAck_Police2RA::_Internal::sterrinfo(const msgBanTicketsAck_Police2RA* msg) {
  return *msg->sterrinfo_;
}
const ::interfaces::msgSignature&
msgBanTicketsAck_Police2RA::_Internal::stsign(const msgBanTicketsAck_Police2RA* msg) {
  return *msg->stsign_;
}
msgBanTicketsAck_Police2RA::msgBanTicketsAck_Police2RA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pstticketerrinfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgBanTicketsAck_Police2RA)
}
msgBanTicketsAck_Police2RA::msgBanTicketsAck_Police2RA(const msgBanTicketsAck_Police2RA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pstticketerrinfo_(from.pstticketerrinfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_sterrinfo()) {
    sterrinfo_ = new ::interfaces::msgError(*from.sterrinfo_);
  } else {
    sterrinfo_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&uinoofticketstobebanned_, &from.uinoofticketstobebanned_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&uinoofticketstobebanned_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgBanTicketsAck_Police2RA)
}

void msgBanTicketsAck_Police2RA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgBanTicketsAck_Police2RA_Interfaces_2eproto.base);
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uinoofticketstobebanned_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(uinoofticketstobebanned_));
  ireqtype_ = -1;
  ipoliceid_ = -1;
  iraidrange_ = -1;
  inonce_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgBanTicketsAck_Police2RA::~msgBanTicketsAck_Police2RA() {
  // @@protoc_insertion_point(destructor:interfaces.msgBanTicketsAck_Police2RA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgBanTicketsAck_Police2RA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete sterrinfo_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgBanTicketsAck_Police2RA::ArenaDtor(void* object) {
  msgBanTicketsAck_Police2RA* _this = reinterpret_cast< msgBanTicketsAck_Police2RA* >(object);
  (void)_this;
}
void msgBanTicketsAck_Police2RA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgBanTicketsAck_Police2RA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgBanTicketsAck_Police2RA& msgBanTicketsAck_Police2RA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgBanTicketsAck_Police2RA_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgBanTicketsAck_Police2RA::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgBanTicketsAck_Police2RA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pstticketerrinfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sterrinfo_ != nullptr);
      sterrinfo_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    uinoofticketstobebanned_ = 0u;
    ireqtype_ = -1;
    ipoliceid_ = -1;
    iraidrange_ = -1;
    inonce_ = -1;
  }
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgBanTicketsAck_Police2RA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiNoOfTicketsToBeBanned = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uinoofticketstobebanned(&has_bits);
          uinoofticketstobebanned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iPoliceId = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ipoliceid(&has_bits);
          ipoliceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iRAIdRange = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_iraidrange(&has_bits);
          iraidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .interfaces.msgError pstTicketErrInfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pstticketerrinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgError stErrInfo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_sterrinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgBanTicketsAck_Police2RA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgBanTicketsAck_Police2RA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required uint32 uiNoOfTicketsToBeBanned = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uinoofticketstobebanned(), target);
  }

  // required int32 iPoliceId = 4 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ipoliceid(), target);
  }

  // required int32 iRAIdRange = 5 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_iraidrange(), target);
  }

  // repeated .interfaces.msgError pstTicketErrInfo = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pstticketerrinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_pstticketerrinfo(i), target, stream);
  }

  // required int32 iNonce = 7 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 8 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_ttimestamp(), target);
  }

  // required .interfaces.msgError stErrInfo = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::sterrinfo(this), target, stream);
  }

  // optional .interfaces.msgSignature stSign = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgBanTicketsAck_Police2RA)
  return target;
}

size_t msgBanTicketsAck_Police2RA::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgBanTicketsAck_Police2RA)
  size_t total_size = 0;

  if (_internal_has_sterrinfo()) {
    // required .interfaces.msgError stErrInfo = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);
  }

  if (_internal_has_uinoofticketstobebanned()) {
    // required uint32 uiNoOfTicketsToBeBanned = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofticketstobebanned());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_ipoliceid()) {
    // required int32 iPoliceId = 4 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipoliceid());
  }

  if (_internal_has_iraidrange()) {
    // required int32 iRAIdRange = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iraidrange());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgBanTicketsAck_Police2RA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgBanTicketsAck_Police2RA)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000001fa) ^ 0x000001fa) == 0) {  // All required fields are present.
    // required .interfaces.msgError stErrInfo = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);

    // required uint32 uiNoOfTicketsToBeBanned = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uinoofticketstobebanned());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iPoliceId = 4 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipoliceid());

    // required int32 iRAIdRange = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iraidrange());

    // required int32 iNonce = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int64 tTimeStamp = 8 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .interfaces.msgError pstTicketErrInfo = 6;
  total_size += 1UL * this->_internal_pstticketerrinfo_size();
  for (const auto& msg : this->pstticketerrinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsigner_);
  }

  // optional .interfaces.msgSignature stSign = 10;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsign_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgBanTicketsAck_Police2RA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgBanTicketsAck_Police2RA)
  GOOGLE_DCHECK_NE(&from, this);
  const msgBanTicketsAck_Police2RA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgBanTicketsAck_Police2RA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgBanTicketsAck_Police2RA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgBanTicketsAck_Police2RA)
    MergeFrom(*source);
  }
}

void msgBanTicketsAck_Police2RA::MergeFrom(const msgBanTicketsAck_Police2RA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgBanTicketsAck_Police2RA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pstticketerrinfo_.MergeFrom(from.pstticketerrinfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sterrinfo()->::interfaces::msgError::MergeFrom(from._internal_sterrinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000008u) {
      uinoofticketstobebanned_ = from.uinoofticketstobebanned_;
    }
    if (cached_has_bits & 0x00000010u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000020u) {
      ipoliceid_ = from.ipoliceid_;
    }
    if (cached_has_bits & 0x00000040u) {
      iraidrange_ = from.iraidrange_;
    }
    if (cached_has_bits & 0x00000080u) {
      inonce_ = from.inonce_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_ttimestamp(from._internal_ttimestamp());
  }
}

void msgBanTicketsAck_Police2RA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgBanTicketsAck_Police2RA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgBanTicketsAck_Police2RA::CopyFrom(const msgBanTicketsAck_Police2RA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgBanTicketsAck_Police2RA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgBanTicketsAck_Police2RA::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pstticketerrinfo_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  if (_internal_has_sterrinfo()) {
    if (!sterrinfo_->IsInitialized()) return false;
  }
  return true;
}

void msgBanTicketsAck_Police2RA::InternalSwap(msgBanTicketsAck_Police2RA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pstticketerrinfo_.InternalSwap(&other->pstticketerrinfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgBanTicketsAck_Police2RA, uinoofticketstobebanned_)
      + sizeof(msgBanTicketsAck_Police2RA::uinoofticketstobebanned_)
      - PROTOBUF_FIELD_OFFSET(msgBanTicketsAck_Police2RA, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(ireqtype_, other->ireqtype_);
  swap(ipoliceid_, other->ipoliceid_);
  swap(iraidrange_, other->iraidrange_);
  swap(inonce_, other->inonce_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgBanTicketsAck_Police2RA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgVehicleConfig::InitAsDefaultInstance() {
}
class msgVehicleConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<msgVehicleConfig>()._has_bits_);
  static void set_has_strltcaserverurl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_strpcaserverurl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_strraserverurl(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_strltcamethodname(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_strpcamethodname(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_strramethodname(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lmaxxmlrpclimitbuffersize(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_fversion(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000ff) ^ 0x000000ff) != 0;
  }
};

msgVehicleConfig::msgVehicleConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgVehicleConfig)
}
msgVehicleConfig::msgVehicleConfig(const msgVehicleConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strltcaserverurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strltcaserverurl()) {
    strltcaserverurl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strltcaserverurl(),
      GetArena());
  }
  strpcaserverurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strpcaserverurl()) {
    strpcaserverurl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strpcaserverurl(),
      GetArena());
  }
  strraserverurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strraserverurl()) {
    strraserverurl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strraserverurl(),
      GetArena());
  }
  strltcamethodname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strltcamethodname()) {
    strltcamethodname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strltcamethodname(),
      GetArena());
  }
  strpcamethodname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strpcamethodname()) {
    strpcamethodname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strpcamethodname(),
      GetArena());
  }
  strramethodname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strramethodname()) {
    strramethodname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strramethodname(),
      GetArena());
  }
  ::memcpy(&lmaxxmlrpclimitbuffersize_, &from.lmaxxmlrpclimitbuffersize_,
    static_cast<size_t>(reinterpret_cast<char*>(&fversion_) -
    reinterpret_cast<char*>(&lmaxxmlrpclimitbuffersize_)) + sizeof(fversion_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgVehicleConfig)
}

void msgVehicleConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgVehicleConfig_Interfaces_2eproto.base);
  strltcaserverurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strpcaserverurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strraserverurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strltcamethodname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strpcamethodname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strramethodname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lmaxxmlrpclimitbuffersize_ = PROTOBUF_ULONGLONG(0);
  fversion_ = -1;
}

msgVehicleConfig::~msgVehicleConfig() {
  // @@protoc_insertion_point(destructor:interfaces.msgVehicleConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgVehicleConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strltcaserverurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strpcaserverurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strraserverurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strltcamethodname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strpcamethodname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strramethodname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msgVehicleConfig::ArenaDtor(void* object) {
  msgVehicleConfig* _this = reinterpret_cast< msgVehicleConfig* >(object);
  (void)_this;
}
void msgVehicleConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgVehicleConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgVehicleConfig& msgVehicleConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgVehicleConfig_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgVehicleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgVehicleConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      strltcaserverurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      strpcaserverurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      strraserverurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      strltcamethodname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      strpcamethodname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      strramethodname_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    lmaxxmlrpclimitbuffersize_ = PROTOBUF_ULONGLONG(0);
    fversion_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgVehicleConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string strLTCAServerURL = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_strltcaserverurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgVehicleConfig.strLTCAServerURL");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strPCAServerURL = 2 [default = ""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_strpcaserverurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgVehicleConfig.strPCAServerURL");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strRAServerURL = 3 [default = ""];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_strraserverurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgVehicleConfig.strRAServerURL");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strLTCAMethodName = 4 [default = ""];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_strltcamethodname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgVehicleConfig.strLTCAMethodName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strPCAMethodName = 5 [default = ""];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_strpcamethodname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgVehicleConfig.strPCAMethodName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strRAMethodName = 6 [default = ""];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_strramethodname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgVehicleConfig.strRAMethodName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 lMaxXMLRPCLimitBufferSize = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_lmaxxmlrpclimitbuffersize(&has_bits);
          lmaxxmlrpclimitbuffersize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float fVersion = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_fversion(&has_bits);
          fversion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgVehicleConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgVehicleConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string strLTCAServerURL = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strltcaserverurl().data(), static_cast<int>(this->_internal_strltcaserverurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgVehicleConfig.strLTCAServerURL");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_strltcaserverurl(), target);
  }

  // required string strPCAServerURL = 2 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strpcaserverurl().data(), static_cast<int>(this->_internal_strpcaserverurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgVehicleConfig.strPCAServerURL");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_strpcaserverurl(), target);
  }

  // required string strRAServerURL = 3 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strraserverurl().data(), static_cast<int>(this->_internal_strraserverurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgVehicleConfig.strRAServerURL");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_strraserverurl(), target);
  }

  // required string strLTCAMethodName = 4 [default = ""];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strltcamethodname().data(), static_cast<int>(this->_internal_strltcamethodname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgVehicleConfig.strLTCAMethodName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_strltcamethodname(), target);
  }

  // required string strPCAMethodName = 5 [default = ""];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strpcamethodname().data(), static_cast<int>(this->_internal_strpcamethodname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgVehicleConfig.strPCAMethodName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_strpcamethodname(), target);
  }

  // required string strRAMethodName = 6 [default = ""];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strramethodname().data(), static_cast<int>(this->_internal_strramethodname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgVehicleConfig.strRAMethodName");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_strramethodname(), target);
  }

  // required uint64 lMaxXMLRPCLimitBufferSize = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_lmaxxmlrpclimitbuffersize(), target);
  }

  // required float fVersion = 8 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_fversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgVehicleConfig)
  return target;
}

size_t msgVehicleConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgVehicleConfig)
  size_t total_size = 0;

  if (_internal_has_strltcaserverurl()) {
    // required string strLTCAServerURL = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strltcaserverurl());
  }

  if (_internal_has_strpcaserverurl()) {
    // required string strPCAServerURL = 2 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpcaserverurl());
  }

  if (_internal_has_strraserverurl()) {
    // required string strRAServerURL = 3 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strraserverurl());
  }

  if (_internal_has_strltcamethodname()) {
    // required string strLTCAMethodName = 4 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strltcamethodname());
  }

  if (_internal_has_strpcamethodname()) {
    // required string strPCAMethodName = 5 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpcamethodname());
  }

  if (_internal_has_strramethodname()) {
    // required string strRAMethodName = 6 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strramethodname());
  }

  if (_internal_has_lmaxxmlrpclimitbuffersize()) {
    // required uint64 lMaxXMLRPCLimitBufferSize = 7 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lmaxxmlrpclimitbuffersize());
  }

  if (_internal_has_fversion()) {
    // required float fVersion = 8 [default = -1];
    total_size += 1 + 4;
  }

  return total_size;
}
size_t msgVehicleConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgVehicleConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required string strLTCAServerURL = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strltcaserverurl());

    // required string strPCAServerURL = 2 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpcaserverurl());

    // required string strRAServerURL = 3 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strraserverurl());

    // required string strLTCAMethodName = 4 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strltcamethodname());

    // required string strPCAMethodName = 5 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpcamethodname());

    // required string strRAMethodName = 6 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strramethodname());

    // required uint64 lMaxXMLRPCLimitBufferSize = 7 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lmaxxmlrpclimitbuffersize());

    // required float fVersion = 8 [default = -1];
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgVehicleConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgVehicleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const msgVehicleConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgVehicleConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgVehicleConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgVehicleConfig)
    MergeFrom(*source);
  }
}

void msgVehicleConfig::MergeFrom(const msgVehicleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgVehicleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strltcaserverurl(from._internal_strltcaserverurl());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_strpcaserverurl(from._internal_strpcaserverurl());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_strraserverurl(from._internal_strraserverurl());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_strltcamethodname(from._internal_strltcamethodname());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_strpcamethodname(from._internal_strpcamethodname());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_strramethodname(from._internal_strramethodname());
    }
    if (cached_has_bits & 0x00000040u) {
      lmaxxmlrpclimitbuffersize_ = from.lmaxxmlrpclimitbuffersize_;
    }
    if (cached_has_bits & 0x00000080u) {
      fversion_ = from.fversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgVehicleConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgVehicleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgVehicleConfig::CopyFrom(const msgVehicleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgVehicleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgVehicleConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void msgVehicleConfig::InternalSwap(msgVehicleConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strltcaserverurl_.Swap(&other->strltcaserverurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strpcaserverurl_.Swap(&other->strpcaserverurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strraserverurl_.Swap(&other->strraserverurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strltcamethodname_.Swap(&other->strltcamethodname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strpcamethodname_.Swap(&other->strpcamethodname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strramethodname_.Swap(&other->strramethodname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(lmaxxmlrpclimitbuffersize_, other->lmaxxmlrpclimitbuffersize_);
  swap(fversion_, other->fversion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgVehicleConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgPoliceConfig::InitAsDefaultInstance() {
}
class msgPoliceConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<msgPoliceConfig>()._has_bits_);
  static void set_has_strltcaserverurl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_strpcaserverurl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_strraserverurl(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_strltcamethodname(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_strpcamethodname(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_strramethodname(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lmaxxmlrpclimitbuffersize(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_fversion(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000ff) ^ 0x000000ff) != 0;
  }
};

msgPoliceConfig::msgPoliceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgPoliceConfig)
}
msgPoliceConfig::msgPoliceConfig(const msgPoliceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strltcaserverurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strltcaserverurl()) {
    strltcaserverurl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strltcaserverurl(),
      GetArena());
  }
  strpcaserverurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strpcaserverurl()) {
    strpcaserverurl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strpcaserverurl(),
      GetArena());
  }
  strraserverurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strraserverurl()) {
    strraserverurl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strraserverurl(),
      GetArena());
  }
  strltcamethodname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strltcamethodname()) {
    strltcamethodname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strltcamethodname(),
      GetArena());
  }
  strpcamethodname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strpcamethodname()) {
    strpcamethodname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strpcamethodname(),
      GetArena());
  }
  strramethodname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strramethodname()) {
    strramethodname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strramethodname(),
      GetArena());
  }
  ::memcpy(&lmaxxmlrpclimitbuffersize_, &from.lmaxxmlrpclimitbuffersize_,
    static_cast<size_t>(reinterpret_cast<char*>(&fversion_) -
    reinterpret_cast<char*>(&lmaxxmlrpclimitbuffersize_)) + sizeof(fversion_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgPoliceConfig)
}

void msgPoliceConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgPoliceConfig_Interfaces_2eproto.base);
  strltcaserverurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strpcaserverurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strraserverurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strltcamethodname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strpcamethodname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strramethodname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lmaxxmlrpclimitbuffersize_ = PROTOBUF_ULONGLONG(0);
  fversion_ = -1;
}

msgPoliceConfig::~msgPoliceConfig() {
  // @@protoc_insertion_point(destructor:interfaces.msgPoliceConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgPoliceConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strltcaserverurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strpcaserverurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strraserverurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strltcamethodname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strpcamethodname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strramethodname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msgPoliceConfig::ArenaDtor(void* object) {
  msgPoliceConfig* _this = reinterpret_cast< msgPoliceConfig* >(object);
  (void)_this;
}
void msgPoliceConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgPoliceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgPoliceConfig& msgPoliceConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgPoliceConfig_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgPoliceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgPoliceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      strltcaserverurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      strpcaserverurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      strraserverurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      strltcamethodname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      strpcamethodname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      strramethodname_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    lmaxxmlrpclimitbuffersize_ = PROTOBUF_ULONGLONG(0);
    fversion_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgPoliceConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string strLTCAServerURL = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_strltcaserverurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgPoliceConfig.strLTCAServerURL");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strPCAServerURL = 2 [default = ""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_strpcaserverurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgPoliceConfig.strPCAServerURL");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strRAServerURL = 3 [default = ""];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_strraserverurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgPoliceConfig.strRAServerURL");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strLTCAMethodName = 4 [default = ""];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_strltcamethodname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgPoliceConfig.strLTCAMethodName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strPCAMethodName = 5 [default = ""];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_strpcamethodname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgPoliceConfig.strPCAMethodName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strRAMethodName = 6 [default = ""];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_strramethodname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgPoliceConfig.strRAMethodName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 lMaxXMLRPCLimitBufferSize = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_lmaxxmlrpclimitbuffersize(&has_bits);
          lmaxxmlrpclimitbuffersize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float fVersion = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_fversion(&has_bits);
          fversion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgPoliceConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgPoliceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string strLTCAServerURL = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strltcaserverurl().data(), static_cast<int>(this->_internal_strltcaserverurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgPoliceConfig.strLTCAServerURL");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_strltcaserverurl(), target);
  }

  // required string strPCAServerURL = 2 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strpcaserverurl().data(), static_cast<int>(this->_internal_strpcaserverurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgPoliceConfig.strPCAServerURL");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_strpcaserverurl(), target);
  }

  // required string strRAServerURL = 3 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strraserverurl().data(), static_cast<int>(this->_internal_strraserverurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgPoliceConfig.strRAServerURL");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_strraserverurl(), target);
  }

  // required string strLTCAMethodName = 4 [default = ""];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strltcamethodname().data(), static_cast<int>(this->_internal_strltcamethodname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgPoliceConfig.strLTCAMethodName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_strltcamethodname(), target);
  }

  // required string strPCAMethodName = 5 [default = ""];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strpcamethodname().data(), static_cast<int>(this->_internal_strpcamethodname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgPoliceConfig.strPCAMethodName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_strpcamethodname(), target);
  }

  // required string strRAMethodName = 6 [default = ""];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strramethodname().data(), static_cast<int>(this->_internal_strramethodname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgPoliceConfig.strRAMethodName");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_strramethodname(), target);
  }

  // required uint64 lMaxXMLRPCLimitBufferSize = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_lmaxxmlrpclimitbuffersize(), target);
  }

  // required float fVersion = 8 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_fversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgPoliceConfig)
  return target;
}

size_t msgPoliceConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgPoliceConfig)
  size_t total_size = 0;

  if (_internal_has_strltcaserverurl()) {
    // required string strLTCAServerURL = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strltcaserverurl());
  }

  if (_internal_has_strpcaserverurl()) {
    // required string strPCAServerURL = 2 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpcaserverurl());
  }

  if (_internal_has_strraserverurl()) {
    // required string strRAServerURL = 3 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strraserverurl());
  }

  if (_internal_has_strltcamethodname()) {
    // required string strLTCAMethodName = 4 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strltcamethodname());
  }

  if (_internal_has_strpcamethodname()) {
    // required string strPCAMethodName = 5 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpcamethodname());
  }

  if (_internal_has_strramethodname()) {
    // required string strRAMethodName = 6 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strramethodname());
  }

  if (_internal_has_lmaxxmlrpclimitbuffersize()) {
    // required uint64 lMaxXMLRPCLimitBufferSize = 7 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lmaxxmlrpclimitbuffersize());
  }

  if (_internal_has_fversion()) {
    // required float fVersion = 8 [default = -1];
    total_size += 1 + 4;
  }

  return total_size;
}
size_t msgPoliceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgPoliceConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required string strLTCAServerURL = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strltcaserverurl());

    // required string strPCAServerURL = 2 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpcaserverurl());

    // required string strRAServerURL = 3 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strraserverurl());

    // required string strLTCAMethodName = 4 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strltcamethodname());

    // required string strPCAMethodName = 5 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpcamethodname());

    // required string strRAMethodName = 6 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strramethodname());

    // required uint64 lMaxXMLRPCLimitBufferSize = 7 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lmaxxmlrpclimitbuffersize());

    // required float fVersion = 8 [default = -1];
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgPoliceConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgPoliceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const msgPoliceConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgPoliceConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgPoliceConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgPoliceConfig)
    MergeFrom(*source);
  }
}

void msgPoliceConfig::MergeFrom(const msgPoliceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgPoliceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strltcaserverurl(from._internal_strltcaserverurl());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_strpcaserverurl(from._internal_strpcaserverurl());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_strraserverurl(from._internal_strraserverurl());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_strltcamethodname(from._internal_strltcamethodname());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_strpcamethodname(from._internal_strpcamethodname());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_strramethodname(from._internal_strramethodname());
    }
    if (cached_has_bits & 0x00000040u) {
      lmaxxmlrpclimitbuffersize_ = from.lmaxxmlrpclimitbuffersize_;
    }
    if (cached_has_bits & 0x00000080u) {
      fversion_ = from.fversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgPoliceConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgPoliceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgPoliceConfig::CopyFrom(const msgPoliceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgPoliceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgPoliceConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void msgPoliceConfig::InternalSwap(msgPoliceConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strltcaserverurl_.Swap(&other->strltcaserverurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strpcaserverurl_.Swap(&other->strpcaserverurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strraserverurl_.Swap(&other->strraserverurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strltcamethodname_.Swap(&other->strltcamethodname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strpcamethodname_.Swap(&other->strpcamethodname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strramethodname_.Swap(&other->strramethodname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(lmaxxmlrpclimitbuffersize_, other->lmaxxmlrpclimitbuffersize_);
  swap(fversion_, other->fversion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgPoliceConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgVPKILibConfig_msgTicketPolicy::InitAsDefaultInstance() {
}
class msgVPKILibConfig_msgTicketPolicy::_Internal {
 public:
  using HasBits = decltype(std::declval<msgVPKILibConfig_msgTicketPolicy>()._has_bits_);
  static void set_has_bticketreusability(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_uimaxnoofticketstoobtainperhour(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uiminnoofticketstoreq(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uimaxnoofticketstoreq(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uiminnoofticketstorevoke(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_uimaxnoofticketstorevoke(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_uiminnoofticketstoban(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_uimaxnoofticketstoban(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_uibanticketperiod(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001ff) ^ 0x000001ff) != 0;
  }
};

msgVPKILibConfig_msgTicketPolicy::msgVPKILibConfig_msgTicketPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgVPKILibConfig.msgTicketPolicy)
}
msgVPKILibConfig_msgTicketPolicy::msgVPKILibConfig_msgTicketPolicy(const msgVPKILibConfig_msgTicketPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&uimaxnoofticketstoobtainperhour_, &from.uimaxnoofticketstoobtainperhour_,
    static_cast<size_t>(reinterpret_cast<char*>(&bticketreusability_) -
    reinterpret_cast<char*>(&uimaxnoofticketstoobtainperhour_)) + sizeof(bticketreusability_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgVPKILibConfig.msgTicketPolicy)
}

void msgVPKILibConfig_msgTicketPolicy::SharedCtor() {
  ::memset(&uimaxnoofticketstoobtainperhour_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uibanticketperiod_) -
      reinterpret_cast<char*>(&uimaxnoofticketstoobtainperhour_)) + sizeof(uibanticketperiod_));
  bticketreusability_ = true;
}

msgVPKILibConfig_msgTicketPolicy::~msgVPKILibConfig_msgTicketPolicy() {
  // @@protoc_insertion_point(destructor:interfaces.msgVPKILibConfig.msgTicketPolicy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgVPKILibConfig_msgTicketPolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msgVPKILibConfig_msgTicketPolicy::ArenaDtor(void* object) {
  msgVPKILibConfig_msgTicketPolicy* _this = reinterpret_cast< msgVPKILibConfig_msgTicketPolicy* >(object);
  (void)_this;
}
void msgVPKILibConfig_msgTicketPolicy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgVPKILibConfig_msgTicketPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgVPKILibConfig_msgTicketPolicy& msgVPKILibConfig_msgTicketPolicy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgVPKILibConfig_msgTicketPolicy_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgVPKILibConfig_msgTicketPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgVPKILibConfig.msgTicketPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&uimaxnoofticketstoobtainperhour_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uibanticketperiod_) -
        reinterpret_cast<char*>(&uimaxnoofticketstoobtainperhour_)) + sizeof(uibanticketperiod_));
  }
  bticketreusability_ = true;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgVPKILibConfig_msgTicketPolicy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool bTicketReusability = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bticketreusability(&has_bits);
          bticketreusability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiMaxNoOfTicketsToObtainPerHour = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_uimaxnoofticketstoobtainperhour(&has_bits);
          uimaxnoofticketstoobtainperhour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiMinNoOfTicketsToReq = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uiminnoofticketstoreq(&has_bits);
          uiminnoofticketstoreq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiMaxNoOfTicketsToReq = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_uimaxnoofticketstoreq(&has_bits);
          uimaxnoofticketstoreq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiMinNoOfTicketsToRevoke = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_uiminnoofticketstorevoke(&has_bits);
          uiminnoofticketstorevoke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiMaxNoOfTicketsToRevoke = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_uimaxnoofticketstorevoke(&has_bits);
          uimaxnoofticketstorevoke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiMinNoOfTicketsToBan = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_uiminnoofticketstoban(&has_bits);
          uiminnoofticketstoban_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiMaxNoOfTicketsToBan = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_uimaxnoofticketstoban(&has_bits);
          uimaxnoofticketstoban_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiBanTicketPeriod = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_uibanticketperiod(&has_bits);
          uibanticketperiod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgVPKILibConfig_msgTicketPolicy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgVPKILibConfig.msgTicketPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool bTicketReusability = 1 [default = true];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bticketreusability(), target);
  }

  // required uint32 uiMaxNoOfTicketsToObtainPerHour = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uimaxnoofticketstoobtainperhour(), target);
  }

  // required uint32 uiMinNoOfTicketsToReq = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uiminnoofticketstoreq(), target);
  }

  // required uint32 uiMaxNoOfTicketsToReq = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_uimaxnoofticketstoreq(), target);
  }

  // required uint32 uiMinNoOfTicketsToRevoke = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_uiminnoofticketstorevoke(), target);
  }

  // required uint32 uiMaxNoOfTicketsToRevoke = 6 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_uimaxnoofticketstorevoke(), target);
  }

  // required uint32 uiMinNoOfTicketsToBan = 7 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_uiminnoofticketstoban(), target);
  }

  // required uint32 uiMaxNoOfTicketsToBan = 8 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_uimaxnoofticketstoban(), target);
  }

  // required uint32 uiBanTicketPeriod = 9 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_uibanticketperiod(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgVPKILibConfig.msgTicketPolicy)
  return target;
}

size_t msgVPKILibConfig_msgTicketPolicy::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgVPKILibConfig.msgTicketPolicy)
  size_t total_size = 0;

  if (_internal_has_uimaxnoofticketstoobtainperhour()) {
    // required uint32 uiMaxNoOfTicketsToObtainPerHour = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uimaxnoofticketstoobtainperhour());
  }

  if (_internal_has_uiminnoofticketstoreq()) {
    // required uint32 uiMinNoOfTicketsToReq = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uiminnoofticketstoreq());
  }

  if (_internal_has_uimaxnoofticketstoreq()) {
    // required uint32 uiMaxNoOfTicketsToReq = 4 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uimaxnoofticketstoreq());
  }

  if (_internal_has_uiminnoofticketstorevoke()) {
    // required uint32 uiMinNoOfTicketsToRevoke = 5 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uiminnoofticketstorevoke());
  }

  if (_internal_has_uimaxnoofticketstorevoke()) {
    // required uint32 uiMaxNoOfTicketsToRevoke = 6 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uimaxnoofticketstorevoke());
  }

  if (_internal_has_uiminnoofticketstoban()) {
    // required uint32 uiMinNoOfTicketsToBan = 7 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uiminnoofticketstoban());
  }

  if (_internal_has_uimaxnoofticketstoban()) {
    // required uint32 uiMaxNoOfTicketsToBan = 8 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uimaxnoofticketstoban());
  }

  if (_internal_has_uibanticketperiod()) {
    // required uint32 uiBanTicketPeriod = 9 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uibanticketperiod());
  }

  if (_internal_has_bticketreusability()) {
    // required bool bTicketReusability = 1 [default = true];
    total_size += 1 + 1;
  }

  return total_size;
}
size_t msgVPKILibConfig_msgTicketPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgVPKILibConfig.msgTicketPolicy)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required uint32 uiMaxNoOfTicketsToObtainPerHour = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uimaxnoofticketstoobtainperhour());

    // required uint32 uiMinNoOfTicketsToReq = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uiminnoofticketstoreq());

    // required uint32 uiMaxNoOfTicketsToReq = 4 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uimaxnoofticketstoreq());

    // required uint32 uiMinNoOfTicketsToRevoke = 5 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uiminnoofticketstorevoke());

    // required uint32 uiMaxNoOfTicketsToRevoke = 6 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uimaxnoofticketstorevoke());

    // required uint32 uiMinNoOfTicketsToBan = 7 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uiminnoofticketstoban());

    // required uint32 uiMaxNoOfTicketsToBan = 8 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uimaxnoofticketstoban());

    // required uint32 uiBanTicketPeriod = 9 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uibanticketperiod());

    // required bool bTicketReusability = 1 [default = true];
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgVPKILibConfig_msgTicketPolicy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgVPKILibConfig.msgTicketPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const msgVPKILibConfig_msgTicketPolicy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgVPKILibConfig_msgTicketPolicy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgVPKILibConfig.msgTicketPolicy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgVPKILibConfig.msgTicketPolicy)
    MergeFrom(*source);
  }
}

void msgVPKILibConfig_msgTicketPolicy::MergeFrom(const msgVPKILibConfig_msgTicketPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgVPKILibConfig.msgTicketPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      uimaxnoofticketstoobtainperhour_ = from.uimaxnoofticketstoobtainperhour_;
    }
    if (cached_has_bits & 0x00000002u) {
      uiminnoofticketstoreq_ = from.uiminnoofticketstoreq_;
    }
    if (cached_has_bits & 0x00000004u) {
      uimaxnoofticketstoreq_ = from.uimaxnoofticketstoreq_;
    }
    if (cached_has_bits & 0x00000008u) {
      uiminnoofticketstorevoke_ = from.uiminnoofticketstorevoke_;
    }
    if (cached_has_bits & 0x00000010u) {
      uimaxnoofticketstorevoke_ = from.uimaxnoofticketstorevoke_;
    }
    if (cached_has_bits & 0x00000020u) {
      uiminnoofticketstoban_ = from.uiminnoofticketstoban_;
    }
    if (cached_has_bits & 0x00000040u) {
      uimaxnoofticketstoban_ = from.uimaxnoofticketstoban_;
    }
    if (cached_has_bits & 0x00000080u) {
      uibanticketperiod_ = from.uibanticketperiod_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_bticketreusability(from._internal_bticketreusability());
  }
}

void msgVPKILibConfig_msgTicketPolicy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgVPKILibConfig.msgTicketPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgVPKILibConfig_msgTicketPolicy::CopyFrom(const msgVPKILibConfig_msgTicketPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgVPKILibConfig.msgTicketPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgVPKILibConfig_msgTicketPolicy::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void msgVPKILibConfig_msgTicketPolicy::InternalSwap(msgVPKILibConfig_msgTicketPolicy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgVPKILibConfig_msgTicketPolicy, uibanticketperiod_)
      + sizeof(msgVPKILibConfig_msgTicketPolicy::uibanticketperiod_)
      - PROTOBUF_FIELD_OFFSET(msgVPKILibConfig_msgTicketPolicy, uimaxnoofticketstoobtainperhour_)>(
          reinterpret_cast<char*>(&uimaxnoofticketstoobtainperhour_),
          reinterpret_cast<char*>(&other->uimaxnoofticketstoobtainperhour_));
  swap(bticketreusability_, other->bticketreusability_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgVPKILibConfig_msgTicketPolicy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgVPKILibConfig_msgPsnymPolicy::InitAsDefaultInstance() {
}
class msgVPKILibConfig_msgPsnymPolicy::_Internal {
 public:
  using HasBits = decltype(std::declval<msgVPKILibConfig_msgPsnymPolicy>()._has_bits_);
  static void set_has_strresponsiblenodetorevokepsnyms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uimaxnoofpsnymcerttoobtainperhour(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uimaxnoofpsnymcertrequsingaticket(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_uiminnoofpsnymcerttoreq(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_uimaxnoofpsnymcerttoreq(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_uiminnoofpsnymcerttoresolve(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_uimaxnoofpsnymcerttoresolve(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_uiminnoofpsnymcerttorevoke(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_uimaxnoofpsnymcerttorevoke(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_uimaxnumofpsnymcerttoobtainperreq(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_strpsnymoverlappingmechanism(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000007ff) ^ 0x000007ff) != 0;
  }
};

msgVPKILibConfig_msgPsnymPolicy::msgVPKILibConfig_msgPsnymPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgVPKILibConfig.msgPsnymPolicy)
}
msgVPKILibConfig_msgPsnymPolicy::msgVPKILibConfig_msgPsnymPolicy(const msgVPKILibConfig_msgPsnymPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strresponsiblenodetorevokepsnyms_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strresponsiblenodetorevokepsnyms()) {
    strresponsiblenodetorevokepsnyms_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strresponsiblenodetorevokepsnyms(),
      GetArena());
  }
  strpsnymoverlappingmechanism_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strpsnymoverlappingmechanism()) {
    strpsnymoverlappingmechanism_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strpsnymoverlappingmechanism(),
      GetArena());
  }
  ::memcpy(&uimaxnoofpsnymcerttoobtainperhour_, &from.uimaxnoofpsnymcerttoobtainperhour_,
    static_cast<size_t>(reinterpret_cast<char*>(&uimaxnumofpsnymcerttoobtainperreq_) -
    reinterpret_cast<char*>(&uimaxnoofpsnymcerttoobtainperhour_)) + sizeof(uimaxnumofpsnymcerttoobtainperreq_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgVPKILibConfig.msgPsnymPolicy)
}

void msgVPKILibConfig_msgPsnymPolicy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgVPKILibConfig_msgPsnymPolicy_Interfaces_2eproto.base);
  strresponsiblenodetorevokepsnyms_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strpsnymoverlappingmechanism_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uimaxnoofpsnymcerttoobtainperhour_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uimaxnumofpsnymcerttoobtainperreq_) -
      reinterpret_cast<char*>(&uimaxnoofpsnymcerttoobtainperhour_)) + sizeof(uimaxnumofpsnymcerttoobtainperreq_));
}

msgVPKILibConfig_msgPsnymPolicy::~msgVPKILibConfig_msgPsnymPolicy() {
  // @@protoc_insertion_point(destructor:interfaces.msgVPKILibConfig.msgPsnymPolicy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgVPKILibConfig_msgPsnymPolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strresponsiblenodetorevokepsnyms_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strpsnymoverlappingmechanism_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msgVPKILibConfig_msgPsnymPolicy::ArenaDtor(void* object) {
  msgVPKILibConfig_msgPsnymPolicy* _this = reinterpret_cast< msgVPKILibConfig_msgPsnymPolicy* >(object);
  (void)_this;
}
void msgVPKILibConfig_msgPsnymPolicy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgVPKILibConfig_msgPsnymPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgVPKILibConfig_msgPsnymPolicy& msgVPKILibConfig_msgPsnymPolicy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgVPKILibConfig_msgPsnymPolicy_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgVPKILibConfig_msgPsnymPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgVPKILibConfig.msgPsnymPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      strresponsiblenodetorevokepsnyms_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      strpsnymoverlappingmechanism_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&uimaxnoofpsnymcerttoobtainperhour_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uimaxnoofpsnymcerttoresolve_) -
        reinterpret_cast<char*>(&uimaxnoofpsnymcerttoobtainperhour_)) + sizeof(uimaxnoofpsnymcerttoresolve_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&uiminnoofpsnymcerttorevoke_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uimaxnumofpsnymcerttoobtainperreq_) -
        reinterpret_cast<char*>(&uiminnoofpsnymcerttorevoke_)) + sizeof(uimaxnumofpsnymcerttoobtainperreq_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgVPKILibConfig_msgPsnymPolicy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string strResponsibleNodeToRevokePsnyms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_strresponsiblenodetorevokepsnyms();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgVPKILibConfig.msgPsnymPolicy.strResponsibleNodeToRevokePsnyms");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiMaxNoOfPsnymCertToObtainPerHour = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_uimaxnoofpsnymcerttoobtainperhour(&has_bits);
          uimaxnoofpsnymcerttoobtainperhour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiMaxNoOfPsnymCertReqUsingATicket = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uimaxnoofpsnymcertrequsingaticket(&has_bits);
          uimaxnoofpsnymcertrequsingaticket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiMinNoOfPsnymCertToReq = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_uiminnoofpsnymcerttoreq(&has_bits);
          uiminnoofpsnymcerttoreq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiMaxNoOfPsnymCertToReq = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_uimaxnoofpsnymcerttoreq(&has_bits);
          uimaxnoofpsnymcerttoreq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiMinNoOfPsnymCertToResolve = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_uiminnoofpsnymcerttoresolve(&has_bits);
          uiminnoofpsnymcerttoresolve_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiMaxNoOfPsnymCertToResolve = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_uimaxnoofpsnymcerttoresolve(&has_bits);
          uimaxnoofpsnymcerttoresolve_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiMinNoOfPsnymCertToRevoke = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_uiminnoofpsnymcerttorevoke(&has_bits);
          uiminnoofpsnymcerttorevoke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiMaxNoOfPsnymCertToRevoke = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_uimaxnoofpsnymcerttorevoke(&has_bits);
          uimaxnoofpsnymcerttorevoke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiMaxNumOfPsnymCertToObtainPerReq = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_uimaxnumofpsnymcerttoobtainperreq(&has_bits);
          uimaxnumofpsnymcerttoobtainperreq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strPsnymOverlappingMechanism = 11 [default = ""];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_strpsnymoverlappingmechanism();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgVPKILibConfig.msgPsnymPolicy.strPsnymOverlappingMechanism");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgVPKILibConfig_msgPsnymPolicy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgVPKILibConfig.msgPsnymPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string strResponsibleNodeToRevokePsnyms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strresponsiblenodetorevokepsnyms().data(), static_cast<int>(this->_internal_strresponsiblenodetorevokepsnyms().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgVPKILibConfig.msgPsnymPolicy.strResponsibleNodeToRevokePsnyms");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_strresponsiblenodetorevokepsnyms(), target);
  }

  // required uint32 uiMaxNoOfPsnymCertToObtainPerHour = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uimaxnoofpsnymcerttoobtainperhour(), target);
  }

  // required uint32 uiMaxNoOfPsnymCertReqUsingATicket = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uimaxnoofpsnymcertrequsingaticket(), target);
  }

  // required uint32 uiMinNoOfPsnymCertToReq = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_uiminnoofpsnymcerttoreq(), target);
  }

  // required uint32 uiMaxNoOfPsnymCertToReq = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_uimaxnoofpsnymcerttoreq(), target);
  }

  // required uint32 uiMinNoOfPsnymCertToResolve = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_uiminnoofpsnymcerttoresolve(), target);
  }

  // required uint32 uiMaxNoOfPsnymCertToResolve = 7 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_uimaxnoofpsnymcerttoresolve(), target);
  }

  // required uint32 uiMinNoOfPsnymCertToRevoke = 8 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_uiminnoofpsnymcerttorevoke(), target);
  }

  // required uint32 uiMaxNoOfPsnymCertToRevoke = 9 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_uimaxnoofpsnymcerttorevoke(), target);
  }

  // required uint32 uiMaxNumOfPsnymCertToObtainPerReq = 10 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_uimaxnumofpsnymcerttoobtainperreq(), target);
  }

  // required string strPsnymOverlappingMechanism = 11 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strpsnymoverlappingmechanism().data(), static_cast<int>(this->_internal_strpsnymoverlappingmechanism().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgVPKILibConfig.msgPsnymPolicy.strPsnymOverlappingMechanism");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_strpsnymoverlappingmechanism(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgVPKILibConfig.msgPsnymPolicy)
  return target;
}

size_t msgVPKILibConfig_msgPsnymPolicy::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgVPKILibConfig.msgPsnymPolicy)
  size_t total_size = 0;

  if (_internal_has_strresponsiblenodetorevokepsnyms()) {
    // required string strResponsibleNodeToRevokePsnyms = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strresponsiblenodetorevokepsnyms());
  }

  if (_internal_has_strpsnymoverlappingmechanism()) {
    // required string strPsnymOverlappingMechanism = 11 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpsnymoverlappingmechanism());
  }

  if (_internal_has_uimaxnoofpsnymcerttoobtainperhour()) {
    // required uint32 uiMaxNoOfPsnymCertToObtainPerHour = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uimaxnoofpsnymcerttoobtainperhour());
  }

  if (_internal_has_uimaxnoofpsnymcertrequsingaticket()) {
    // required uint32 uiMaxNoOfPsnymCertReqUsingATicket = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uimaxnoofpsnymcertrequsingaticket());
  }

  if (_internal_has_uiminnoofpsnymcerttoreq()) {
    // required uint32 uiMinNoOfPsnymCertToReq = 4 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uiminnoofpsnymcerttoreq());
  }

  if (_internal_has_uimaxnoofpsnymcerttoreq()) {
    // required uint32 uiMaxNoOfPsnymCertToReq = 5 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uimaxnoofpsnymcerttoreq());
  }

  if (_internal_has_uiminnoofpsnymcerttoresolve()) {
    // required uint32 uiMinNoOfPsnymCertToResolve = 6 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uiminnoofpsnymcerttoresolve());
  }

  if (_internal_has_uimaxnoofpsnymcerttoresolve()) {
    // required uint32 uiMaxNoOfPsnymCertToResolve = 7 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uimaxnoofpsnymcerttoresolve());
  }

  if (_internal_has_uiminnoofpsnymcerttorevoke()) {
    // required uint32 uiMinNoOfPsnymCertToRevoke = 8 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uiminnoofpsnymcerttorevoke());
  }

  if (_internal_has_uimaxnoofpsnymcerttorevoke()) {
    // required uint32 uiMaxNoOfPsnymCertToRevoke = 9 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uimaxnoofpsnymcerttorevoke());
  }

  if (_internal_has_uimaxnumofpsnymcerttoobtainperreq()) {
    // required uint32 uiMaxNumOfPsnymCertToObtainPerReq = 10 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uimaxnumofpsnymcerttoobtainperreq());
  }

  return total_size;
}
size_t msgVPKILibConfig_msgPsnymPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgVPKILibConfig.msgPsnymPolicy)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000007ff) ^ 0x000007ff) == 0) {  // All required fields are present.
    // required string strResponsibleNodeToRevokePsnyms = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strresponsiblenodetorevokepsnyms());

    // required string strPsnymOverlappingMechanism = 11 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpsnymoverlappingmechanism());

    // required uint32 uiMaxNoOfPsnymCertToObtainPerHour = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uimaxnoofpsnymcerttoobtainperhour());

    // required uint32 uiMaxNoOfPsnymCertReqUsingATicket = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uimaxnoofpsnymcertrequsingaticket());

    // required uint32 uiMinNoOfPsnymCertToReq = 4 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uiminnoofpsnymcerttoreq());

    // required uint32 uiMaxNoOfPsnymCertToReq = 5 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uimaxnoofpsnymcerttoreq());

    // required uint32 uiMinNoOfPsnymCertToResolve = 6 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uiminnoofpsnymcerttoresolve());

    // required uint32 uiMaxNoOfPsnymCertToResolve = 7 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uimaxnoofpsnymcerttoresolve());

    // required uint32 uiMinNoOfPsnymCertToRevoke = 8 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uiminnoofpsnymcerttorevoke());

    // required uint32 uiMaxNoOfPsnymCertToRevoke = 9 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uimaxnoofpsnymcerttorevoke());

    // required uint32 uiMaxNumOfPsnymCertToObtainPerReq = 10 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uimaxnumofpsnymcerttoobtainperreq());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgVPKILibConfig_msgPsnymPolicy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgVPKILibConfig.msgPsnymPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const msgVPKILibConfig_msgPsnymPolicy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgVPKILibConfig_msgPsnymPolicy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgVPKILibConfig.msgPsnymPolicy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgVPKILibConfig.msgPsnymPolicy)
    MergeFrom(*source);
  }
}

void msgVPKILibConfig_msgPsnymPolicy::MergeFrom(const msgVPKILibConfig_msgPsnymPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgVPKILibConfig.msgPsnymPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strresponsiblenodetorevokepsnyms(from._internal_strresponsiblenodetorevokepsnyms());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_strpsnymoverlappingmechanism(from._internal_strpsnymoverlappingmechanism());
    }
    if (cached_has_bits & 0x00000004u) {
      uimaxnoofpsnymcerttoobtainperhour_ = from.uimaxnoofpsnymcerttoobtainperhour_;
    }
    if (cached_has_bits & 0x00000008u) {
      uimaxnoofpsnymcertrequsingaticket_ = from.uimaxnoofpsnymcertrequsingaticket_;
    }
    if (cached_has_bits & 0x00000010u) {
      uiminnoofpsnymcerttoreq_ = from.uiminnoofpsnymcerttoreq_;
    }
    if (cached_has_bits & 0x00000020u) {
      uimaxnoofpsnymcerttoreq_ = from.uimaxnoofpsnymcerttoreq_;
    }
    if (cached_has_bits & 0x00000040u) {
      uiminnoofpsnymcerttoresolve_ = from.uiminnoofpsnymcerttoresolve_;
    }
    if (cached_has_bits & 0x00000080u) {
      uimaxnoofpsnymcerttoresolve_ = from.uimaxnoofpsnymcerttoresolve_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      uiminnoofpsnymcerttorevoke_ = from.uiminnoofpsnymcerttorevoke_;
    }
    if (cached_has_bits & 0x00000200u) {
      uimaxnoofpsnymcerttorevoke_ = from.uimaxnoofpsnymcerttorevoke_;
    }
    if (cached_has_bits & 0x00000400u) {
      uimaxnumofpsnymcerttoobtainperreq_ = from.uimaxnumofpsnymcerttoobtainperreq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgVPKILibConfig_msgPsnymPolicy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgVPKILibConfig.msgPsnymPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgVPKILibConfig_msgPsnymPolicy::CopyFrom(const msgVPKILibConfig_msgPsnymPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgVPKILibConfig.msgPsnymPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgVPKILibConfig_msgPsnymPolicy::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void msgVPKILibConfig_msgPsnymPolicy::InternalSwap(msgVPKILibConfig_msgPsnymPolicy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strresponsiblenodetorevokepsnyms_.Swap(&other->strresponsiblenodetorevokepsnyms_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strpsnymoverlappingmechanism_.Swap(&other->strpsnymoverlappingmechanism_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgVPKILibConfig_msgPsnymPolicy, uimaxnumofpsnymcerttoobtainperreq_)
      + sizeof(msgVPKILibConfig_msgPsnymPolicy::uimaxnumofpsnymcerttoobtainperreq_)
      - PROTOBUF_FIELD_OFFSET(msgVPKILibConfig_msgPsnymPolicy, uimaxnoofpsnymcerttoobtainperhour_)>(
          reinterpret_cast<char*>(&uimaxnoofpsnymcerttoobtainperhour_),
          reinterpret_cast<char*>(&other->uimaxnoofpsnymcerttoobtainperhour_));
}

::PROTOBUF_NAMESPACE_ID::Metadata msgVPKILibConfig_msgPsnymPolicy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgVPKILibConfig::InitAsDefaultInstance() {
}
class msgVPKILibConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<msgVPKILibConfig>()._has_bits_);
  static void set_has_ircaid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ipcaid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_iltcaid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_iraid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ipoliceid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_iregionid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ilocationid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_strgethelpcommandname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_imaxdelaythreashold(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ipsnymissuancevalidityperiod(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_iticketvalidityperiod(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_irandvaluethreashold(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_icryptobuffsize(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_uisignaturesize(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_itimestamplowerbound(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_itimestampupperbound(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_icurrentcrlversion(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_inonceincreasingvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_fvpkiversion(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0007ffff) ^ 0x0007ffff) != 0;
  }
};

msgVPKILibConfig::msgVPKILibConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stticketpolicies_(arena),
  stpsnympolicies_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgVPKILibConfig)
}
msgVPKILibConfig::msgVPKILibConfig(const msgVPKILibConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      stticketpolicies_(from.stticketpolicies_),
      stpsnympolicies_(from.stpsnympolicies_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strgethelpcommandname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strgethelpcommandname()) {
    strgethelpcommandname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strgethelpcommandname(),
      GetArena());
  }
  ::memcpy(&uisignaturesize_, &from.uisignaturesize_,
    static_cast<size_t>(reinterpret_cast<char*>(&inonceincreasingvalue_) -
    reinterpret_cast<char*>(&uisignaturesize_)) + sizeof(inonceincreasingvalue_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgVPKILibConfig)
}

void msgVPKILibConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgVPKILibConfig_Interfaces_2eproto.base);
  strgethelpcommandname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uisignaturesize_ = 0u;
  fvpkiversion_ = -1;
  ircaid_ = -1;
  ipcaid_ = -1;
  iltcaid_ = -1;
  iraid_ = -1;
  ipoliceid_ = -1;
  iregionid_ = -1;
  ilocationid_ = -1;
  imaxdelaythreashold_ = -1;
  ipsnymissuancevalidityperiod_ = -1;
  iticketvalidityperiod_ = -1;
  irandvaluethreashold_ = -1;
  icryptobuffsize_ = -1;
  itimestamplowerbound_ = -1;
  itimestampupperbound_ = -1;
  icurrentcrlversion_ = -1;
  inonceincreasingvalue_ = -1;
}

msgVPKILibConfig::~msgVPKILibConfig() {
  // @@protoc_insertion_point(destructor:interfaces.msgVPKILibConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgVPKILibConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strgethelpcommandname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msgVPKILibConfig::ArenaDtor(void* object) {
  msgVPKILibConfig* _this = reinterpret_cast< msgVPKILibConfig* >(object);
  (void)_this;
}
void msgVPKILibConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgVPKILibConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgVPKILibConfig& msgVPKILibConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgVPKILibConfig_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgVPKILibConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgVPKILibConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stticketpolicies_.Clear();
  stpsnympolicies_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    strgethelpcommandname_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    uisignaturesize_ = 0u;
    fvpkiversion_ = -1;
    ircaid_ = -1;
    ipcaid_ = -1;
    iltcaid_ = -1;
    iraid_ = -1;
    ipoliceid_ = -1;
  }
  if (cached_has_bits & 0x0000ff00u) {
    iregionid_ = -1;
    ilocationid_ = -1;
    imaxdelaythreashold_ = -1;
    ipsnymissuancevalidityperiod_ = -1;
    iticketvalidityperiod_ = -1;
    irandvaluethreashold_ = -1;
    icryptobuffsize_ = -1;
    itimestamplowerbound_ = -1;
  }
  if (cached_has_bits & 0x00070000u) {
    itimestampupperbound_ = -1;
    icurrentcrlversion_ = -1;
    inonceincreasingvalue_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgVPKILibConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iRCAId = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ircaid(&has_bits);
          ircaid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iPCAId = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ipcaid(&has_bits);
          ipcaid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iLTCAId = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_iltcaid(&has_bits);
          iltcaid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iRAId = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_iraid(&has_bits);
          iraid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iPoliceId = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ipoliceid(&has_bits);
          ipoliceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iRegionId = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_iregionid(&has_bits);
          iregionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iLocationId = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_ilocationid(&has_bits);
          ilocationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strGetHelpCommandName = 8 [default = ""];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_strgethelpcommandname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgVPKILibConfig.strGetHelpCommandName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .interfaces.msgVPKILibConfig.msgTicketPolicy stTicketPolicies = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stticketpolicies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .interfaces.msgVPKILibConfig.msgPsnymPolicy stPsnymPolicies = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stpsnympolicies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 iMaxDelayThreashold = 11 [default = -1];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_imaxdelaythreashold(&has_bits);
          imaxdelaythreashold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iPsnymIssuanceValidityPeriod = 12 [default = -1];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_ipsnymissuancevalidityperiod(&has_bits);
          ipsnymissuancevalidityperiod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iTicketValidityPeriod = 13 [default = -1];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_iticketvalidityperiod(&has_bits);
          iticketvalidityperiod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iRandValueThreashold = 14 [default = -1];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_irandvaluethreashold(&has_bits);
          irandvaluethreashold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iCryptoBuffSize = 15 [default = -1];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_icryptobuffsize(&has_bits);
          icryptobuffsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uiSignatureSize = 16 [default = 0];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_uisignaturesize(&has_bits);
          uisignaturesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iTimeStampLowerBound = 17 [default = -1];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_itimestamplowerbound(&has_bits);
          itimestamplowerbound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iTimeStampUpperBound = 18 [default = -1];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_itimestampupperbound(&has_bits);
          itimestampupperbound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iCurrentCRLVersion = 19 [default = -1];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_icurrentcrlversion(&has_bits);
          icurrentcrlversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNonceIncreasingValue = 20 [default = -1];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_inonceincreasingvalue(&has_bits);
          inonceincreasingvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float fVPKIVersion = 21 [default = -1];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_fvpkiversion(&has_bits);
          fvpkiversion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgVPKILibConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgVPKILibConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iRCAId = 1 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ircaid(), target);
  }

  // required int32 iPCAId = 2 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ipcaid(), target);
  }

  // required int32 iLTCAId = 3 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_iltcaid(), target);
  }

  // required int32 iRAId = 4 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_iraid(), target);
  }

  // required int32 iPoliceId = 5 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_ipoliceid(), target);
  }

  // required int32 iRegionId = 6 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_iregionid(), target);
  }

  // required int32 iLocationId = 7 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_ilocationid(), target);
  }

  // required string strGetHelpCommandName = 8 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strgethelpcommandname().data(), static_cast<int>(this->_internal_strgethelpcommandname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgVPKILibConfig.strGetHelpCommandName");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_strgethelpcommandname(), target);
  }

  // repeated .interfaces.msgVPKILibConfig.msgTicketPolicy stTicketPolicies = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stticketpolicies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_stticketpolicies(i), target, stream);
  }

  // repeated .interfaces.msgVPKILibConfig.msgPsnymPolicy stPsnymPolicies = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stpsnympolicies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_stpsnympolicies(i), target, stream);
  }

  // required int32 iMaxDelayThreashold = 11 [default = -1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_imaxdelaythreashold(), target);
  }

  // required int32 iPsnymIssuanceValidityPeriod = 12 [default = -1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_ipsnymissuancevalidityperiod(), target);
  }

  // required int32 iTicketValidityPeriod = 13 [default = -1];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_iticketvalidityperiod(), target);
  }

  // required int32 iRandValueThreashold = 14 [default = -1];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_irandvaluethreashold(), target);
  }

  // required int32 iCryptoBuffSize = 15 [default = -1];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_icryptobuffsize(), target);
  }

  // required uint32 uiSignatureSize = 16 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_uisignaturesize(), target);
  }

  // required int32 iTimeStampLowerBound = 17 [default = -1];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_itimestamplowerbound(), target);
  }

  // required int32 iTimeStampUpperBound = 18 [default = -1];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_itimestampupperbound(), target);
  }

  // required int32 iCurrentCRLVersion = 19 [default = -1];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_icurrentcrlversion(), target);
  }

  // required int32 iNonceIncreasingValue = 20 [default = -1];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_inonceincreasingvalue(), target);
  }

  // required float fVPKIVersion = 21 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_fvpkiversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgVPKILibConfig)
  return target;
}

size_t msgVPKILibConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgVPKILibConfig)
  size_t total_size = 0;

  if (_internal_has_strgethelpcommandname()) {
    // required string strGetHelpCommandName = 8 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strgethelpcommandname());
  }

  if (_internal_has_uisignaturesize()) {
    // required uint32 uiSignatureSize = 16 [default = 0];
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uisignaturesize());
  }

  if (_internal_has_fvpkiversion()) {
    // required float fVPKIVersion = 21 [default = -1];
    total_size += 2 + 4;
  }

  if (_internal_has_ircaid()) {
    // required int32 iRCAId = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ircaid());
  }

  if (_internal_has_ipcaid()) {
    // required int32 iPCAId = 2 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipcaid());
  }

  if (_internal_has_iltcaid()) {
    // required int32 iLTCAId = 3 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iltcaid());
  }

  if (_internal_has_iraid()) {
    // required int32 iRAId = 4 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iraid());
  }

  if (_internal_has_ipoliceid()) {
    // required int32 iPoliceId = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipoliceid());
  }

  if (_internal_has_iregionid()) {
    // required int32 iRegionId = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iregionid());
  }

  if (_internal_has_ilocationid()) {
    // required int32 iLocationId = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ilocationid());
  }

  if (_internal_has_imaxdelaythreashold()) {
    // required int32 iMaxDelayThreashold = 11 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_imaxdelaythreashold());
  }

  if (_internal_has_ipsnymissuancevalidityperiod()) {
    // required int32 iPsnymIssuanceValidityPeriod = 12 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipsnymissuancevalidityperiod());
  }

  if (_internal_has_iticketvalidityperiod()) {
    // required int32 iTicketValidityPeriod = 13 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iticketvalidityperiod());
  }

  if (_internal_has_irandvaluethreashold()) {
    // required int32 iRandValueThreashold = 14 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_irandvaluethreashold());
  }

  if (_internal_has_icryptobuffsize()) {
    // required int32 iCryptoBuffSize = 15 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_icryptobuffsize());
  }

  if (_internal_has_itimestamplowerbound()) {
    // required int32 iTimeStampLowerBound = 17 [default = -1];
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_itimestamplowerbound());
  }

  if (_internal_has_itimestampupperbound()) {
    // required int32 iTimeStampUpperBound = 18 [default = -1];
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_itimestampupperbound());
  }

  if (_internal_has_icurrentcrlversion()) {
    // required int32 iCurrentCRLVersion = 19 [default = -1];
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_icurrentcrlversion());
  }

  if (_internal_has_inonceincreasingvalue()) {
    // required int32 iNonceIncreasingValue = 20 [default = -1];
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonceincreasingvalue());
  }

  return total_size;
}
size_t msgVPKILibConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgVPKILibConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0007ffff) ^ 0x0007ffff) == 0) {  // All required fields are present.
    // required string strGetHelpCommandName = 8 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strgethelpcommandname());

    // required uint32 uiSignatureSize = 16 [default = 0];
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uisignaturesize());

    // required float fVPKIVersion = 21 [default = -1];
    total_size += 2 + 4;

    // required int32 iRCAId = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ircaid());

    // required int32 iPCAId = 2 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipcaid());

    // required int32 iLTCAId = 3 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iltcaid());

    // required int32 iRAId = 4 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iraid());

    // required int32 iPoliceId = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipoliceid());

    // required int32 iRegionId = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iregionid());

    // required int32 iLocationId = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ilocationid());

    // required int32 iMaxDelayThreashold = 11 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_imaxdelaythreashold());

    // required int32 iPsnymIssuanceValidityPeriod = 12 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipsnymissuancevalidityperiod());

    // required int32 iTicketValidityPeriod = 13 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iticketvalidityperiod());

    // required int32 iRandValueThreashold = 14 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_irandvaluethreashold());

    // required int32 iCryptoBuffSize = 15 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_icryptobuffsize());

    // required int32 iTimeStampLowerBound = 17 [default = -1];
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_itimestamplowerbound());

    // required int32 iTimeStampUpperBound = 18 [default = -1];
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_itimestampupperbound());

    // required int32 iCurrentCRLVersion = 19 [default = -1];
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_icurrentcrlversion());

    // required int32 iNonceIncreasingValue = 20 [default = -1];
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonceincreasingvalue());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .interfaces.msgVPKILibConfig.msgTicketPolicy stTicketPolicies = 9;
  total_size += 1UL * this->_internal_stticketpolicies_size();
  for (const auto& msg : this->stticketpolicies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .interfaces.msgVPKILibConfig.msgPsnymPolicy stPsnymPolicies = 10;
  total_size += 1UL * this->_internal_stpsnympolicies_size();
  for (const auto& msg : this->stpsnympolicies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgVPKILibConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgVPKILibConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const msgVPKILibConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgVPKILibConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgVPKILibConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgVPKILibConfig)
    MergeFrom(*source);
  }
}

void msgVPKILibConfig::MergeFrom(const msgVPKILibConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgVPKILibConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stticketpolicies_.MergeFrom(from.stticketpolicies_);
  stpsnympolicies_.MergeFrom(from.stpsnympolicies_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strgethelpcommandname(from._internal_strgethelpcommandname());
    }
    if (cached_has_bits & 0x00000002u) {
      uisignaturesize_ = from.uisignaturesize_;
    }
    if (cached_has_bits & 0x00000004u) {
      fvpkiversion_ = from.fvpkiversion_;
    }
    if (cached_has_bits & 0x00000008u) {
      ircaid_ = from.ircaid_;
    }
    if (cached_has_bits & 0x00000010u) {
      ipcaid_ = from.ipcaid_;
    }
    if (cached_has_bits & 0x00000020u) {
      iltcaid_ = from.iltcaid_;
    }
    if (cached_has_bits & 0x00000040u) {
      iraid_ = from.iraid_;
    }
    if (cached_has_bits & 0x00000080u) {
      ipoliceid_ = from.ipoliceid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      iregionid_ = from.iregionid_;
    }
    if (cached_has_bits & 0x00000200u) {
      ilocationid_ = from.ilocationid_;
    }
    if (cached_has_bits & 0x00000400u) {
      imaxdelaythreashold_ = from.imaxdelaythreashold_;
    }
    if (cached_has_bits & 0x00000800u) {
      ipsnymissuancevalidityperiod_ = from.ipsnymissuancevalidityperiod_;
    }
    if (cached_has_bits & 0x00001000u) {
      iticketvalidityperiod_ = from.iticketvalidityperiod_;
    }
    if (cached_has_bits & 0x00002000u) {
      irandvaluethreashold_ = from.irandvaluethreashold_;
    }
    if (cached_has_bits & 0x00004000u) {
      icryptobuffsize_ = from.icryptobuffsize_;
    }
    if (cached_has_bits & 0x00008000u) {
      itimestamplowerbound_ = from.itimestamplowerbound_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      itimestampupperbound_ = from.itimestampupperbound_;
    }
    if (cached_has_bits & 0x00020000u) {
      icurrentcrlversion_ = from.icurrentcrlversion_;
    }
    if (cached_has_bits & 0x00040000u) {
      inonceincreasingvalue_ = from.inonceincreasingvalue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgVPKILibConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgVPKILibConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgVPKILibConfig::CopyFrom(const msgVPKILibConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgVPKILibConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgVPKILibConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(stticketpolicies_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(stpsnympolicies_)) return false;
  return true;
}

void msgVPKILibConfig::InternalSwap(msgVPKILibConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stticketpolicies_.InternalSwap(&other->stticketpolicies_);
  stpsnympolicies_.InternalSwap(&other->stpsnympolicies_);
  strgethelpcommandname_.Swap(&other->strgethelpcommandname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(uisignaturesize_, other->uisignaturesize_);
  swap(fvpkiversion_, other->fvpkiversion_);
  swap(ircaid_, other->ircaid_);
  swap(ipcaid_, other->ipcaid_);
  swap(iltcaid_, other->iltcaid_);
  swap(iraid_, other->iraid_);
  swap(ipoliceid_, other->ipoliceid_);
  swap(iregionid_, other->iregionid_);
  swap(ilocationid_, other->ilocationid_);
  swap(imaxdelaythreashold_, other->imaxdelaythreashold_);
  swap(ipsnymissuancevalidityperiod_, other->ipsnymissuancevalidityperiod_);
  swap(iticketvalidityperiod_, other->iticketvalidityperiod_);
  swap(irandvaluethreashold_, other->irandvaluethreashold_);
  swap(icryptobuffsize_, other->icryptobuffsize_);
  swap(itimestamplowerbound_, other->itimestamplowerbound_);
  swap(itimestampupperbound_, other->itimestampupperbound_);
  swap(icurrentcrlversion_, other->icurrentcrlversion_);
  swap(inonceincreasingvalue_, other->inonceincreasingvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgVPKILibConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgUpgradeConfigurationReq_Client2Server::InitAsDefaultInstance() {
  ::interfaces::_msgUpgradeConfigurationReq_Client2Server_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgUpgradeConfigurationReq_Client2Server::_Internal {
 public:
  using HasBits = decltype(std::declval<msgUpgradeConfigurationReq_Client2Server>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ipcaidrange(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_iregionid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ipsnymcertlen(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_strpsnymcert(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::interfaces::msgSignature& stsign(const msgUpgradeConfigurationReq_Client2Server* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000fd) ^ 0x000000fd) != 0;
  }
};

const ::interfaces::msgSignature&
msgUpgradeConfigurationReq_Client2Server::_Internal::stsign(const msgUpgradeConfigurationReq_Client2Server* msg) {
  return *msg->stsign_;
}
msgUpgradeConfigurationReq_Client2Server::msgUpgradeConfigurationReq_Client2Server(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgUpgradeConfigurationReq_Client2Server)
}
msgUpgradeConfigurationReq_Client2Server::msgUpgradeConfigurationReq_Client2Server(const msgUpgradeConfigurationReq_Client2Server& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strpsnymcert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strpsnymcert()) {
    strpsnymcert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strpsnymcert(),
      GetArena());
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&inonce_, &from.inonce_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&inonce_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgUpgradeConfigurationReq_Client2Server)
}

void msgUpgradeConfigurationReq_Client2Server::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgUpgradeConfigurationReq_Client2Server_Interfaces_2eproto.base);
  strpsnymcert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stsign_ = nullptr;
  inonce_ = -1;
  ireqtype_ = -1;
  ipcaidrange_ = -1;
  iregionid_ = -1;
  ipsnymcertlen_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgUpgradeConfigurationReq_Client2Server::~msgUpgradeConfigurationReq_Client2Server() {
  // @@protoc_insertion_point(destructor:interfaces.msgUpgradeConfigurationReq_Client2Server)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgUpgradeConfigurationReq_Client2Server::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strpsnymcert_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stsign_;
}

void msgUpgradeConfigurationReq_Client2Server::ArenaDtor(void* object) {
  msgUpgradeConfigurationReq_Client2Server* _this = reinterpret_cast< msgUpgradeConfigurationReq_Client2Server* >(object);
  (void)_this;
}
void msgUpgradeConfigurationReq_Client2Server::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgUpgradeConfigurationReq_Client2Server::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgUpgradeConfigurationReq_Client2Server& msgUpgradeConfigurationReq_Client2Server::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgUpgradeConfigurationReq_Client2Server_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgUpgradeConfigurationReq_Client2Server::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgUpgradeConfigurationReq_Client2Server)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      strpsnymcert_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
    inonce_ = -1;
    ireqtype_ = -1;
    ipcaidrange_ = -1;
    iregionid_ = -1;
    ipsnymcertlen_ = -1;
    ttimestamp_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgUpgradeConfigurationReq_Client2Server::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iPCAIdRange = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ipcaidrange(&has_bits);
          ipcaidrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iRegionId = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_iregionid(&has_bits);
          iregionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iPsnymCertLen = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ipsnymcertlen(&has_bits);
          ipsnymcertlen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strPsnymCert = 5 [default = ""];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_strpsnymcert();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgUpgradeConfigurationReq_Client2Server.strPsnymCert");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgUpgradeConfigurationReq_Client2Server::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgUpgradeConfigurationReq_Client2Server)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // required int32 iPCAIdRange = 2 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ipcaidrange(), target);
  }

  // required int32 iRegionId = 3 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_iregionid(), target);
  }

  // required int32 iPsnymCertLen = 4 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ipsnymcertlen(), target);
  }

  // required string strPsnymCert = 5 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strpsnymcert().data(), static_cast<int>(this->_internal_strpsnymcert().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgUpgradeConfigurationReq_Client2Server.strPsnymCert");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_strpsnymcert(), target);
  }

  // required int32 iNonce = 6 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 7 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_ttimestamp(), target);
  }

  // optional .interfaces.msgSignature stSign = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgUpgradeConfigurationReq_Client2Server)
  return target;
}

size_t msgUpgradeConfigurationReq_Client2Server::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgUpgradeConfigurationReq_Client2Server)
  size_t total_size = 0;

  if (_internal_has_strpsnymcert()) {
    // required string strPsnymCert = 5 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpsnymcert());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_ipcaidrange()) {
    // required int32 iPCAIdRange = 2 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipcaidrange());
  }

  if (_internal_has_iregionid()) {
    // required int32 iRegionId = 3 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iregionid());
  }

  if (_internal_has_ipsnymcertlen()) {
    // required int32 iPsnymCertLen = 4 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipsnymcertlen());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgUpgradeConfigurationReq_Client2Server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgUpgradeConfigurationReq_Client2Server)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000fd) ^ 0x000000fd) == 0) {  // All required fields are present.
    // required string strPsnymCert = 5 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpsnymcert());

    // required int32 iNonce = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iPCAIdRange = 2 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipcaidrange());

    // required int32 iRegionId = 3 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iregionid());

    // required int32 iPsnymCertLen = 4 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipsnymcertlen());

    // required int64 tTimeStamp = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .interfaces.msgSignature stSign = 8;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsign_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgUpgradeConfigurationReq_Client2Server::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgUpgradeConfigurationReq_Client2Server)
  GOOGLE_DCHECK_NE(&from, this);
  const msgUpgradeConfigurationReq_Client2Server* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgUpgradeConfigurationReq_Client2Server>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgUpgradeConfigurationReq_Client2Server)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgUpgradeConfigurationReq_Client2Server)
    MergeFrom(*source);
  }
}

void msgUpgradeConfigurationReq_Client2Server::MergeFrom(const msgUpgradeConfigurationReq_Client2Server& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgUpgradeConfigurationReq_Client2Server)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strpsnymcert(from._internal_strpsnymcert());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000004u) {
      inonce_ = from.inonce_;
    }
    if (cached_has_bits & 0x00000008u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000010u) {
      ipcaidrange_ = from.ipcaidrange_;
    }
    if (cached_has_bits & 0x00000020u) {
      iregionid_ = from.iregionid_;
    }
    if (cached_has_bits & 0x00000040u) {
      ipsnymcertlen_ = from.ipsnymcertlen_;
    }
    if (cached_has_bits & 0x00000080u) {
      ttimestamp_ = from.ttimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgUpgradeConfigurationReq_Client2Server::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgUpgradeConfigurationReq_Client2Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgUpgradeConfigurationReq_Client2Server::CopyFrom(const msgUpgradeConfigurationReq_Client2Server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgUpgradeConfigurationReq_Client2Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgUpgradeConfigurationReq_Client2Server::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void msgUpgradeConfigurationReq_Client2Server::InternalSwap(msgUpgradeConfigurationReq_Client2Server* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strpsnymcert_.Swap(&other->strpsnymcert_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(stsign_, other->stsign_);
  swap(inonce_, other->inonce_);
  swap(ireqtype_, other->ireqtype_);
  swap(ipcaidrange_, other->ipcaidrange_);
  swap(iregionid_, other->iregionid_);
  swap(ipsnymcertlen_, other->ipsnymcertlen_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgUpgradeConfigurationReq_Client2Server::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgUpgradeConfigurationRes_Server2Client::InitAsDefaultInstance() {
  ::interfaces::_msgUpgradeConfigurationRes_Server2Client_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgUpgradeConfigurationRes_Server2Client_default_instance_._instance.get_mutable()->stvehconfig_ = const_cast< ::interfaces::msgVehicleConfig*>(
      ::interfaces::msgVehicleConfig::internal_default_instance());
  ::interfaces::_msgUpgradeConfigurationRes_Server2Client_default_instance_._instance.get_mutable()->stpoliceconfig_ = const_cast< ::interfaces::msgPoliceConfig*>(
      ::interfaces::msgPoliceConfig::internal_default_instance());
  ::interfaces::_msgUpgradeConfigurationRes_Server2Client_default_instance_._instance.get_mutable()->stvpkilibconfig_ = const_cast< ::interfaces::msgVPKILibConfig*>(
      ::interfaces::msgVPKILibConfig::internal_default_instance());
  ::interfaces::_msgUpgradeConfigurationRes_Server2Client_default_instance_._instance.get_mutable()->sterrinfo_ = const_cast< ::interfaces::msgError*>(
      ::interfaces::msgError::internal_default_instance());
  ::interfaces::_msgUpgradeConfigurationRes_Server2Client_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgUpgradeConfigurationRes_Server2Client::_Internal {
 public:
  using HasBits = decltype(std::declval<msgUpgradeConfigurationRes_Server2Client>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgUpgradeConfigurationRes_Server2Client* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::interfaces::msgVehicleConfig& stvehconfig(const msgUpgradeConfigurationRes_Server2Client* msg);
  static void set_has_stvehconfig(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::interfaces::msgPoliceConfig& stpoliceconfig(const msgUpgradeConfigurationRes_Server2Client* msg);
  static void set_has_stpoliceconfig(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::interfaces::msgVPKILibConfig& stvpkilibconfig(const msgUpgradeConfigurationRes_Server2Client* msg);
  static void set_has_stvpkilibconfig(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::interfaces::msgError& sterrinfo(const msgUpgradeConfigurationRes_Server2Client* msg);
  static void set_has_sterrinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::interfaces::msgSignature& stsign(const msgUpgradeConfigurationRes_Server2Client* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001de) ^ 0x000001de) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgUpgradeConfigurationRes_Server2Client::_Internal::stsigner(const msgUpgradeConfigurationRes_Server2Client* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgVehicleConfig&
msgUpgradeConfigurationRes_Server2Client::_Internal::stvehconfig(const msgUpgradeConfigurationRes_Server2Client* msg) {
  return *msg->stvehconfig_;
}
const ::interfaces::msgPoliceConfig&
msgUpgradeConfigurationRes_Server2Client::_Internal::stpoliceconfig(const msgUpgradeConfigurationRes_Server2Client* msg) {
  return *msg->stpoliceconfig_;
}
const ::interfaces::msgVPKILibConfig&
msgUpgradeConfigurationRes_Server2Client::_Internal::stvpkilibconfig(const msgUpgradeConfigurationRes_Server2Client* msg) {
  return *msg->stvpkilibconfig_;
}
const ::interfaces::msgError&
msgUpgradeConfigurationRes_Server2Client::_Internal::sterrinfo(const msgUpgradeConfigurationRes_Server2Client* msg) {
  return *msg->sterrinfo_;
}
const ::interfaces::msgSignature&
msgUpgradeConfigurationRes_Server2Client::_Internal::stsign(const msgUpgradeConfigurationRes_Server2Client* msg) {
  return *msg->stsign_;
}
msgUpgradeConfigurationRes_Server2Client::msgUpgradeConfigurationRes_Server2Client(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgUpgradeConfigurationRes_Server2Client)
}
msgUpgradeConfigurationRes_Server2Client::msgUpgradeConfigurationRes_Server2Client(const msgUpgradeConfigurationRes_Server2Client& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_stvehconfig()) {
    stvehconfig_ = new ::interfaces::msgVehicleConfig(*from.stvehconfig_);
  } else {
    stvehconfig_ = nullptr;
  }
  if (from._internal_has_stpoliceconfig()) {
    stpoliceconfig_ = new ::interfaces::msgPoliceConfig(*from.stpoliceconfig_);
  } else {
    stpoliceconfig_ = nullptr;
  }
  if (from._internal_has_stvpkilibconfig()) {
    stvpkilibconfig_ = new ::interfaces::msgVPKILibConfig(*from.stvpkilibconfig_);
  } else {
    stvpkilibconfig_ = nullptr;
  }
  if (from._internal_has_sterrinfo()) {
    sterrinfo_ = new ::interfaces::msgError(*from.sterrinfo_);
  } else {
    sterrinfo_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&ireqtype_, &from.ireqtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&ireqtype_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgUpgradeConfigurationRes_Server2Client)
}

void msgUpgradeConfigurationRes_Server2Client::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgUpgradeConfigurationRes_Server2Client_Interfaces_2eproto.base);
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stsign_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(stsign_));
  ireqtype_ = -1;
  inonce_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgUpgradeConfigurationRes_Server2Client::~msgUpgradeConfigurationRes_Server2Client() {
  // @@protoc_insertion_point(destructor:interfaces.msgUpgradeConfigurationRes_Server2Client)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgUpgradeConfigurationRes_Server2Client::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete stvehconfig_;
  if (this != internal_default_instance()) delete stpoliceconfig_;
  if (this != internal_default_instance()) delete stvpkilibconfig_;
  if (this != internal_default_instance()) delete sterrinfo_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgUpgradeConfigurationRes_Server2Client::ArenaDtor(void* object) {
  msgUpgradeConfigurationRes_Server2Client* _this = reinterpret_cast< msgUpgradeConfigurationRes_Server2Client* >(object);
  (void)_this;
}
void msgUpgradeConfigurationRes_Server2Client::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgUpgradeConfigurationRes_Server2Client::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgUpgradeConfigurationRes_Server2Client& msgUpgradeConfigurationRes_Server2Client::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgUpgradeConfigurationRes_Server2Client_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgUpgradeConfigurationRes_Server2Client::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgUpgradeConfigurationRes_Server2Client)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stvehconfig_ != nullptr);
      stvehconfig_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stpoliceconfig_ != nullptr);
      stpoliceconfig_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(stvpkilibconfig_ != nullptr);
      stvpkilibconfig_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(sterrinfo_ != nullptr);
      sterrinfo_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
    ireqtype_ = -1;
    inonce_ = -1;
  }
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgUpgradeConfigurationRes_Server2Client::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgVehicleConfig stVehConfig = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stvehconfig(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgPoliceConfig stPoliceConfig = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stpoliceconfig(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgVPKILibConfig stVPKILibConfig = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stvpkilibconfig(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgError stErrInfo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_sterrinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgUpgradeConfigurationRes_Server2Client::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgUpgradeConfigurationRes_Server2Client)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required .interfaces.msgVehicleConfig stVehConfig = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::stvehconfig(this), target, stream);
  }

  // required .interfaces.msgPoliceConfig stPoliceConfig = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::stpoliceconfig(this), target, stream);
  }

  // required .interfaces.msgVPKILibConfig stVPKILibConfig = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::stvpkilibconfig(this), target, stream);
  }

  // required int32 iNonce = 6 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 7 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_ttimestamp(), target);
  }

  // required .interfaces.msgError stErrInfo = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::sterrinfo(this), target, stream);
  }

  // optional .interfaces.msgSignature stSign = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgUpgradeConfigurationRes_Server2Client)
  return target;
}

size_t msgUpgradeConfigurationRes_Server2Client::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgUpgradeConfigurationRes_Server2Client)
  size_t total_size = 0;

  if (_internal_has_stvehconfig()) {
    // required .interfaces.msgVehicleConfig stVehConfig = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stvehconfig_);
  }

  if (_internal_has_stpoliceconfig()) {
    // required .interfaces.msgPoliceConfig stPoliceConfig = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stpoliceconfig_);
  }

  if (_internal_has_stvpkilibconfig()) {
    // required .interfaces.msgVPKILibConfig stVPKILibConfig = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stvpkilibconfig_);
  }

  if (_internal_has_sterrinfo()) {
    // required .interfaces.msgError stErrInfo = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgUpgradeConfigurationRes_Server2Client::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgUpgradeConfigurationRes_Server2Client)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000001de) ^ 0x000001de) == 0) {  // All required fields are present.
    // required .interfaces.msgVehicleConfig stVehConfig = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stvehconfig_);

    // required .interfaces.msgPoliceConfig stPoliceConfig = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stpoliceconfig_);

    // required .interfaces.msgVPKILibConfig stVPKILibConfig = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stvpkilibconfig_);

    // required .interfaces.msgError stErrInfo = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iNonce = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int64 tTimeStamp = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .interfaces.msgSignerInfo stSigner = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsigner_);
  }

  // optional .interfaces.msgSignature stSign = 9;
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsign_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgUpgradeConfigurationRes_Server2Client::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgUpgradeConfigurationRes_Server2Client)
  GOOGLE_DCHECK_NE(&from, this);
  const msgUpgradeConfigurationRes_Server2Client* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgUpgradeConfigurationRes_Server2Client>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgUpgradeConfigurationRes_Server2Client)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgUpgradeConfigurationRes_Server2Client)
    MergeFrom(*source);
  }
}

void msgUpgradeConfigurationRes_Server2Client::MergeFrom(const msgUpgradeConfigurationRes_Server2Client& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgUpgradeConfigurationRes_Server2Client)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stvehconfig()->::interfaces::msgVehicleConfig::MergeFrom(from._internal_stvehconfig());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stpoliceconfig()->::interfaces::msgPoliceConfig::MergeFrom(from._internal_stpoliceconfig());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_stvpkilibconfig()->::interfaces::msgVPKILibConfig::MergeFrom(from._internal_stvpkilibconfig());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_sterrinfo()->::interfaces::msgError::MergeFrom(from._internal_sterrinfo());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000040u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000080u) {
      inonce_ = from.inonce_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_ttimestamp(from._internal_ttimestamp());
  }
}

void msgUpgradeConfigurationRes_Server2Client::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgUpgradeConfigurationRes_Server2Client)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgUpgradeConfigurationRes_Server2Client::CopyFrom(const msgUpgradeConfigurationRes_Server2Client& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgUpgradeConfigurationRes_Server2Client)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgUpgradeConfigurationRes_Server2Client::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  if (_internal_has_stvehconfig()) {
    if (!stvehconfig_->IsInitialized()) return false;
  }
  if (_internal_has_stpoliceconfig()) {
    if (!stpoliceconfig_->IsInitialized()) return false;
  }
  if (_internal_has_stvpkilibconfig()) {
    if (!stvpkilibconfig_->IsInitialized()) return false;
  }
  if (_internal_has_sterrinfo()) {
    if (!sterrinfo_->IsInitialized()) return false;
  }
  return true;
}

void msgUpgradeConfigurationRes_Server2Client::InternalSwap(msgUpgradeConfigurationRes_Server2Client* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgUpgradeConfigurationRes_Server2Client, stsign_)
      + sizeof(msgUpgradeConfigurationRes_Server2Client::stsign_)
      - PROTOBUF_FIELD_OFFSET(msgUpgradeConfigurationRes_Server2Client, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(ireqtype_, other->ireqtype_);
  swap(inonce_, other->inonce_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgUpgradeConfigurationRes_Server2Client::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgReversePsnymResolutionReq_Police2RA::InitAsDefaultInstance() {
  ::interfaces::_msgReversePsnymResolutionReq_Police2RA_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgReversePsnymResolutionReq_Police2RA_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgReversePsnymResolutionReq_Police2RA::_Internal {
 public:
  using HasBits = decltype(std::declval<msgReversePsnymResolutionReq_Police2RA>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgReversePsnymResolutionReq_Police2RA* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inoofx509certtoberesolved(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::interfaces::msgSignature& stsign(const msgReversePsnymResolutionReq_Police2RA* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003c) ^ 0x0000003c) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgReversePsnymResolutionReq_Police2RA::_Internal::stsigner(const msgReversePsnymResolutionReq_Police2RA* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgSignature&
msgReversePsnymResolutionReq_Police2RA::_Internal::stsign(const msgReversePsnymResolutionReq_Police2RA* msg) {
  return *msg->stsign_;
}
msgReversePsnymResolutionReq_Police2RA::msgReversePsnymResolutionReq_Police2RA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  strx509cert_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgReversePsnymResolutionReq_Police2RA)
}
msgReversePsnymResolutionReq_Police2RA::msgReversePsnymResolutionReq_Police2RA(const msgReversePsnymResolutionReq_Police2RA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      strx509cert_(from.strx509cert_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&inonce_, &from.inonce_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&inonce_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgReversePsnymResolutionReq_Police2RA)
}

void msgReversePsnymResolutionReq_Police2RA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgReversePsnymResolutionReq_Police2RA_Interfaces_2eproto.base);
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stsign_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(stsign_));
  inonce_ = -1;
  ireqtype_ = -1;
  inoofx509certtoberesolved_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgReversePsnymResolutionReq_Police2RA::~msgReversePsnymResolutionReq_Police2RA() {
  // @@protoc_insertion_point(destructor:interfaces.msgReversePsnymResolutionReq_Police2RA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgReversePsnymResolutionReq_Police2RA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgReversePsnymResolutionReq_Police2RA::ArenaDtor(void* object) {
  msgReversePsnymResolutionReq_Police2RA* _this = reinterpret_cast< msgReversePsnymResolutionReq_Police2RA* >(object);
  (void)_this;
}
void msgReversePsnymResolutionReq_Police2RA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgReversePsnymResolutionReq_Police2RA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgReversePsnymResolutionReq_Police2RA& msgReversePsnymResolutionReq_Police2RA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgReversePsnymResolutionReq_Police2RA_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgReversePsnymResolutionReq_Police2RA::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgReversePsnymResolutionReq_Police2RA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strx509cert_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
    inonce_ = -1;
    ireqtype_ = -1;
    inoofx509certtoberesolved_ = -1;
    ttimestamp_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgReversePsnymResolutionReq_Police2RA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNoOfX509CertToBeResolved = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_inoofx509certtoberesolved(&has_bits);
          inoofx509certtoberesolved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string strX509Cert = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_strx509cert();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgReversePsnymResolutionReq_Police2RA.strX509Cert");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgReversePsnymResolutionReq_Police2RA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgReversePsnymResolutionReq_Police2RA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required int32 iNoOfX509CertToBeResolved = 3 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_inoofx509certtoberesolved(), target);
  }

  // repeated string strX509Cert = 4;
  for (int i = 0, n = this->_internal_strx509cert_size(); i < n; i++) {
    const auto& s = this->_internal_strx509cert(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgReversePsnymResolutionReq_Police2RA.strX509Cert");
    target = stream->WriteString(4, s, target);
  }

  // required int32 iNonce = 5 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 6 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_ttimestamp(), target);
  }

  // optional .interfaces.msgSignature stSign = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgReversePsnymResolutionReq_Police2RA)
  return target;
}

size_t msgReversePsnymResolutionReq_Police2RA::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgReversePsnymResolutionReq_Police2RA)
  size_t total_size = 0;

  if (_internal_has_inonce()) {
    // required int32 iNonce = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_inoofx509certtoberesolved()) {
    // required int32 iNoOfX509CertToBeResolved = 3 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inoofx509certtoberesolved());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgReversePsnymResolutionReq_Police2RA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgReversePsnymResolutionReq_Police2RA)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003c) ^ 0x0000003c) == 0) {  // All required fields are present.
    // required int32 iNonce = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iNoOfX509CertToBeResolved = 3 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inoofx509certtoberesolved());

    // required int64 tTimeStamp = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string strX509Cert = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(strx509cert_.size());
  for (int i = 0, n = strx509cert_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      strx509cert_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .interfaces.msgSignerInfo stSigner = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsigner_);
    }

    // optional .interfaces.msgSignature stSign = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsign_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgReversePsnymResolutionReq_Police2RA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgReversePsnymResolutionReq_Police2RA)
  GOOGLE_DCHECK_NE(&from, this);
  const msgReversePsnymResolutionReq_Police2RA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgReversePsnymResolutionReq_Police2RA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgReversePsnymResolutionReq_Police2RA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgReversePsnymResolutionReq_Police2RA)
    MergeFrom(*source);
  }
}

void msgReversePsnymResolutionReq_Police2RA::MergeFrom(const msgReversePsnymResolutionReq_Police2RA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgReversePsnymResolutionReq_Police2RA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  strx509cert_.MergeFrom(from.strx509cert_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000004u) {
      inonce_ = from.inonce_;
    }
    if (cached_has_bits & 0x00000008u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000010u) {
      inoofx509certtoberesolved_ = from.inoofx509certtoberesolved_;
    }
    if (cached_has_bits & 0x00000020u) {
      ttimestamp_ = from.ttimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgReversePsnymResolutionReq_Police2RA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgReversePsnymResolutionReq_Police2RA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgReversePsnymResolutionReq_Police2RA::CopyFrom(const msgReversePsnymResolutionReq_Police2RA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgReversePsnymResolutionReq_Police2RA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgReversePsnymResolutionReq_Police2RA::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  return true;
}

void msgReversePsnymResolutionReq_Police2RA::InternalSwap(msgReversePsnymResolutionReq_Police2RA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strx509cert_.InternalSwap(&other->strx509cert_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgReversePsnymResolutionReq_Police2RA, stsign_)
      + sizeof(msgReversePsnymResolutionReq_Police2RA::stsign_)
      - PROTOBUF_FIELD_OFFSET(msgReversePsnymResolutionReq_Police2RA, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(inonce_, other->inonce_);
  swap(ireqtype_, other->ireqtype_);
  swap(inoofx509certtoberesolved_, other->inoofx509certtoberesolved_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgReversePsnymResolutionReq_Police2RA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgReversePsnymResolutionReq_RA2LTCA::InitAsDefaultInstance() {
  ::interfaces::_msgReversePsnymResolutionReq_RA2LTCA_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgReversePsnymResolutionReq_RA2LTCA_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgReversePsnymResolutionReq_RA2LTCA::_Internal {
 public:
  using HasBits = decltype(std::declval<msgReversePsnymResolutionReq_RA2LTCA>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgReversePsnymResolutionReq_RA2LTCA* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inoofx509certtoberesolved(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::interfaces::msgSignature& stsign(const msgReversePsnymResolutionReq_RA2LTCA* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003c) ^ 0x0000003c) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgReversePsnymResolutionReq_RA2LTCA::_Internal::stsigner(const msgReversePsnymResolutionReq_RA2LTCA* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgSignature&
msgReversePsnymResolutionReq_RA2LTCA::_Internal::stsign(const msgReversePsnymResolutionReq_RA2LTCA* msg) {
  return *msg->stsign_;
}
msgReversePsnymResolutionReq_RA2LTCA::msgReversePsnymResolutionReq_RA2LTCA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  strx509cert_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgReversePsnymResolutionReq_RA2LTCA)
}
msgReversePsnymResolutionReq_RA2LTCA::msgReversePsnymResolutionReq_RA2LTCA(const msgReversePsnymResolutionReq_RA2LTCA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      strx509cert_(from.strx509cert_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&inonce_, &from.inonce_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&inonce_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgReversePsnymResolutionReq_RA2LTCA)
}

void msgReversePsnymResolutionReq_RA2LTCA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgReversePsnymResolutionReq_RA2LTCA_Interfaces_2eproto.base);
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stsign_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(stsign_));
  inonce_ = -1;
  ireqtype_ = -1;
  inoofx509certtoberesolved_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgReversePsnymResolutionReq_RA2LTCA::~msgReversePsnymResolutionReq_RA2LTCA() {
  // @@protoc_insertion_point(destructor:interfaces.msgReversePsnymResolutionReq_RA2LTCA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgReversePsnymResolutionReq_RA2LTCA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgReversePsnymResolutionReq_RA2LTCA::ArenaDtor(void* object) {
  msgReversePsnymResolutionReq_RA2LTCA* _this = reinterpret_cast< msgReversePsnymResolutionReq_RA2LTCA* >(object);
  (void)_this;
}
void msgReversePsnymResolutionReq_RA2LTCA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgReversePsnymResolutionReq_RA2LTCA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgReversePsnymResolutionReq_RA2LTCA& msgReversePsnymResolutionReq_RA2LTCA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgReversePsnymResolutionReq_RA2LTCA_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgReversePsnymResolutionReq_RA2LTCA::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgReversePsnymResolutionReq_RA2LTCA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strx509cert_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
    inonce_ = -1;
    ireqtype_ = -1;
    inoofx509certtoberesolved_ = -1;
    ttimestamp_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgReversePsnymResolutionReq_RA2LTCA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNoOfX509CertToBeResolved = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_inoofx509certtoberesolved(&has_bits);
          inoofx509certtoberesolved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string strX509Cert = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_strx509cert();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgReversePsnymResolutionReq_RA2LTCA.strX509Cert");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgReversePsnymResolutionReq_RA2LTCA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgReversePsnymResolutionReq_RA2LTCA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required int32 iNoOfX509CertToBeResolved = 3 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_inoofx509certtoberesolved(), target);
  }

  // repeated string strX509Cert = 4;
  for (int i = 0, n = this->_internal_strx509cert_size(); i < n; i++) {
    const auto& s = this->_internal_strx509cert(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgReversePsnymResolutionReq_RA2LTCA.strX509Cert");
    target = stream->WriteString(4, s, target);
  }

  // required int32 iNonce = 5 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 6 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_ttimestamp(), target);
  }

  // optional .interfaces.msgSignature stSign = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgReversePsnymResolutionReq_RA2LTCA)
  return target;
}

size_t msgReversePsnymResolutionReq_RA2LTCA::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgReversePsnymResolutionReq_RA2LTCA)
  size_t total_size = 0;

  if (_internal_has_inonce()) {
    // required int32 iNonce = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_inoofx509certtoberesolved()) {
    // required int32 iNoOfX509CertToBeResolved = 3 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inoofx509certtoberesolved());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgReversePsnymResolutionReq_RA2LTCA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgReversePsnymResolutionReq_RA2LTCA)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003c) ^ 0x0000003c) == 0) {  // All required fields are present.
    // required int32 iNonce = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iNoOfX509CertToBeResolved = 3 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inoofx509certtoberesolved());

    // required int64 tTimeStamp = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string strX509Cert = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(strx509cert_.size());
  for (int i = 0, n = strx509cert_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      strx509cert_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .interfaces.msgSignerInfo stSigner = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsigner_);
    }

    // optional .interfaces.msgSignature stSign = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsign_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgReversePsnymResolutionReq_RA2LTCA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgReversePsnymResolutionReq_RA2LTCA)
  GOOGLE_DCHECK_NE(&from, this);
  const msgReversePsnymResolutionReq_RA2LTCA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgReversePsnymResolutionReq_RA2LTCA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgReversePsnymResolutionReq_RA2LTCA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgReversePsnymResolutionReq_RA2LTCA)
    MergeFrom(*source);
  }
}

void msgReversePsnymResolutionReq_RA2LTCA::MergeFrom(const msgReversePsnymResolutionReq_RA2LTCA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgReversePsnymResolutionReq_RA2LTCA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  strx509cert_.MergeFrom(from.strx509cert_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000004u) {
      inonce_ = from.inonce_;
    }
    if (cached_has_bits & 0x00000008u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000010u) {
      inoofx509certtoberesolved_ = from.inoofx509certtoberesolved_;
    }
    if (cached_has_bits & 0x00000020u) {
      ttimestamp_ = from.ttimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgReversePsnymResolutionReq_RA2LTCA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgReversePsnymResolutionReq_RA2LTCA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgReversePsnymResolutionReq_RA2LTCA::CopyFrom(const msgReversePsnymResolutionReq_RA2LTCA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgReversePsnymResolutionReq_RA2LTCA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgReversePsnymResolutionReq_RA2LTCA::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  return true;
}

void msgReversePsnymResolutionReq_RA2LTCA::InternalSwap(msgReversePsnymResolutionReq_RA2LTCA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strx509cert_.InternalSwap(&other->strx509cert_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgReversePsnymResolutionReq_RA2LTCA, stsign_)
      + sizeof(msgReversePsnymResolutionReq_RA2LTCA::stsign_)
      - PROTOBUF_FIELD_OFFSET(msgReversePsnymResolutionReq_RA2LTCA, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(inonce_, other->inonce_);
  swap(ireqtype_, other->ireqtype_);
  swap(inoofx509certtoberesolved_, other->inoofx509certtoberesolved_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgReversePsnymResolutionReq_RA2LTCA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgReversePsnymResolutionRes_LTCA2RA_msgTicket::InitAsDefaultInstance() {
}
class msgReversePsnymResolutionRes_LTCA2RA_msgTicket::_Internal {
 public:
  using HasBits = decltype(std::declval<msgReversePsnymResolutionRes_LTCA2RA_msgTicket>()._has_bits_);
  static void set_has_strticketserialno(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_strticket(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

msgReversePsnymResolutionRes_LTCA2RA_msgTicket::msgReversePsnymResolutionRes_LTCA2RA_msgTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicket)
}
msgReversePsnymResolutionRes_LTCA2RA_msgTicket::msgReversePsnymResolutionRes_LTCA2RA_msgTicket(const msgReversePsnymResolutionRes_LTCA2RA_msgTicket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strticketserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strticketserialno()) {
    strticketserialno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strticketserialno(),
      GetArena());
  }
  strticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strticket()) {
    strticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strticket(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicket)
}

void msgReversePsnymResolutionRes_LTCA2RA_msgTicket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgReversePsnymResolutionRes_LTCA2RA_msgTicket_Interfaces_2eproto.base);
  strticketserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

msgReversePsnymResolutionRes_LTCA2RA_msgTicket::~msgReversePsnymResolutionRes_LTCA2RA_msgTicket() {
  // @@protoc_insertion_point(destructor:interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgReversePsnymResolutionRes_LTCA2RA_msgTicket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strticketserialno_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msgReversePsnymResolutionRes_LTCA2RA_msgTicket::ArenaDtor(void* object) {
  msgReversePsnymResolutionRes_LTCA2RA_msgTicket* _this = reinterpret_cast< msgReversePsnymResolutionRes_LTCA2RA_msgTicket* >(object);
  (void)_this;
}
void msgReversePsnymResolutionRes_LTCA2RA_msgTicket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgReversePsnymResolutionRes_LTCA2RA_msgTicket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgReversePsnymResolutionRes_LTCA2RA_msgTicket& msgReversePsnymResolutionRes_LTCA2RA_msgTicket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgReversePsnymResolutionRes_LTCA2RA_msgTicket_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgReversePsnymResolutionRes_LTCA2RA_msgTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      strticketserialno_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      strticket_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgReversePsnymResolutionRes_LTCA2RA_msgTicket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string strTicketSerialNo = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_strticketserialno();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicket.strTicketSerialNo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strTicket = 2 [default = ""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_strticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicket.strTicket");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgReversePsnymResolutionRes_LTCA2RA_msgTicket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string strTicketSerialNo = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strticketserialno().data(), static_cast<int>(this->_internal_strticketserialno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicket.strTicketSerialNo");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_strticketserialno(), target);
  }

  // required string strTicket = 2 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strticket().data(), static_cast<int>(this->_internal_strticket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicket.strTicket");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_strticket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicket)
  return target;
}

size_t msgReversePsnymResolutionRes_LTCA2RA_msgTicket::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicket)
  size_t total_size = 0;

  if (_internal_has_strticketserialno()) {
    // required string strTicketSerialNo = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticketserialno());
  }

  if (_internal_has_strticket()) {
    // required string strTicket = 2 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticket());
  }

  return total_size;
}
size_t msgReversePsnymResolutionRes_LTCA2RA_msgTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicket)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string strTicketSerialNo = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticketserialno());

    // required string strTicket = 2 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticket());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgReversePsnymResolutionRes_LTCA2RA_msgTicket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const msgReversePsnymResolutionRes_LTCA2RA_msgTicket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgReversePsnymResolutionRes_LTCA2RA_msgTicket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicket)
    MergeFrom(*source);
  }
}

void msgReversePsnymResolutionRes_LTCA2RA_msgTicket::MergeFrom(const msgReversePsnymResolutionRes_LTCA2RA_msgTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strticketserialno(from._internal_strticketserialno());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_strticket(from._internal_strticket());
    }
  }
}

void msgReversePsnymResolutionRes_LTCA2RA_msgTicket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgReversePsnymResolutionRes_LTCA2RA_msgTicket::CopyFrom(const msgReversePsnymResolutionRes_LTCA2RA_msgTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgReversePsnymResolutionRes_LTCA2RA_msgTicket::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void msgReversePsnymResolutionRes_LTCA2RA_msgTicket::InternalSwap(msgReversePsnymResolutionRes_LTCA2RA_msgTicket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strticketserialno_.Swap(&other->strticketserialno_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strticket_.Swap(&other->strticket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata msgReversePsnymResolutionRes_LTCA2RA_msgTicket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution::InitAsDefaultInstance() {
}
class msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution::_Internal {
 public:
  using HasBits = decltype(std::declval<msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution>()._has_bits_);
  static void set_has_strvehx509certserialno(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inoofresolvedticket(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution::msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pstticketinfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicketResolution)
}
msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution::msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution(const msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pstticketinfo_(from.pstticketinfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strvehx509certserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strvehx509certserialno()) {
    strvehx509certserialno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strvehx509certserialno(),
      GetArena());
  }
  inoofresolvedticket_ = from.inoofresolvedticket_;
  // @@protoc_insertion_point(copy_constructor:interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicketResolution)
}

void msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution_Interfaces_2eproto.base);
  strvehx509certserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inoofresolvedticket_ = -1;
}

msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution::~msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution() {
  // @@protoc_insertion_point(destructor:interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicketResolution)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strvehx509certserialno_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution::ArenaDtor(void* object) {
  msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution* _this = reinterpret_cast< msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution* >(object);
  (void)_this;
}
void msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution& msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicketResolution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pstticketinfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      strvehx509certserialno_.ClearNonDefaultToEmpty();
    }
    inoofresolvedticket_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string strVehX509CertSerialNo = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_strvehx509certserialno();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicketResolution.strVehX509CertSerialNo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNoOfResolvedTicket = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_inoofresolvedticket(&has_bits);
          inoofresolvedticket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicket pstTicketInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pstticketinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicketResolution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string strVehX509CertSerialNo = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strvehx509certserialno().data(), static_cast<int>(this->_internal_strvehx509certserialno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicketResolution.strVehX509CertSerialNo");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_strvehx509certserialno(), target);
  }

  // required int32 iNoOfResolvedTicket = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_inoofresolvedticket(), target);
  }

  // repeated .interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicket pstTicketInfo = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pstticketinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_pstticketinfo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicketResolution)
  return target;
}

size_t msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicketResolution)
  size_t total_size = 0;

  if (_internal_has_strvehx509certserialno()) {
    // required string strVehX509CertSerialNo = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strvehx509certserialno());
  }

  if (_internal_has_inoofresolvedticket()) {
    // required int32 iNoOfResolvedTicket = 2 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inoofresolvedticket());
  }

  return total_size;
}
size_t msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicketResolution)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string strVehX509CertSerialNo = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strvehx509certserialno());

    // required int32 iNoOfResolvedTicket = 2 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inoofresolvedticket());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicket pstTicketInfo = 3;
  total_size += 1UL * this->_internal_pstticketinfo_size();
  for (const auto& msg : this->pstticketinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicketResolution)
  GOOGLE_DCHECK_NE(&from, this);
  const msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicketResolution)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicketResolution)
    MergeFrom(*source);
  }
}

void msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution::MergeFrom(const msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicketResolution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pstticketinfo_.MergeFrom(from.pstticketinfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strvehx509certserialno(from._internal_strvehx509certserialno());
    }
    if (cached_has_bits & 0x00000002u) {
      inoofresolvedticket_ = from.inoofresolvedticket_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicketResolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution::CopyFrom(const msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicketResolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pstticketinfo_)) return false;
  return true;
}

void msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution::InternalSwap(msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pstticketinfo_.InternalSwap(&other->pstticketinfo_);
  strvehx509certserialno_.Swap(&other->strvehx509certserialno_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(inoofresolvedticket_, other->inoofresolvedticket_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgReversePsnymResolutionRes_LTCA2RA::InitAsDefaultInstance() {
  ::interfaces::_msgReversePsnymResolutionRes_LTCA2RA_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgReversePsnymResolutionRes_LTCA2RA_default_instance_._instance.get_mutable()->sterrinfo_ = const_cast< ::interfaces::msgError*>(
      ::interfaces::msgError::internal_default_instance());
  ::interfaces::_msgReversePsnymResolutionRes_LTCA2RA_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgReversePsnymResolutionRes_LTCA2RA::_Internal {
 public:
  using HasBits = decltype(std::declval<msgReversePsnymResolutionRes_LTCA2RA>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgReversePsnymResolutionRes_LTCA2RA* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inoofx509certtoberesolved(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::interfaces::msgError& sterrinfo(const msgReversePsnymResolutionRes_LTCA2RA* msg);
  static void set_has_sterrinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::interfaces::msgSignature& stsign(const msgReversePsnymResolutionRes_LTCA2RA* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007a) ^ 0x0000007a) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgReversePsnymResolutionRes_LTCA2RA::_Internal::stsigner(const msgReversePsnymResolutionRes_LTCA2RA* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgError&
msgReversePsnymResolutionRes_LTCA2RA::_Internal::sterrinfo(const msgReversePsnymResolutionRes_LTCA2RA* msg) {
  return *msg->sterrinfo_;
}
const ::interfaces::msgSignature&
msgReversePsnymResolutionRes_LTCA2RA::_Internal::stsign(const msgReversePsnymResolutionRes_LTCA2RA* msg) {
  return *msg->stsign_;
}
msgReversePsnymResolutionRes_LTCA2RA::msgReversePsnymResolutionRes_LTCA2RA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pstticketresolutioninfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgReversePsnymResolutionRes_LTCA2RA)
}
msgReversePsnymResolutionRes_LTCA2RA::msgReversePsnymResolutionRes_LTCA2RA(const msgReversePsnymResolutionRes_LTCA2RA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pstticketresolutioninfo_(from.pstticketresolutioninfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_sterrinfo()) {
    sterrinfo_ = new ::interfaces::msgError(*from.sterrinfo_);
  } else {
    sterrinfo_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&inonce_, &from.inonce_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&inonce_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgReversePsnymResolutionRes_LTCA2RA)
}

void msgReversePsnymResolutionRes_LTCA2RA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgReversePsnymResolutionRes_LTCA2RA_Interfaces_2eproto.base);
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stsign_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(stsign_));
  inonce_ = -1;
  ireqtype_ = -1;
  inoofx509certtoberesolved_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgReversePsnymResolutionRes_LTCA2RA::~msgReversePsnymResolutionRes_LTCA2RA() {
  // @@protoc_insertion_point(destructor:interfaces.msgReversePsnymResolutionRes_LTCA2RA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgReversePsnymResolutionRes_LTCA2RA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete sterrinfo_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgReversePsnymResolutionRes_LTCA2RA::ArenaDtor(void* object) {
  msgReversePsnymResolutionRes_LTCA2RA* _this = reinterpret_cast< msgReversePsnymResolutionRes_LTCA2RA* >(object);
  (void)_this;
}
void msgReversePsnymResolutionRes_LTCA2RA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgReversePsnymResolutionRes_LTCA2RA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgReversePsnymResolutionRes_LTCA2RA& msgReversePsnymResolutionRes_LTCA2RA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgReversePsnymResolutionRes_LTCA2RA_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgReversePsnymResolutionRes_LTCA2RA::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgReversePsnymResolutionRes_LTCA2RA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pstticketresolutioninfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sterrinfo_ != nullptr);
      sterrinfo_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
    inonce_ = -1;
    ireqtype_ = -1;
    inoofx509certtoberesolved_ = -1;
    ttimestamp_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgReversePsnymResolutionRes_LTCA2RA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNoOfX509CertToBeResolved = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_inoofx509certtoberesolved(&has_bits);
          inoofx509certtoberesolved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicketResolution pstTicketResolutionInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pstticketresolutioninfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgError stErrInfo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_sterrinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgReversePsnymResolutionRes_LTCA2RA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgReversePsnymResolutionRes_LTCA2RA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required int32 iNoOfX509CertToBeResolved = 3 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_inoofx509certtoberesolved(), target);
  }

  // repeated .interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicketResolution pstTicketResolutionInfo = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pstticketresolutioninfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_pstticketresolutioninfo(i), target, stream);
  }

  // required int32 iNonce = 5 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 6 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_ttimestamp(), target);
  }

  // required .interfaces.msgError stErrInfo = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::sterrinfo(this), target, stream);
  }

  // optional .interfaces.msgSignature stSign = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgReversePsnymResolutionRes_LTCA2RA)
  return target;
}

size_t msgReversePsnymResolutionRes_LTCA2RA::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgReversePsnymResolutionRes_LTCA2RA)
  size_t total_size = 0;

  if (_internal_has_sterrinfo()) {
    // required .interfaces.msgError stErrInfo = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_inoofx509certtoberesolved()) {
    // required int32 iNoOfX509CertToBeResolved = 3 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inoofx509certtoberesolved());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgReversePsnymResolutionRes_LTCA2RA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgReversePsnymResolutionRes_LTCA2RA)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007a) ^ 0x0000007a) == 0) {  // All required fields are present.
    // required .interfaces.msgError stErrInfo = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);

    // required int32 iNonce = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iNoOfX509CertToBeResolved = 3 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inoofx509certtoberesolved());

    // required int64 tTimeStamp = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .interfaces.msgReversePsnymResolutionRes_LTCA2RA.msgTicketResolution pstTicketResolutionInfo = 4;
  total_size += 1UL * this->_internal_pstticketresolutioninfo_size();
  for (const auto& msg : this->pstticketresolutioninfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsigner_);
  }

  // optional .interfaces.msgSignature stSign = 8;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsign_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgReversePsnymResolutionRes_LTCA2RA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgReversePsnymResolutionRes_LTCA2RA)
  GOOGLE_DCHECK_NE(&from, this);
  const msgReversePsnymResolutionRes_LTCA2RA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgReversePsnymResolutionRes_LTCA2RA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgReversePsnymResolutionRes_LTCA2RA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgReversePsnymResolutionRes_LTCA2RA)
    MergeFrom(*source);
  }
}

void msgReversePsnymResolutionRes_LTCA2RA::MergeFrom(const msgReversePsnymResolutionRes_LTCA2RA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgReversePsnymResolutionRes_LTCA2RA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pstticketresolutioninfo_.MergeFrom(from.pstticketresolutioninfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sterrinfo()->::interfaces::msgError::MergeFrom(from._internal_sterrinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000008u) {
      inonce_ = from.inonce_;
    }
    if (cached_has_bits & 0x00000010u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000020u) {
      inoofx509certtoberesolved_ = from.inoofx509certtoberesolved_;
    }
    if (cached_has_bits & 0x00000040u) {
      ttimestamp_ = from.ttimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgReversePsnymResolutionRes_LTCA2RA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgReversePsnymResolutionRes_LTCA2RA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgReversePsnymResolutionRes_LTCA2RA::CopyFrom(const msgReversePsnymResolutionRes_LTCA2RA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgReversePsnymResolutionRes_LTCA2RA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgReversePsnymResolutionRes_LTCA2RA::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pstticketresolutioninfo_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  if (_internal_has_sterrinfo()) {
    if (!sterrinfo_->IsInitialized()) return false;
  }
  return true;
}

void msgReversePsnymResolutionRes_LTCA2RA::InternalSwap(msgReversePsnymResolutionRes_LTCA2RA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pstticketresolutioninfo_.InternalSwap(&other->pstticketresolutioninfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgReversePsnymResolutionRes_LTCA2RA, stsign_)
      + sizeof(msgReversePsnymResolutionRes_LTCA2RA::stsign_)
      - PROTOBUF_FIELD_OFFSET(msgReversePsnymResolutionRes_LTCA2RA, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(inonce_, other->inonce_);
  swap(ireqtype_, other->ireqtype_);
  swap(inoofx509certtoberesolved_, other->inoofx509certtoberesolved_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgReversePsnymResolutionRes_LTCA2RA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgReversePsnymResolutionReq_RA2PCA_msgTicket::InitAsDefaultInstance() {
}
class msgReversePsnymResolutionReq_RA2PCA_msgTicket::_Internal {
 public:
  using HasBits = decltype(std::declval<msgReversePsnymResolutionReq_RA2PCA_msgTicket>()._has_bits_);
  static void set_has_strticketserialno(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_strticket(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

msgReversePsnymResolutionReq_RA2PCA_msgTicket::msgReversePsnymResolutionReq_RA2PCA_msgTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicket)
}
msgReversePsnymResolutionReq_RA2PCA_msgTicket::msgReversePsnymResolutionReq_RA2PCA_msgTicket(const msgReversePsnymResolutionReq_RA2PCA_msgTicket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strticketserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strticketserialno()) {
    strticketserialno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strticketserialno(),
      GetArena());
  }
  strticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strticket()) {
    strticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strticket(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicket)
}

void msgReversePsnymResolutionReq_RA2PCA_msgTicket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgReversePsnymResolutionReq_RA2PCA_msgTicket_Interfaces_2eproto.base);
  strticketserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

msgReversePsnymResolutionReq_RA2PCA_msgTicket::~msgReversePsnymResolutionReq_RA2PCA_msgTicket() {
  // @@protoc_insertion_point(destructor:interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgReversePsnymResolutionReq_RA2PCA_msgTicket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strticketserialno_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msgReversePsnymResolutionReq_RA2PCA_msgTicket::ArenaDtor(void* object) {
  msgReversePsnymResolutionReq_RA2PCA_msgTicket* _this = reinterpret_cast< msgReversePsnymResolutionReq_RA2PCA_msgTicket* >(object);
  (void)_this;
}
void msgReversePsnymResolutionReq_RA2PCA_msgTicket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgReversePsnymResolutionReq_RA2PCA_msgTicket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgReversePsnymResolutionReq_RA2PCA_msgTicket& msgReversePsnymResolutionReq_RA2PCA_msgTicket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgReversePsnymResolutionReq_RA2PCA_msgTicket_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgReversePsnymResolutionReq_RA2PCA_msgTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      strticketserialno_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      strticket_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgReversePsnymResolutionReq_RA2PCA_msgTicket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string strTicketSerialNo = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_strticketserialno();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicket.strTicketSerialNo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strTicket = 2 [default = ""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_strticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicket.strTicket");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgReversePsnymResolutionReq_RA2PCA_msgTicket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string strTicketSerialNo = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strticketserialno().data(), static_cast<int>(this->_internal_strticketserialno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicket.strTicketSerialNo");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_strticketserialno(), target);
  }

  // required string strTicket = 2 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strticket().data(), static_cast<int>(this->_internal_strticket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicket.strTicket");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_strticket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicket)
  return target;
}

size_t msgReversePsnymResolutionReq_RA2PCA_msgTicket::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicket)
  size_t total_size = 0;

  if (_internal_has_strticketserialno()) {
    // required string strTicketSerialNo = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticketserialno());
  }

  if (_internal_has_strticket()) {
    // required string strTicket = 2 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticket());
  }

  return total_size;
}
size_t msgReversePsnymResolutionReq_RA2PCA_msgTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicket)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string strTicketSerialNo = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticketserialno());

    // required string strTicket = 2 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticket());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgReversePsnymResolutionReq_RA2PCA_msgTicket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const msgReversePsnymResolutionReq_RA2PCA_msgTicket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgReversePsnymResolutionReq_RA2PCA_msgTicket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicket)
    MergeFrom(*source);
  }
}

void msgReversePsnymResolutionReq_RA2PCA_msgTicket::MergeFrom(const msgReversePsnymResolutionReq_RA2PCA_msgTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strticketserialno(from._internal_strticketserialno());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_strticket(from._internal_strticket());
    }
  }
}

void msgReversePsnymResolutionReq_RA2PCA_msgTicket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgReversePsnymResolutionReq_RA2PCA_msgTicket::CopyFrom(const msgReversePsnymResolutionReq_RA2PCA_msgTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgReversePsnymResolutionReq_RA2PCA_msgTicket::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void msgReversePsnymResolutionReq_RA2PCA_msgTicket::InternalSwap(msgReversePsnymResolutionReq_RA2PCA_msgTicket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strticketserialno_.Swap(&other->strticketserialno_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strticket_.Swap(&other->strticket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata msgReversePsnymResolutionReq_RA2PCA_msgTicket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution::InitAsDefaultInstance() {
}
class msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution::_Internal {
 public:
  using HasBits = decltype(std::declval<msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution>()._has_bits_);
  static void set_has_inoofresolvedticket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution::msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pstticketinfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicketResolution)
}
msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution::msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution(const msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pstticketinfo_(from.pstticketinfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  inoofresolvedticket_ = from.inoofresolvedticket_;
  // @@protoc_insertion_point(copy_constructor:interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicketResolution)
}

void msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution_Interfaces_2eproto.base);
  inoofresolvedticket_ = -1;
}

msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution::~msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution() {
  // @@protoc_insertion_point(destructor:interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicketResolution)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution::ArenaDtor(void* object) {
  msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution* _this = reinterpret_cast< msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution* >(object);
  (void)_this;
}
void msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution& msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicketResolution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pstticketinfo_.Clear();
  inoofresolvedticket_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iNoOfResolvedTicket = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_inoofresolvedticket(&has_bits);
          inoofresolvedticket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicket pstTicketInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pstticketinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicketResolution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iNoOfResolvedTicket = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_inoofresolvedticket(), target);
  }

  // repeated .interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicket pstTicketInfo = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pstticketinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_pstticketinfo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicketResolution)
  return target;
}

size_t msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicketResolution)
  size_t total_size = 0;

  // required int32 iNoOfResolvedTicket = 1 [default = -1];
  if (_internal_has_inoofresolvedticket()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inoofresolvedticket());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicket pstTicketInfo = 2;
  total_size += 1UL * this->_internal_pstticketinfo_size();
  for (const auto& msg : this->pstticketinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicketResolution)
  GOOGLE_DCHECK_NE(&from, this);
  const msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicketResolution)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicketResolution)
    MergeFrom(*source);
  }
}

void msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution::MergeFrom(const msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicketResolution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pstticketinfo_.MergeFrom(from.pstticketinfo_);
  if (from._internal_has_inoofresolvedticket()) {
    _internal_set_inoofresolvedticket(from._internal_inoofresolvedticket());
  }
}

void msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicketResolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution::CopyFrom(const msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicketResolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pstticketinfo_)) return false;
  return true;
}

void msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution::InternalSwap(msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pstticketinfo_.InternalSwap(&other->pstticketinfo_);
  swap(inoofresolvedticket_, other->inoofresolvedticket_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgReversePsnymResolutionReq_RA2PCA::InitAsDefaultInstance() {
  ::interfaces::_msgReversePsnymResolutionReq_RA2PCA_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgReversePsnymResolutionReq_RA2PCA_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgReversePsnymResolutionReq_RA2PCA::_Internal {
 public:
  using HasBits = decltype(std::declval<msgReversePsnymResolutionReq_RA2PCA>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgReversePsnymResolutionReq_RA2PCA* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inoofx509certtoberesolved(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::interfaces::msgSignature& stsign(const msgReversePsnymResolutionReq_RA2PCA* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003c) ^ 0x0000003c) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgReversePsnymResolutionReq_RA2PCA::_Internal::stsigner(const msgReversePsnymResolutionReq_RA2PCA* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgSignature&
msgReversePsnymResolutionReq_RA2PCA::_Internal::stsign(const msgReversePsnymResolutionReq_RA2PCA* msg) {
  return *msg->stsign_;
}
msgReversePsnymResolutionReq_RA2PCA::msgReversePsnymResolutionReq_RA2PCA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pstticketresolutioninfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgReversePsnymResolutionReq_RA2PCA)
}
msgReversePsnymResolutionReq_RA2PCA::msgReversePsnymResolutionReq_RA2PCA(const msgReversePsnymResolutionReq_RA2PCA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pstticketresolutioninfo_(from.pstticketresolutioninfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&inonce_, &from.inonce_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&inonce_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgReversePsnymResolutionReq_RA2PCA)
}

void msgReversePsnymResolutionReq_RA2PCA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgReversePsnymResolutionReq_RA2PCA_Interfaces_2eproto.base);
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stsign_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(stsign_));
  inonce_ = -1;
  ireqtype_ = -1;
  inoofx509certtoberesolved_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgReversePsnymResolutionReq_RA2PCA::~msgReversePsnymResolutionReq_RA2PCA() {
  // @@protoc_insertion_point(destructor:interfaces.msgReversePsnymResolutionReq_RA2PCA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgReversePsnymResolutionReq_RA2PCA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgReversePsnymResolutionReq_RA2PCA::ArenaDtor(void* object) {
  msgReversePsnymResolutionReq_RA2PCA* _this = reinterpret_cast< msgReversePsnymResolutionReq_RA2PCA* >(object);
  (void)_this;
}
void msgReversePsnymResolutionReq_RA2PCA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgReversePsnymResolutionReq_RA2PCA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgReversePsnymResolutionReq_RA2PCA& msgReversePsnymResolutionReq_RA2PCA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgReversePsnymResolutionReq_RA2PCA_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgReversePsnymResolutionReq_RA2PCA::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgReversePsnymResolutionReq_RA2PCA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pstticketresolutioninfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
    inonce_ = -1;
    ireqtype_ = -1;
    inoofx509certtoberesolved_ = -1;
    ttimestamp_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgReversePsnymResolutionReq_RA2PCA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNoOfX509CertToBeResolved = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_inoofx509certtoberesolved(&has_bits);
          inoofx509certtoberesolved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicketResolution pstTicketResolutionInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pstticketresolutioninfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgReversePsnymResolutionReq_RA2PCA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgReversePsnymResolutionReq_RA2PCA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required int32 iNoOfX509CertToBeResolved = 3 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_inoofx509certtoberesolved(), target);
  }

  // repeated .interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicketResolution pstTicketResolutionInfo = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pstticketresolutioninfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_pstticketresolutioninfo(i), target, stream);
  }

  // required int32 iNonce = 5 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 6 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_ttimestamp(), target);
  }

  // optional .interfaces.msgSignature stSign = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgReversePsnymResolutionReq_RA2PCA)
  return target;
}

size_t msgReversePsnymResolutionReq_RA2PCA::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgReversePsnymResolutionReq_RA2PCA)
  size_t total_size = 0;

  if (_internal_has_inonce()) {
    // required int32 iNonce = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_inoofx509certtoberesolved()) {
    // required int32 iNoOfX509CertToBeResolved = 3 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inoofx509certtoberesolved());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgReversePsnymResolutionReq_RA2PCA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgReversePsnymResolutionReq_RA2PCA)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003c) ^ 0x0000003c) == 0) {  // All required fields are present.
    // required int32 iNonce = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iNoOfX509CertToBeResolved = 3 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inoofx509certtoberesolved());

    // required int64 tTimeStamp = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .interfaces.msgReversePsnymResolutionReq_RA2PCA.msgTicketResolution pstTicketResolutionInfo = 4;
  total_size += 1UL * this->_internal_pstticketresolutioninfo_size();
  for (const auto& msg : this->pstticketresolutioninfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .interfaces.msgSignerInfo stSigner = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsigner_);
    }

    // optional .interfaces.msgSignature stSign = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsign_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgReversePsnymResolutionReq_RA2PCA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgReversePsnymResolutionReq_RA2PCA)
  GOOGLE_DCHECK_NE(&from, this);
  const msgReversePsnymResolutionReq_RA2PCA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgReversePsnymResolutionReq_RA2PCA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgReversePsnymResolutionReq_RA2PCA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgReversePsnymResolutionReq_RA2PCA)
    MergeFrom(*source);
  }
}

void msgReversePsnymResolutionReq_RA2PCA::MergeFrom(const msgReversePsnymResolutionReq_RA2PCA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgReversePsnymResolutionReq_RA2PCA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pstticketresolutioninfo_.MergeFrom(from.pstticketresolutioninfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000004u) {
      inonce_ = from.inonce_;
    }
    if (cached_has_bits & 0x00000008u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000010u) {
      inoofx509certtoberesolved_ = from.inoofx509certtoberesolved_;
    }
    if (cached_has_bits & 0x00000020u) {
      ttimestamp_ = from.ttimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgReversePsnymResolutionReq_RA2PCA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgReversePsnymResolutionReq_RA2PCA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgReversePsnymResolutionReq_RA2PCA::CopyFrom(const msgReversePsnymResolutionReq_RA2PCA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgReversePsnymResolutionReq_RA2PCA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgReversePsnymResolutionReq_RA2PCA::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pstticketresolutioninfo_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  return true;
}

void msgReversePsnymResolutionReq_RA2PCA::InternalSwap(msgReversePsnymResolutionReq_RA2PCA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pstticketresolutioninfo_.InternalSwap(&other->pstticketresolutioninfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgReversePsnymResolutionReq_RA2PCA, stsign_)
      + sizeof(msgReversePsnymResolutionReq_RA2PCA::stsign_)
      - PROTOBUF_FIELD_OFFSET(msgReversePsnymResolutionReq_RA2PCA, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(inonce_, other->inonce_);
  swap(ireqtype_, other->ireqtype_);
  swap(inoofx509certtoberesolved_, other->inoofx509certtoberesolved_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgReversePsnymResolutionReq_RA2PCA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgReversePsnymResolutionRes_PCA2RA_msgPsnym::InitAsDefaultInstance() {
}
class msgReversePsnymResolutionRes_PCA2RA_msgPsnym::_Internal {
 public:
  using HasBits = decltype(std::declval<msgReversePsnymResolutionRes_PCA2RA_msgPsnym>()._has_bits_);
  static void set_has_strticketserialno(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

msgReversePsnymResolutionRes_PCA2RA_msgPsnym::msgReversePsnymResolutionRes_PCA2RA_msgPsnym(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  strpsnym_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnym)
}
msgReversePsnymResolutionRes_PCA2RA_msgPsnym::msgReversePsnymResolutionRes_PCA2RA_msgPsnym(const msgReversePsnymResolutionRes_PCA2RA_msgPsnym& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      strpsnym_(from.strpsnym_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strticketserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strticketserialno()) {
    strticketserialno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strticketserialno(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnym)
}

void msgReversePsnymResolutionRes_PCA2RA_msgPsnym::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgReversePsnymResolutionRes_PCA2RA_msgPsnym_Interfaces_2eproto.base);
  strticketserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

msgReversePsnymResolutionRes_PCA2RA_msgPsnym::~msgReversePsnymResolutionRes_PCA2RA_msgPsnym() {
  // @@protoc_insertion_point(destructor:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnym)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgReversePsnymResolutionRes_PCA2RA_msgPsnym::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strticketserialno_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msgReversePsnymResolutionRes_PCA2RA_msgPsnym::ArenaDtor(void* object) {
  msgReversePsnymResolutionRes_PCA2RA_msgPsnym* _this = reinterpret_cast< msgReversePsnymResolutionRes_PCA2RA_msgPsnym* >(object);
  (void)_this;
}
void msgReversePsnymResolutionRes_PCA2RA_msgPsnym::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgReversePsnymResolutionRes_PCA2RA_msgPsnym::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgReversePsnymResolutionRes_PCA2RA_msgPsnym& msgReversePsnymResolutionRes_PCA2RA_msgPsnym::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgReversePsnymResolutionRes_PCA2RA_msgPsnym_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgReversePsnymResolutionRes_PCA2RA_msgPsnym::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnym)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strpsnym_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    strticketserialno_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgReversePsnymResolutionRes_PCA2RA_msgPsnym::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string strTicketSerialNo = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_strticketserialno();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnym.strTicketSerialNo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string strPsnym = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_strpsnym();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnym.strPsnym");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgReversePsnymResolutionRes_PCA2RA_msgPsnym::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnym)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string strTicketSerialNo = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strticketserialno().data(), static_cast<int>(this->_internal_strticketserialno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnym.strTicketSerialNo");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_strticketserialno(), target);
  }

  // repeated string strPsnym = 2;
  for (int i = 0, n = this->_internal_strpsnym_size(); i < n; i++) {
    const auto& s = this->_internal_strpsnym(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnym.strPsnym");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnym)
  return target;
}

size_t msgReversePsnymResolutionRes_PCA2RA_msgPsnym::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnym)
  size_t total_size = 0;

  // required string strTicketSerialNo = 1 [default = ""];
  if (_internal_has_strticketserialno()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticketserialno());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string strPsnym = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(strpsnym_.size());
  for (int i = 0, n = strpsnym_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      strpsnym_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgReversePsnymResolutionRes_PCA2RA_msgPsnym::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnym)
  GOOGLE_DCHECK_NE(&from, this);
  const msgReversePsnymResolutionRes_PCA2RA_msgPsnym* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgReversePsnymResolutionRes_PCA2RA_msgPsnym>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnym)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnym)
    MergeFrom(*source);
  }
}

void msgReversePsnymResolutionRes_PCA2RA_msgPsnym::MergeFrom(const msgReversePsnymResolutionRes_PCA2RA_msgPsnym& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnym)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  strpsnym_.MergeFrom(from.strpsnym_);
  if (from._internal_has_strticketserialno()) {
    _internal_set_strticketserialno(from._internal_strticketserialno());
  }
}

void msgReversePsnymResolutionRes_PCA2RA_msgPsnym::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnym)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgReversePsnymResolutionRes_PCA2RA_msgPsnym::CopyFrom(const msgReversePsnymResolutionRes_PCA2RA_msgPsnym& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnym)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgReversePsnymResolutionRes_PCA2RA_msgPsnym::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void msgReversePsnymResolutionRes_PCA2RA_msgPsnym::InternalSwap(msgReversePsnymResolutionRes_PCA2RA_msgPsnym* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strpsnym_.InternalSwap(&other->strpsnym_);
  strticketserialno_.Swap(&other->strticketserialno_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata msgReversePsnymResolutionRes_PCA2RA_msgPsnym::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution::InitAsDefaultInstance() {
}
class msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution::_Internal {
 public:
  using HasBits = decltype(std::declval<msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution>()._has_bits_);
  static void set_has_inoofresolvedpsnyms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution::msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pstticketinfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgTicketResolution)
}
msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution::msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution(const msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pstticketinfo_(from.pstticketinfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  inoofresolvedpsnyms_ = from.inoofresolvedpsnyms_;
  // @@protoc_insertion_point(copy_constructor:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgTicketResolution)
}

void msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution_Interfaces_2eproto.base);
  inoofresolvedpsnyms_ = -1;
}

msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution::~msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution() {
  // @@protoc_insertion_point(destructor:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgTicketResolution)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution::ArenaDtor(void* object) {
  msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution* _this = reinterpret_cast< msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution* >(object);
  (void)_this;
}
void msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution& msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgTicketResolution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pstticketinfo_.Clear();
  inoofresolvedpsnyms_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iNoOfResolvedPsnyms = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_inoofresolvedpsnyms(&has_bits);
          inoofresolvedpsnyms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnym pstTicketInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pstticketinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgTicketResolution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iNoOfResolvedPsnyms = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_inoofresolvedpsnyms(), target);
  }

  // repeated .interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnym pstTicketInfo = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pstticketinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_pstticketinfo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgTicketResolution)
  return target;
}

size_t msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgTicketResolution)
  size_t total_size = 0;

  // required int32 iNoOfResolvedPsnyms = 1 [default = -1];
  if (_internal_has_inoofresolvedpsnyms()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inoofresolvedpsnyms());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnym pstTicketInfo = 2;
  total_size += 1UL * this->_internal_pstticketinfo_size();
  for (const auto& msg : this->pstticketinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgTicketResolution)
  GOOGLE_DCHECK_NE(&from, this);
  const msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgTicketResolution)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgTicketResolution)
    MergeFrom(*source);
  }
}

void msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution::MergeFrom(const msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgTicketResolution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pstticketinfo_.MergeFrom(from.pstticketinfo_);
  if (from._internal_has_inoofresolvedpsnyms()) {
    _internal_set_inoofresolvedpsnyms(from._internal_inoofresolvedpsnyms());
  }
}

void msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgTicketResolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution::CopyFrom(const msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgTicketResolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pstticketinfo_)) return false;
  return true;
}

void msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution::InternalSwap(msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pstticketinfo_.InternalSwap(&other->pstticketinfo_);
  swap(inoofresolvedpsnyms_, other->inoofresolvedpsnyms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution::InitAsDefaultInstance() {
}
class msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution::_Internal {
 public:
  using HasBits = decltype(std::declval<msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution>()._has_bits_);
  static void set_has_strpsnymcertserialno(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_strticketserialno(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_strticketidentifiablekey(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution::msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnymResolution)
}
msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution::msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution(const msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strpsnymcertserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strpsnymcertserialno()) {
    strpsnymcertserialno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strpsnymcertserialno(),
      GetArena());
  }
  strticketserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strticketserialno()) {
    strticketserialno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strticketserialno(),
      GetArena());
  }
  strticketidentifiablekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strticketidentifiablekey()) {
    strticketidentifiablekey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strticketidentifiablekey(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnymResolution)
}

void msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution_Interfaces_2eproto.base);
  strpsnymcertserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strticketserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strticketidentifiablekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution::~msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution() {
  // @@protoc_insertion_point(destructor:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnymResolution)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strpsnymcertserialno_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strticketserialno_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strticketidentifiablekey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution::ArenaDtor(void* object) {
  msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution* _this = reinterpret_cast< msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution* >(object);
  (void)_this;
}
void msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution& msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnymResolution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      strpsnymcertserialno_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      strticketserialno_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      strticketidentifiablekey_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string strPsnymCertSerialNo = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_strpsnymcertserialno();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnymResolution.strPsnymCertSerialNo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strTicketSerialNo = 2 [default = ""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_strticketserialno();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnymResolution.strTicketSerialNo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strTicketIdentifiableKey = 3 [default = ""];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_strticketidentifiablekey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnymResolution.strTicketIdentifiableKey");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnymResolution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string strPsnymCertSerialNo = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strpsnymcertserialno().data(), static_cast<int>(this->_internal_strpsnymcertserialno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnymResolution.strPsnymCertSerialNo");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_strpsnymcertserialno(), target);
  }

  // required string strTicketSerialNo = 2 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strticketserialno().data(), static_cast<int>(this->_internal_strticketserialno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnymResolution.strTicketSerialNo");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_strticketserialno(), target);
  }

  // required string strTicketIdentifiableKey = 3 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strticketidentifiablekey().data(), static_cast<int>(this->_internal_strticketidentifiablekey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnymResolution.strTicketIdentifiableKey");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_strticketidentifiablekey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnymResolution)
  return target;
}

size_t msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnymResolution)
  size_t total_size = 0;

  if (_internal_has_strpsnymcertserialno()) {
    // required string strPsnymCertSerialNo = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpsnymcertserialno());
  }

  if (_internal_has_strticketserialno()) {
    // required string strTicketSerialNo = 2 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticketserialno());
  }

  if (_internal_has_strticketidentifiablekey()) {
    // required string strTicketIdentifiableKey = 3 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticketidentifiablekey());
  }

  return total_size;
}
size_t msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnymResolution)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string strPsnymCertSerialNo = 1 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpsnymcertserialno());

    // required string strTicketSerialNo = 2 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticketserialno());

    // required string strTicketIdentifiableKey = 3 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strticketidentifiablekey());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnymResolution)
  GOOGLE_DCHECK_NE(&from, this);
  const msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnymResolution)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnymResolution)
    MergeFrom(*source);
  }
}

void msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution::MergeFrom(const msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnymResolution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strpsnymcertserialno(from._internal_strpsnymcertserialno());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_strticketserialno(from._internal_strticketserialno());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_strticketidentifiablekey(from._internal_strticketidentifiablekey());
    }
  }
}

void msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnymResolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution::CopyFrom(const msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnymResolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution::InternalSwap(msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strpsnymcertserialno_.Swap(&other->strpsnymcertserialno_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strticketserialno_.Swap(&other->strticketserialno_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strticketidentifiablekey_.Swap(&other->strticketidentifiablekey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgReversePsnymResolutionRes_PCA2RA::InitAsDefaultInstance() {
  ::interfaces::_msgReversePsnymResolutionRes_PCA2RA_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgReversePsnymResolutionRes_PCA2RA_default_instance_._instance.get_mutable()->sterrinfo_ = const_cast< ::interfaces::msgError*>(
      ::interfaces::msgError::internal_default_instance());
  ::interfaces::_msgReversePsnymResolutionRes_PCA2RA_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgReversePsnymResolutionRes_PCA2RA::_Internal {
 public:
  using HasBits = decltype(std::declval<msgReversePsnymResolutionRes_PCA2RA>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgReversePsnymResolutionRes_PCA2RA* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inoofx509certtoberesolved(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::interfaces::msgError& sterrinfo(const msgReversePsnymResolutionRes_PCA2RA* msg);
  static void set_has_sterrinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::interfaces::msgSignature& stsign(const msgReversePsnymResolutionRes_PCA2RA* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007a) ^ 0x0000007a) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgReversePsnymResolutionRes_PCA2RA::_Internal::stsigner(const msgReversePsnymResolutionRes_PCA2RA* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgError&
msgReversePsnymResolutionRes_PCA2RA::_Internal::sterrinfo(const msgReversePsnymResolutionRes_PCA2RA* msg) {
  return *msg->sterrinfo_;
}
const ::interfaces::msgSignature&
msgReversePsnymResolutionRes_PCA2RA::_Internal::stsign(const msgReversePsnymResolutionRes_PCA2RA* msg) {
  return *msg->stsign_;
}
msgReversePsnymResolutionRes_PCA2RA::msgReversePsnymResolutionRes_PCA2RA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pstticketresolutioninfo_(arena),
  pstpsnymresolutioninfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgReversePsnymResolutionRes_PCA2RA)
}
msgReversePsnymResolutionRes_PCA2RA::msgReversePsnymResolutionRes_PCA2RA(const msgReversePsnymResolutionRes_PCA2RA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pstticketresolutioninfo_(from.pstticketresolutioninfo_),
      pstpsnymresolutioninfo_(from.pstpsnymresolutioninfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_sterrinfo()) {
    sterrinfo_ = new ::interfaces::msgError(*from.sterrinfo_);
  } else {
    sterrinfo_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&inonce_, &from.inonce_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&inonce_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgReversePsnymResolutionRes_PCA2RA)
}

void msgReversePsnymResolutionRes_PCA2RA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgReversePsnymResolutionRes_PCA2RA_Interfaces_2eproto.base);
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stsign_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(stsign_));
  inonce_ = -1;
  ireqtype_ = -1;
  inoofx509certtoberesolved_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgReversePsnymResolutionRes_PCA2RA::~msgReversePsnymResolutionRes_PCA2RA() {
  // @@protoc_insertion_point(destructor:interfaces.msgReversePsnymResolutionRes_PCA2RA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgReversePsnymResolutionRes_PCA2RA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete sterrinfo_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgReversePsnymResolutionRes_PCA2RA::ArenaDtor(void* object) {
  msgReversePsnymResolutionRes_PCA2RA* _this = reinterpret_cast< msgReversePsnymResolutionRes_PCA2RA* >(object);
  (void)_this;
}
void msgReversePsnymResolutionRes_PCA2RA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgReversePsnymResolutionRes_PCA2RA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgReversePsnymResolutionRes_PCA2RA& msgReversePsnymResolutionRes_PCA2RA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgReversePsnymResolutionRes_PCA2RA_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgReversePsnymResolutionRes_PCA2RA::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgReversePsnymResolutionRes_PCA2RA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pstticketresolutioninfo_.Clear();
  pstpsnymresolutioninfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sterrinfo_ != nullptr);
      sterrinfo_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
    inonce_ = -1;
    ireqtype_ = -1;
    inoofx509certtoberesolved_ = -1;
    ttimestamp_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgReversePsnymResolutionRes_PCA2RA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNoOfX509CertToBeResolved = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_inoofx509certtoberesolved(&has_bits);
          inoofx509certtoberesolved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnymResolution pstTicketResolutionInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pstticketresolutioninfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnymResolution pstPsnymResolutionInfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pstpsnymresolutioninfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgError stErrInfo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_sterrinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgReversePsnymResolutionRes_PCA2RA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgReversePsnymResolutionRes_PCA2RA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required int32 iNoOfX509CertToBeResolved = 3 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_inoofx509certtoberesolved(), target);
  }

  // repeated .interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnymResolution pstTicketResolutionInfo = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pstticketresolutioninfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_pstticketresolutioninfo(i), target, stream);
  }

  // repeated .interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnymResolution pstPsnymResolutionInfo = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pstpsnymresolutioninfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_pstpsnymresolutioninfo(i), target, stream);
  }

  // required int32 iNonce = 6 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 7 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_ttimestamp(), target);
  }

  // required .interfaces.msgError stErrInfo = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::sterrinfo(this), target, stream);
  }

  // optional .interfaces.msgSignature stSign = 9;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgReversePsnymResolutionRes_PCA2RA)
  return target;
}

size_t msgReversePsnymResolutionRes_PCA2RA::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgReversePsnymResolutionRes_PCA2RA)
  size_t total_size = 0;

  if (_internal_has_sterrinfo()) {
    // required .interfaces.msgError stErrInfo = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_inoofx509certtoberesolved()) {
    // required int32 iNoOfX509CertToBeResolved = 3 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inoofx509certtoberesolved());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgReversePsnymResolutionRes_PCA2RA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgReversePsnymResolutionRes_PCA2RA)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007a) ^ 0x0000007a) == 0) {  // All required fields are present.
    // required .interfaces.msgError stErrInfo = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);

    // required int32 iNonce = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iNoOfX509CertToBeResolved = 3 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inoofx509certtoberesolved());

    // required int64 tTimeStamp = 7 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnymResolution pstTicketResolutionInfo = 4;
  total_size += 1UL * this->_internal_pstticketresolutioninfo_size();
  for (const auto& msg : this->pstticketresolutioninfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .interfaces.msgReversePsnymResolutionRes_PCA2RA.msgPsnymResolution pstPsnymResolutionInfo = 5;
  total_size += 1UL * this->_internal_pstpsnymresolutioninfo_size();
  for (const auto& msg : this->pstpsnymresolutioninfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsigner_);
  }

  // optional .interfaces.msgSignature stSign = 9;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsign_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgReversePsnymResolutionRes_PCA2RA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgReversePsnymResolutionRes_PCA2RA)
  GOOGLE_DCHECK_NE(&from, this);
  const msgReversePsnymResolutionRes_PCA2RA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgReversePsnymResolutionRes_PCA2RA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgReversePsnymResolutionRes_PCA2RA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgReversePsnymResolutionRes_PCA2RA)
    MergeFrom(*source);
  }
}

void msgReversePsnymResolutionRes_PCA2RA::MergeFrom(const msgReversePsnymResolutionRes_PCA2RA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgReversePsnymResolutionRes_PCA2RA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pstticketresolutioninfo_.MergeFrom(from.pstticketresolutioninfo_);
  pstpsnymresolutioninfo_.MergeFrom(from.pstpsnymresolutioninfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sterrinfo()->::interfaces::msgError::MergeFrom(from._internal_sterrinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000008u) {
      inonce_ = from.inonce_;
    }
    if (cached_has_bits & 0x00000010u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000020u) {
      inoofx509certtoberesolved_ = from.inoofx509certtoberesolved_;
    }
    if (cached_has_bits & 0x00000040u) {
      ttimestamp_ = from.ttimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgReversePsnymResolutionRes_PCA2RA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgReversePsnymResolutionRes_PCA2RA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgReversePsnymResolutionRes_PCA2RA::CopyFrom(const msgReversePsnymResolutionRes_PCA2RA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgReversePsnymResolutionRes_PCA2RA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgReversePsnymResolutionRes_PCA2RA::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pstticketresolutioninfo_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pstpsnymresolutioninfo_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  if (_internal_has_sterrinfo()) {
    if (!sterrinfo_->IsInitialized()) return false;
  }
  return true;
}

void msgReversePsnymResolutionRes_PCA2RA::InternalSwap(msgReversePsnymResolutionRes_PCA2RA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pstticketresolutioninfo_.InternalSwap(&other->pstticketresolutioninfo_);
  pstpsnymresolutioninfo_.InternalSwap(&other->pstpsnymresolutioninfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgReversePsnymResolutionRes_PCA2RA, stsign_)
      + sizeof(msgReversePsnymResolutionRes_PCA2RA::stsign_)
      - PROTOBUF_FIELD_OFFSET(msgReversePsnymResolutionRes_PCA2RA, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(inonce_, other->inonce_);
  swap(ireqtype_, other->ireqtype_);
  swap(inoofx509certtoberesolved_, other->inoofx509certtoberesolved_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgReversePsnymResolutionRes_PCA2RA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution::InitAsDefaultInstance() {
}
class msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution::_Internal {
 public:
  using HasBits = decltype(std::declval<msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution>()._has_bits_);
  static void set_has_inoofresolvedpsnyms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution::msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  strpsnymcert_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgReversePsnymResolutionRes_RA2Police.msgPsnymResolution)
}
msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution::msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution(const msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      strpsnymcert_(from.strpsnymcert_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  inoofresolvedpsnyms_ = from.inoofresolvedpsnyms_;
  // @@protoc_insertion_point(copy_constructor:interfaces.msgReversePsnymResolutionRes_RA2Police.msgPsnymResolution)
}

void msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution_Interfaces_2eproto.base);
  inoofresolvedpsnyms_ = -1;
}

msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution::~msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution() {
  // @@protoc_insertion_point(destructor:interfaces.msgReversePsnymResolutionRes_RA2Police.msgPsnymResolution)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution::ArenaDtor(void* object) {
  msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution* _this = reinterpret_cast< msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution* >(object);
  (void)_this;
}
void msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution& msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgReversePsnymResolutionRes_RA2Police.msgPsnymResolution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strpsnymcert_.Clear();
  inoofresolvedpsnyms_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iNoOfResolvedPsnyms = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_inoofresolvedpsnyms(&has_bits);
          inoofresolvedpsnyms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string strPsnymCert = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_strpsnymcert();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgReversePsnymResolutionRes_RA2Police.msgPsnymResolution.strPsnymCert");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgReversePsnymResolutionRes_RA2Police.msgPsnymResolution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iNoOfResolvedPsnyms = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_inoofresolvedpsnyms(), target);
  }

  // repeated string strPsnymCert = 2;
  for (int i = 0, n = this->_internal_strpsnymcert_size(); i < n; i++) {
    const auto& s = this->_internal_strpsnymcert(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgReversePsnymResolutionRes_RA2Police.msgPsnymResolution.strPsnymCert");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgReversePsnymResolutionRes_RA2Police.msgPsnymResolution)
  return target;
}

size_t msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgReversePsnymResolutionRes_RA2Police.msgPsnymResolution)
  size_t total_size = 0;

  // required int32 iNoOfResolvedPsnyms = 1 [default = -1];
  if (_internal_has_inoofresolvedpsnyms()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inoofresolvedpsnyms());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string strPsnymCert = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(strpsnymcert_.size());
  for (int i = 0, n = strpsnymcert_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      strpsnymcert_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgReversePsnymResolutionRes_RA2Police.msgPsnymResolution)
  GOOGLE_DCHECK_NE(&from, this);
  const msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgReversePsnymResolutionRes_RA2Police.msgPsnymResolution)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgReversePsnymResolutionRes_RA2Police.msgPsnymResolution)
    MergeFrom(*source);
  }
}

void msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution::MergeFrom(const msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgReversePsnymResolutionRes_RA2Police.msgPsnymResolution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  strpsnymcert_.MergeFrom(from.strpsnymcert_);
  if (from._internal_has_inoofresolvedpsnyms()) {
    _internal_set_inoofresolvedpsnyms(from._internal_inoofresolvedpsnyms());
  }
}

void msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgReversePsnymResolutionRes_RA2Police.msgPsnymResolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution::CopyFrom(const msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgReversePsnymResolutionRes_RA2Police.msgPsnymResolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution::InternalSwap(msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strpsnymcert_.InternalSwap(&other->strpsnymcert_);
  swap(inoofresolvedpsnyms_, other->inoofresolvedpsnyms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgReversePsnymResolutionRes_RA2Police::InitAsDefaultInstance() {
  ::interfaces::_msgReversePsnymResolutionRes_RA2Police_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgReversePsnymResolutionRes_RA2Police_default_instance_._instance.get_mutable()->sterrinfo_ = const_cast< ::interfaces::msgError*>(
      ::interfaces::msgError::internal_default_instance());
  ::interfaces::_msgReversePsnymResolutionRes_RA2Police_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgReversePsnymResolutionRes_RA2Police::_Internal {
 public:
  using HasBits = decltype(std::declval<msgReversePsnymResolutionRes_RA2Police>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgReversePsnymResolutionRes_RA2Police* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inoofx509certtoberesolved(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::interfaces::msgError& sterrinfo(const msgReversePsnymResolutionRes_RA2Police* msg);
  static void set_has_sterrinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::interfaces::msgSignature& stsign(const msgReversePsnymResolutionRes_RA2Police* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007a) ^ 0x0000007a) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgReversePsnymResolutionRes_RA2Police::_Internal::stsigner(const msgReversePsnymResolutionRes_RA2Police* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgError&
msgReversePsnymResolutionRes_RA2Police::_Internal::sterrinfo(const msgReversePsnymResolutionRes_RA2Police* msg) {
  return *msg->sterrinfo_;
}
const ::interfaces::msgSignature&
msgReversePsnymResolutionRes_RA2Police::_Internal::stsign(const msgReversePsnymResolutionRes_RA2Police* msg) {
  return *msg->stsign_;
}
msgReversePsnymResolutionRes_RA2Police::msgReversePsnymResolutionRes_RA2Police(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pstpsnymresolutioninfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgReversePsnymResolutionRes_RA2Police)
}
msgReversePsnymResolutionRes_RA2Police::msgReversePsnymResolutionRes_RA2Police(const msgReversePsnymResolutionRes_RA2Police& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pstpsnymresolutioninfo_(from.pstpsnymresolutioninfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_sterrinfo()) {
    sterrinfo_ = new ::interfaces::msgError(*from.sterrinfo_);
  } else {
    sterrinfo_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&inonce_, &from.inonce_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&inonce_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgReversePsnymResolutionRes_RA2Police)
}

void msgReversePsnymResolutionRes_RA2Police::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgReversePsnymResolutionRes_RA2Police_Interfaces_2eproto.base);
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stsign_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(stsign_));
  inonce_ = -1;
  ireqtype_ = -1;
  inoofx509certtoberesolved_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgReversePsnymResolutionRes_RA2Police::~msgReversePsnymResolutionRes_RA2Police() {
  // @@protoc_insertion_point(destructor:interfaces.msgReversePsnymResolutionRes_RA2Police)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgReversePsnymResolutionRes_RA2Police::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete sterrinfo_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgReversePsnymResolutionRes_RA2Police::ArenaDtor(void* object) {
  msgReversePsnymResolutionRes_RA2Police* _this = reinterpret_cast< msgReversePsnymResolutionRes_RA2Police* >(object);
  (void)_this;
}
void msgReversePsnymResolutionRes_RA2Police::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgReversePsnymResolutionRes_RA2Police::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgReversePsnymResolutionRes_RA2Police& msgReversePsnymResolutionRes_RA2Police::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgReversePsnymResolutionRes_RA2Police_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgReversePsnymResolutionRes_RA2Police::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgReversePsnymResolutionRes_RA2Police)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pstpsnymresolutioninfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sterrinfo_ != nullptr);
      sterrinfo_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
    inonce_ = -1;
    ireqtype_ = -1;
    inoofx509certtoberesolved_ = -1;
    ttimestamp_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgReversePsnymResolutionRes_RA2Police::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNoOfX509CertToBeResolved = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_inoofx509certtoberesolved(&has_bits);
          inoofx509certtoberesolved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .interfaces.msgReversePsnymResolutionRes_RA2Police.msgPsnymResolution pstPsnymResolutionInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pstpsnymresolutioninfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgError stErrInfo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_sterrinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgReversePsnymResolutionRes_RA2Police::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgReversePsnymResolutionRes_RA2Police)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required int32 iNoOfX509CertToBeResolved = 3 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_inoofx509certtoberesolved(), target);
  }

  // repeated .interfaces.msgReversePsnymResolutionRes_RA2Police.msgPsnymResolution pstPsnymResolutionInfo = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pstpsnymresolutioninfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_pstpsnymresolutioninfo(i), target, stream);
  }

  // required int32 iNonce = 5 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 6 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_ttimestamp(), target);
  }

  // required .interfaces.msgError stErrInfo = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::sterrinfo(this), target, stream);
  }

  // optional .interfaces.msgSignature stSign = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgReversePsnymResolutionRes_RA2Police)
  return target;
}

size_t msgReversePsnymResolutionRes_RA2Police::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgReversePsnymResolutionRes_RA2Police)
  size_t total_size = 0;

  if (_internal_has_sterrinfo()) {
    // required .interfaces.msgError stErrInfo = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_inoofx509certtoberesolved()) {
    // required int32 iNoOfX509CertToBeResolved = 3 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inoofx509certtoberesolved());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgReversePsnymResolutionRes_RA2Police::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgReversePsnymResolutionRes_RA2Police)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007a) ^ 0x0000007a) == 0) {  // All required fields are present.
    // required .interfaces.msgError stErrInfo = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);

    // required int32 iNonce = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iNoOfX509CertToBeResolved = 3 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inoofx509certtoberesolved());

    // required int64 tTimeStamp = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .interfaces.msgReversePsnymResolutionRes_RA2Police.msgPsnymResolution pstPsnymResolutionInfo = 4;
  total_size += 1UL * this->_internal_pstpsnymresolutioninfo_size();
  for (const auto& msg : this->pstpsnymresolutioninfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsigner_);
  }

  // optional .interfaces.msgSignature stSign = 8;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsign_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgReversePsnymResolutionRes_RA2Police::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgReversePsnymResolutionRes_RA2Police)
  GOOGLE_DCHECK_NE(&from, this);
  const msgReversePsnymResolutionRes_RA2Police* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgReversePsnymResolutionRes_RA2Police>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgReversePsnymResolutionRes_RA2Police)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgReversePsnymResolutionRes_RA2Police)
    MergeFrom(*source);
  }
}

void msgReversePsnymResolutionRes_RA2Police::MergeFrom(const msgReversePsnymResolutionRes_RA2Police& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgReversePsnymResolutionRes_RA2Police)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pstpsnymresolutioninfo_.MergeFrom(from.pstpsnymresolutioninfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sterrinfo()->::interfaces::msgError::MergeFrom(from._internal_sterrinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000008u) {
      inonce_ = from.inonce_;
    }
    if (cached_has_bits & 0x00000010u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000020u) {
      inoofx509certtoberesolved_ = from.inoofx509certtoberesolved_;
    }
    if (cached_has_bits & 0x00000040u) {
      ttimestamp_ = from.ttimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgReversePsnymResolutionRes_RA2Police::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgReversePsnymResolutionRes_RA2Police)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgReversePsnymResolutionRes_RA2Police::CopyFrom(const msgReversePsnymResolutionRes_RA2Police& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgReversePsnymResolutionRes_RA2Police)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgReversePsnymResolutionRes_RA2Police::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pstpsnymresolutioninfo_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  if (_internal_has_sterrinfo()) {
    if (!sterrinfo_->IsInitialized()) return false;
  }
  return true;
}

void msgReversePsnymResolutionRes_RA2Police::InternalSwap(msgReversePsnymResolutionRes_RA2Police* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pstpsnymresolutioninfo_.InternalSwap(&other->pstpsnymresolutioninfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgReversePsnymResolutionRes_RA2Police, stsign_)
      + sizeof(msgReversePsnymResolutionRes_RA2Police::stsign_)
      - PROTOBUF_FIELD_OFFSET(msgReversePsnymResolutionRes_RA2Police, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(inonce_, other->inonce_);
  swap(ireqtype_, other->ireqtype_);
  swap(inoofx509certtoberesolved_, other->inoofx509certtoberesolved_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgReversePsnymResolutionRes_RA2Police::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgTicketProvisionValidationReq_LTCA2TVR::InitAsDefaultInstance() {
  ::interfaces::_msgTicketProvisionValidationReq_LTCA2TVR_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgTicketProvisionValidationReq_LTCA2TVR_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgTicketProvisionValidationReq_LTCA2TVR::_Internal {
 public:
  using HasBits = decltype(std::declval<msgTicketProvisionValidationReq_LTCA2TVR>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgTicketProvisionValidationReq_LTCA2TVR* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_strltcaecpubkey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_strhashedvehiltcert(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::interfaces::msgSignature& stsign(const msgTicketProvisionValidationReq_LTCA2TVR* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000073) ^ 0x00000073) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgTicketProvisionValidationReq_LTCA2TVR::_Internal::stsigner(const msgTicketProvisionValidationReq_LTCA2TVR* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgSignature&
msgTicketProvisionValidationReq_LTCA2TVR::_Internal::stsign(const msgTicketProvisionValidationReq_LTCA2TVR* msg) {
  return *msg->stsign_;
}
msgTicketProvisionValidationReq_LTCA2TVR::msgTicketProvisionValidationReq_LTCA2TVR(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgTicketProvisionValidationReq_LTCA2TVR)
}
msgTicketProvisionValidationReq_LTCA2TVR::msgTicketProvisionValidationReq_LTCA2TVR(const msgTicketProvisionValidationReq_LTCA2TVR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strltcaecpubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strltcaecpubkey()) {
    strltcaecpubkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strltcaecpubkey(),
      GetArena());
  }
  strhashedvehiltcert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strhashedvehiltcert()) {
    strhashedvehiltcert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strhashedvehiltcert(),
      GetArena());
  }
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&ireqtype_, &from.ireqtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&ireqtype_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgTicketProvisionValidationReq_LTCA2TVR)
}

void msgTicketProvisionValidationReq_LTCA2TVR::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgTicketProvisionValidationReq_LTCA2TVR_Interfaces_2eproto.base);
  strltcaecpubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strhashedvehiltcert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stsign_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(stsign_));
  ireqtype_ = -1;
  inonce_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgTicketProvisionValidationReq_LTCA2TVR::~msgTicketProvisionValidationReq_LTCA2TVR() {
  // @@protoc_insertion_point(destructor:interfaces.msgTicketProvisionValidationReq_LTCA2TVR)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgTicketProvisionValidationReq_LTCA2TVR::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strltcaecpubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strhashedvehiltcert_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgTicketProvisionValidationReq_LTCA2TVR::ArenaDtor(void* object) {
  msgTicketProvisionValidationReq_LTCA2TVR* _this = reinterpret_cast< msgTicketProvisionValidationReq_LTCA2TVR* >(object);
  (void)_this;
}
void msgTicketProvisionValidationReq_LTCA2TVR::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgTicketProvisionValidationReq_LTCA2TVR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgTicketProvisionValidationReq_LTCA2TVR& msgTicketProvisionValidationReq_LTCA2TVR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgTicketProvisionValidationReq_LTCA2TVR_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgTicketProvisionValidationReq_LTCA2TVR::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgTicketProvisionValidationReq_LTCA2TVR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      strltcaecpubkey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      strhashedvehiltcert_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
    ireqtype_ = -1;
    inonce_ = -1;
    ttimestamp_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgTicketProvisionValidationReq_LTCA2TVR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strLTCAECPubKey = 3 [default = ""];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_strltcaecpubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgTicketProvisionValidationReq_LTCA2TVR.strLTCAECPubKey");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strHashedVehiLTCert = 4 [default = ""];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_strhashedvehiltcert();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgTicketProvisionValidationReq_LTCA2TVR.strHashedVehiLTCert");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgTicketProvisionValidationReq_LTCA2TVR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgTicketProvisionValidationReq_LTCA2TVR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required string strLTCAECPubKey = 3 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strltcaecpubkey().data(), static_cast<int>(this->_internal_strltcaecpubkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgTicketProvisionValidationReq_LTCA2TVR.strLTCAECPubKey");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_strltcaecpubkey(), target);
  }

  // required string strHashedVehiLTCert = 4 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strhashedvehiltcert().data(), static_cast<int>(this->_internal_strhashedvehiltcert().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgTicketProvisionValidationReq_LTCA2TVR.strHashedVehiLTCert");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_strhashedvehiltcert(), target);
  }

  // required int32 iNonce = 5 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 6 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_ttimestamp(), target);
  }

  // optional .interfaces.msgSignature stSign = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgTicketProvisionValidationReq_LTCA2TVR)
  return target;
}

size_t msgTicketProvisionValidationReq_LTCA2TVR::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgTicketProvisionValidationReq_LTCA2TVR)
  size_t total_size = 0;

  if (_internal_has_strltcaecpubkey()) {
    // required string strLTCAECPubKey = 3 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strltcaecpubkey());
  }

  if (_internal_has_strhashedvehiltcert()) {
    // required string strHashedVehiLTCert = 4 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strhashedvehiltcert());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgTicketProvisionValidationReq_LTCA2TVR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgTicketProvisionValidationReq_LTCA2TVR)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000073) ^ 0x00000073) == 0) {  // All required fields are present.
    // required string strLTCAECPubKey = 3 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strltcaecpubkey());

    // required string strHashedVehiLTCert = 4 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strhashedvehiltcert());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iNonce = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int64 tTimeStamp = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional .interfaces.msgSignerInfo stSigner = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsigner_);
    }

    // optional .interfaces.msgSignature stSign = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsign_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgTicketProvisionValidationReq_LTCA2TVR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgTicketProvisionValidationReq_LTCA2TVR)
  GOOGLE_DCHECK_NE(&from, this);
  const msgTicketProvisionValidationReq_LTCA2TVR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgTicketProvisionValidationReq_LTCA2TVR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgTicketProvisionValidationReq_LTCA2TVR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgTicketProvisionValidationReq_LTCA2TVR)
    MergeFrom(*source);
  }
}

void msgTicketProvisionValidationReq_LTCA2TVR::MergeFrom(const msgTicketProvisionValidationReq_LTCA2TVR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgTicketProvisionValidationReq_LTCA2TVR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strltcaecpubkey(from._internal_strltcaecpubkey());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_strhashedvehiltcert(from._internal_strhashedvehiltcert());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000010u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000020u) {
      inonce_ = from.inonce_;
    }
    if (cached_has_bits & 0x00000040u) {
      ttimestamp_ = from.ttimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgTicketProvisionValidationReq_LTCA2TVR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgTicketProvisionValidationReq_LTCA2TVR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgTicketProvisionValidationReq_LTCA2TVR::CopyFrom(const msgTicketProvisionValidationReq_LTCA2TVR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgTicketProvisionValidationReq_LTCA2TVR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgTicketProvisionValidationReq_LTCA2TVR::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  return true;
}

void msgTicketProvisionValidationReq_LTCA2TVR::InternalSwap(msgTicketProvisionValidationReq_LTCA2TVR* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strltcaecpubkey_.Swap(&other->strltcaecpubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strhashedvehiltcert_.Swap(&other->strhashedvehiltcert_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgTicketProvisionValidationReq_LTCA2TVR, stsign_)
      + sizeof(msgTicketProvisionValidationReq_LTCA2TVR::stsign_)
      - PROTOBUF_FIELD_OFFSET(msgTicketProvisionValidationReq_LTCA2TVR, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(ireqtype_, other->ireqtype_);
  swap(inonce_, other->inonce_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgTicketProvisionValidationReq_LTCA2TVR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgTicketProvisionValidationRes_TVR2LTCA::InitAsDefaultInstance() {
  ::interfaces::_msgTicketProvisionValidationRes_TVR2LTCA_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgTicketProvisionValidationRes_TVR2LTCA_default_instance_._instance.get_mutable()->sterrinfo_ = const_cast< ::interfaces::msgError*>(
      ::interfaces::msgError::internal_default_instance());
  ::interfaces::_msgTicketProvisionValidationRes_TVR2LTCA_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgTicketProvisionValidationRes_TVR2LTCA::_Internal {
 public:
  using HasBits = decltype(std::declval<msgTicketProvisionValidationRes_TVR2LTCA>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgTicketProvisionValidationRes_TVR2LTCA* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::interfaces::msgError& sterrinfo(const msgTicketProvisionValidationRes_TVR2LTCA* msg);
  static void set_has_sterrinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::interfaces::msgSignature& stsign(const msgTicketProvisionValidationRes_TVR2LTCA* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007a) ^ 0x0000007a) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgTicketProvisionValidationRes_TVR2LTCA::_Internal::stsigner(const msgTicketProvisionValidationRes_TVR2LTCA* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgError&
msgTicketProvisionValidationRes_TVR2LTCA::_Internal::sterrinfo(const msgTicketProvisionValidationRes_TVR2LTCA* msg) {
  return *msg->sterrinfo_;
}
const ::interfaces::msgSignature&
msgTicketProvisionValidationRes_TVR2LTCA::_Internal::stsign(const msgTicketProvisionValidationRes_TVR2LTCA* msg) {
  return *msg->stsign_;
}
msgTicketProvisionValidationRes_TVR2LTCA::msgTicketProvisionValidationRes_TVR2LTCA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgTicketProvisionValidationRes_TVR2LTCA)
}
msgTicketProvisionValidationRes_TVR2LTCA::msgTicketProvisionValidationRes_TVR2LTCA(const msgTicketProvisionValidationRes_TVR2LTCA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_sterrinfo()) {
    sterrinfo_ = new ::interfaces::msgError(*from.sterrinfo_);
  } else {
    sterrinfo_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&chstatus_, &from.chstatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&chstatus_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgTicketProvisionValidationRes_TVR2LTCA)
}

void msgTicketProvisionValidationRes_TVR2LTCA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgTicketProvisionValidationRes_TVR2LTCA_Interfaces_2eproto.base);
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chstatus_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(chstatus_));
  ireqtype_ = -1;
  inonce_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgTicketProvisionValidationRes_TVR2LTCA::~msgTicketProvisionValidationRes_TVR2LTCA() {
  // @@protoc_insertion_point(destructor:interfaces.msgTicketProvisionValidationRes_TVR2LTCA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgTicketProvisionValidationRes_TVR2LTCA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete sterrinfo_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgTicketProvisionValidationRes_TVR2LTCA::ArenaDtor(void* object) {
  msgTicketProvisionValidationRes_TVR2LTCA* _this = reinterpret_cast< msgTicketProvisionValidationRes_TVR2LTCA* >(object);
  (void)_this;
}
void msgTicketProvisionValidationRes_TVR2LTCA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgTicketProvisionValidationRes_TVR2LTCA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgTicketProvisionValidationRes_TVR2LTCA& msgTicketProvisionValidationRes_TVR2LTCA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgTicketProvisionValidationRes_TVR2LTCA_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgTicketProvisionValidationRes_TVR2LTCA::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgTicketProvisionValidationRes_TVR2LTCA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sterrinfo_ != nullptr);
      sterrinfo_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    chstatus_ = 0u;
    ireqtype_ = -1;
    inonce_ = -1;
    ttimestamp_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgTicketProvisionValidationRes_TVR2LTCA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 chStatus = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_chstatus(&has_bits);
          chstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgError stErrInfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sterrinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgTicketProvisionValidationRes_TVR2LTCA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgTicketProvisionValidationRes_TVR2LTCA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required uint32 chStatus = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_chstatus(), target);
  }

  // required int32 iNonce = 4 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 5 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_ttimestamp(), target);
  }

  // required .interfaces.msgError stErrInfo = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::sterrinfo(this), target, stream);
  }

  // optional .interfaces.msgSignature stSign = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgTicketProvisionValidationRes_TVR2LTCA)
  return target;
}

size_t msgTicketProvisionValidationRes_TVR2LTCA::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgTicketProvisionValidationRes_TVR2LTCA)
  size_t total_size = 0;

  if (_internal_has_sterrinfo()) {
    // required .interfaces.msgError stErrInfo = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);
  }

  if (_internal_has_chstatus()) {
    // required uint32 chStatus = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chstatus());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 4 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgTicketProvisionValidationRes_TVR2LTCA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgTicketProvisionValidationRes_TVR2LTCA)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007a) ^ 0x0000007a) == 0) {  // All required fields are present.
    // required .interfaces.msgError stErrInfo = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);

    // required uint32 chStatus = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chstatus());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iNonce = 4 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int64 tTimeStamp = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .interfaces.msgSignerInfo stSigner = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsigner_);
  }

  // optional .interfaces.msgSignature stSign = 7;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsign_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgTicketProvisionValidationRes_TVR2LTCA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgTicketProvisionValidationRes_TVR2LTCA)
  GOOGLE_DCHECK_NE(&from, this);
  const msgTicketProvisionValidationRes_TVR2LTCA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgTicketProvisionValidationRes_TVR2LTCA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgTicketProvisionValidationRes_TVR2LTCA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgTicketProvisionValidationRes_TVR2LTCA)
    MergeFrom(*source);
  }
}

void msgTicketProvisionValidationRes_TVR2LTCA::MergeFrom(const msgTicketProvisionValidationRes_TVR2LTCA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgTicketProvisionValidationRes_TVR2LTCA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sterrinfo()->::interfaces::msgError::MergeFrom(from._internal_sterrinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000008u) {
      chstatus_ = from.chstatus_;
    }
    if (cached_has_bits & 0x00000010u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000020u) {
      inonce_ = from.inonce_;
    }
    if (cached_has_bits & 0x00000040u) {
      ttimestamp_ = from.ttimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgTicketProvisionValidationRes_TVR2LTCA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgTicketProvisionValidationRes_TVR2LTCA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgTicketProvisionValidationRes_TVR2LTCA::CopyFrom(const msgTicketProvisionValidationRes_TVR2LTCA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgTicketProvisionValidationRes_TVR2LTCA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgTicketProvisionValidationRes_TVR2LTCA::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  if (_internal_has_sterrinfo()) {
    if (!sterrinfo_->IsInitialized()) return false;
  }
  return true;
}

void msgTicketProvisionValidationRes_TVR2LTCA::InternalSwap(msgTicketProvisionValidationRes_TVR2LTCA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgTicketProvisionValidationRes_TVR2LTCA, chstatus_)
      + sizeof(msgTicketProvisionValidationRes_TVR2LTCA::chstatus_)
      - PROTOBUF_FIELD_OFFSET(msgTicketProvisionValidationRes_TVR2LTCA, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(ireqtype_, other->ireqtype_);
  swap(inonce_, other->inonce_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgTicketProvisionValidationRes_TVR2LTCA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgPsnymProvisionValidationReq_PCA2PVR::InitAsDefaultInstance() {
  ::interfaces::_msgPsnymProvisionValidationReq_PCA2PVR_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgPsnymProvisionValidationReq_PCA2PVR_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgPsnymProvisionValidationReq_PCA2PVR::_Internal {
 public:
  using HasBits = decltype(std::declval<msgPsnymProvisionValidationReq_PCA2PVR>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgPsnymProvisionValidationReq_PCA2PVR* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_strpcaecpubkey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_strhashedticket(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::interfaces::msgSignature& stsign(const msgPsnymProvisionValidationReq_PCA2PVR* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000073) ^ 0x00000073) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgPsnymProvisionValidationReq_PCA2PVR::_Internal::stsigner(const msgPsnymProvisionValidationReq_PCA2PVR* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgSignature&
msgPsnymProvisionValidationReq_PCA2PVR::_Internal::stsign(const msgPsnymProvisionValidationReq_PCA2PVR* msg) {
  return *msg->stsign_;
}
msgPsnymProvisionValidationReq_PCA2PVR::msgPsnymProvisionValidationReq_PCA2PVR(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgPsnymProvisionValidationReq_PCA2PVR)
}
msgPsnymProvisionValidationReq_PCA2PVR::msgPsnymProvisionValidationReq_PCA2PVR(const msgPsnymProvisionValidationReq_PCA2PVR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strpcaecpubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strpcaecpubkey()) {
    strpcaecpubkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strpcaecpubkey(),
      GetArena());
  }
  strhashedticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strhashedticket()) {
    strhashedticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strhashedticket(),
      GetArena());
  }
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&ireqtype_, &from.ireqtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&ireqtype_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgPsnymProvisionValidationReq_PCA2PVR)
}

void msgPsnymProvisionValidationReq_PCA2PVR::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgPsnymProvisionValidationReq_PCA2PVR_Interfaces_2eproto.base);
  strpcaecpubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strhashedticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stsign_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(stsign_));
  ireqtype_ = -1;
  inonce_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgPsnymProvisionValidationReq_PCA2PVR::~msgPsnymProvisionValidationReq_PCA2PVR() {
  // @@protoc_insertion_point(destructor:interfaces.msgPsnymProvisionValidationReq_PCA2PVR)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgPsnymProvisionValidationReq_PCA2PVR::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strpcaecpubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strhashedticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgPsnymProvisionValidationReq_PCA2PVR::ArenaDtor(void* object) {
  msgPsnymProvisionValidationReq_PCA2PVR* _this = reinterpret_cast< msgPsnymProvisionValidationReq_PCA2PVR* >(object);
  (void)_this;
}
void msgPsnymProvisionValidationReq_PCA2PVR::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgPsnymProvisionValidationReq_PCA2PVR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgPsnymProvisionValidationReq_PCA2PVR& msgPsnymProvisionValidationReq_PCA2PVR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgPsnymProvisionValidationReq_PCA2PVR_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgPsnymProvisionValidationReq_PCA2PVR::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgPsnymProvisionValidationReq_PCA2PVR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      strpcaecpubkey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      strhashedticket_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
    ireqtype_ = -1;
    inonce_ = -1;
    ttimestamp_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgPsnymProvisionValidationReq_PCA2PVR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strPCAECPubKey = 3 [default = ""];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_strpcaecpubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgPsnymProvisionValidationReq_PCA2PVR.strPCAECPubKey");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string strHashedTicket = 4 [default = ""];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_strhashedticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.msgPsnymProvisionValidationReq_PCA2PVR.strHashedTicket");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgPsnymProvisionValidationReq_PCA2PVR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgPsnymProvisionValidationReq_PCA2PVR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required string strPCAECPubKey = 3 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strpcaecpubkey().data(), static_cast<int>(this->_internal_strpcaecpubkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgPsnymProvisionValidationReq_PCA2PVR.strPCAECPubKey");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_strpcaecpubkey(), target);
  }

  // required string strHashedTicket = 4 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strhashedticket().data(), static_cast<int>(this->_internal_strhashedticket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfaces.msgPsnymProvisionValidationReq_PCA2PVR.strHashedTicket");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_strhashedticket(), target);
  }

  // required int32 iNonce = 5 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 6 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_ttimestamp(), target);
  }

  // optional .interfaces.msgSignature stSign = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgPsnymProvisionValidationReq_PCA2PVR)
  return target;
}

size_t msgPsnymProvisionValidationReq_PCA2PVR::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgPsnymProvisionValidationReq_PCA2PVR)
  size_t total_size = 0;

  if (_internal_has_strpcaecpubkey()) {
    // required string strPCAECPubKey = 3 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpcaecpubkey());
  }

  if (_internal_has_strhashedticket()) {
    // required string strHashedTicket = 4 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strhashedticket());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgPsnymProvisionValidationReq_PCA2PVR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgPsnymProvisionValidationReq_PCA2PVR)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000073) ^ 0x00000073) == 0) {  // All required fields are present.
    // required string strPCAECPubKey = 3 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpcaecpubkey());

    // required string strHashedTicket = 4 [default = ""];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strhashedticket());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iNonce = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int64 tTimeStamp = 6 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional .interfaces.msgSignerInfo stSigner = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsigner_);
    }

    // optional .interfaces.msgSignature stSign = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stsign_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgPsnymProvisionValidationReq_PCA2PVR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgPsnymProvisionValidationReq_PCA2PVR)
  GOOGLE_DCHECK_NE(&from, this);
  const msgPsnymProvisionValidationReq_PCA2PVR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgPsnymProvisionValidationReq_PCA2PVR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgPsnymProvisionValidationReq_PCA2PVR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgPsnymProvisionValidationReq_PCA2PVR)
    MergeFrom(*source);
  }
}

void msgPsnymProvisionValidationReq_PCA2PVR::MergeFrom(const msgPsnymProvisionValidationReq_PCA2PVR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgPsnymProvisionValidationReq_PCA2PVR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strpcaecpubkey(from._internal_strpcaecpubkey());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_strhashedticket(from._internal_strhashedticket());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000010u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000020u) {
      inonce_ = from.inonce_;
    }
    if (cached_has_bits & 0x00000040u) {
      ttimestamp_ = from.ttimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgPsnymProvisionValidationReq_PCA2PVR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgPsnymProvisionValidationReq_PCA2PVR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgPsnymProvisionValidationReq_PCA2PVR::CopyFrom(const msgPsnymProvisionValidationReq_PCA2PVR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgPsnymProvisionValidationReq_PCA2PVR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgPsnymProvisionValidationReq_PCA2PVR::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  return true;
}

void msgPsnymProvisionValidationReq_PCA2PVR::InternalSwap(msgPsnymProvisionValidationReq_PCA2PVR* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strpcaecpubkey_.Swap(&other->strpcaecpubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strhashedticket_.Swap(&other->strhashedticket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgPsnymProvisionValidationReq_PCA2PVR, stsign_)
      + sizeof(msgPsnymProvisionValidationReq_PCA2PVR::stsign_)
      - PROTOBUF_FIELD_OFFSET(msgPsnymProvisionValidationReq_PCA2PVR, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(ireqtype_, other->ireqtype_);
  swap(inonce_, other->inonce_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgPsnymProvisionValidationReq_PCA2PVR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgPsnymProvisionValidationRes_PVR2PCA::InitAsDefaultInstance() {
  ::interfaces::_msgPsnymProvisionValidationRes_PVR2PCA_default_instance_._instance.get_mutable()->stsigner_ = const_cast< ::interfaces::msgSignerInfo*>(
      ::interfaces::msgSignerInfo::internal_default_instance());
  ::interfaces::_msgPsnymProvisionValidationRes_PVR2PCA_default_instance_._instance.get_mutable()->sterrinfo_ = const_cast< ::interfaces::msgError*>(
      ::interfaces::msgError::internal_default_instance());
  ::interfaces::_msgPsnymProvisionValidationRes_PVR2PCA_default_instance_._instance.get_mutable()->stsign_ = const_cast< ::interfaces::msgSignature*>(
      ::interfaces::msgSignature::internal_default_instance());
}
class msgPsnymProvisionValidationRes_PVR2PCA::_Internal {
 public:
  using HasBits = decltype(std::declval<msgPsnymProvisionValidationRes_PVR2PCA>()._has_bits_);
  static void set_has_ireqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::interfaces::msgSignerInfo& stsigner(const msgPsnymProvisionValidationRes_PVR2PCA* msg);
  static void set_has_stsigner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_inonce(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::interfaces::msgError& sterrinfo(const msgPsnymProvisionValidationRes_PVR2PCA* msg);
  static void set_has_sterrinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::interfaces::msgSignature& stsign(const msgPsnymProvisionValidationRes_PVR2PCA* msg);
  static void set_has_stsign(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007a) ^ 0x0000007a) != 0;
  }
};

const ::interfaces::msgSignerInfo&
msgPsnymProvisionValidationRes_PVR2PCA::_Internal::stsigner(const msgPsnymProvisionValidationRes_PVR2PCA* msg) {
  return *msg->stsigner_;
}
const ::interfaces::msgError&
msgPsnymProvisionValidationRes_PVR2PCA::_Internal::sterrinfo(const msgPsnymProvisionValidationRes_PVR2PCA* msg) {
  return *msg->sterrinfo_;
}
const ::interfaces::msgSignature&
msgPsnymProvisionValidationRes_PVR2PCA::_Internal::stsign(const msgPsnymProvisionValidationRes_PVR2PCA* msg) {
  return *msg->stsign_;
}
msgPsnymProvisionValidationRes_PVR2PCA::msgPsnymProvisionValidationRes_PVR2PCA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.msgPsnymProvisionValidationRes_PVR2PCA)
}
msgPsnymProvisionValidationRes_PVR2PCA::msgPsnymProvisionValidationRes_PVR2PCA(const msgPsnymProvisionValidationRes_PVR2PCA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stsigner()) {
    stsigner_ = new ::interfaces::msgSignerInfo(*from.stsigner_);
  } else {
    stsigner_ = nullptr;
  }
  if (from._internal_has_sterrinfo()) {
    sterrinfo_ = new ::interfaces::msgError(*from.sterrinfo_);
  } else {
    sterrinfo_ = nullptr;
  }
  if (from._internal_has_stsign()) {
    stsign_ = new ::interfaces::msgSignature(*from.stsign_);
  } else {
    stsign_ = nullptr;
  }
  ::memcpy(&chstatus_, &from.chstatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttimestamp_) -
    reinterpret_cast<char*>(&chstatus_)) + sizeof(ttimestamp_));
  // @@protoc_insertion_point(copy_constructor:interfaces.msgPsnymProvisionValidationRes_PVR2PCA)
}

void msgPsnymProvisionValidationRes_PVR2PCA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgPsnymProvisionValidationRes_PVR2PCA_Interfaces_2eproto.base);
  ::memset(&stsigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chstatus_) -
      reinterpret_cast<char*>(&stsigner_)) + sizeof(chstatus_));
  ireqtype_ = -1;
  inonce_ = -1;
  ttimestamp_ = PROTOBUF_LONGLONG(-1);
}

msgPsnymProvisionValidationRes_PVR2PCA::~msgPsnymProvisionValidationRes_PVR2PCA() {
  // @@protoc_insertion_point(destructor:interfaces.msgPsnymProvisionValidationRes_PVR2PCA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msgPsnymProvisionValidationRes_PVR2PCA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stsigner_;
  if (this != internal_default_instance()) delete sterrinfo_;
  if (this != internal_default_instance()) delete stsign_;
}

void msgPsnymProvisionValidationRes_PVR2PCA::ArenaDtor(void* object) {
  msgPsnymProvisionValidationRes_PVR2PCA* _this = reinterpret_cast< msgPsnymProvisionValidationRes_PVR2PCA* >(object);
  (void)_this;
}
void msgPsnymProvisionValidationRes_PVR2PCA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msgPsnymProvisionValidationRes_PVR2PCA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgPsnymProvisionValidationRes_PVR2PCA& msgPsnymProvisionValidationRes_PVR2PCA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgPsnymProvisionValidationRes_PVR2PCA_Interfaces_2eproto.base);
  return *internal_default_instance();
}


void msgPsnymProvisionValidationRes_PVR2PCA::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.msgPsnymProvisionValidationRes_PVR2PCA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stsigner_ != nullptr);
      stsigner_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sterrinfo_ != nullptr);
      sterrinfo_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stsign_ != nullptr);
      stsign_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    chstatus_ = 0u;
    ireqtype_ = -1;
    inonce_ = -1;
    ttimestamp_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msgPsnymProvisionValidationRes_PVR2PCA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 iReqType = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ireqtype(&has_bits);
          ireqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignerInfo stSigner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 chStatus = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_chstatus(&has_bits);
          chstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 iNonce = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_inonce(&has_bits);
          inonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tTimeStamp = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ttimestamp(&has_bits);
          ttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .interfaces.msgError stErrInfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sterrinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .interfaces.msgSignature stSign = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgPsnymProvisionValidationRes_PVR2PCA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.msgPsnymProvisionValidationRes_PVR2PCA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iReqType = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ireqtype(), target);
  }

  // optional .interfaces.msgSignerInfo stSigner = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stsigner(this), target, stream);
  }

  // required uint32 chStatus = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_chstatus(), target);
  }

  // required int32 iNonce = 4 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_inonce(), target);
  }

  // required int64 tTimeStamp = 5 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_ttimestamp(), target);
  }

  // required .interfaces.msgError stErrInfo = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::sterrinfo(this), target, stream);
  }

  // optional .interfaces.msgSignature stSign = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::stsign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.msgPsnymProvisionValidationRes_PVR2PCA)
  return target;
}

size_t msgPsnymProvisionValidationRes_PVR2PCA::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:interfaces.msgPsnymProvisionValidationRes_PVR2PCA)
  size_t total_size = 0;

  if (_internal_has_sterrinfo()) {
    // required .interfaces.msgError stErrInfo = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);
  }

  if (_internal_has_chstatus()) {
    // required uint32 chStatus = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chstatus());
  }

  if (_internal_has_ireqtype()) {
    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());
  }

  if (_internal_has_inonce()) {
    // required int32 iNonce = 4 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());
  }

  if (_internal_has_ttimestamp()) {
    // required int64 tTimeStamp = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());
  }

  return total_size;
}
size_t msgPsnymProvisionValidationRes_PVR2PCA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.msgPsnymProvisionValidationRes_PVR2PCA)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007a) ^ 0x0000007a) == 0) {  // All required fields are present.
    // required .interfaces.msgError stErrInfo = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sterrinfo_);

    // required uint32 chStatus = 3 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chstatus());

    // required int32 iReqType = 1 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ireqtype());

    // required int32 iNonce = 4 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inonce());

    // required int64 tTimeStamp = 5 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .interfaces.msgSignerInfo stSigner = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsigner_);
  }

  // optional .interfaces.msgSignature stSign = 7;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsign_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgPsnymProvisionValidationRes_PVR2PCA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.msgPsnymProvisionValidationRes_PVR2PCA)
  GOOGLE_DCHECK_NE(&from, this);
  const msgPsnymProvisionValidationRes_PVR2PCA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgPsnymProvisionValidationRes_PVR2PCA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.msgPsnymProvisionValidationRes_PVR2PCA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.msgPsnymProvisionValidationRes_PVR2PCA)
    MergeFrom(*source);
  }
}

void msgPsnymProvisionValidationRes_PVR2PCA::MergeFrom(const msgPsnymProvisionValidationRes_PVR2PCA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.msgPsnymProvisionValidationRes_PVR2PCA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stsigner()->::interfaces::msgSignerInfo::MergeFrom(from._internal_stsigner());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sterrinfo()->::interfaces::msgError::MergeFrom(from._internal_sterrinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stsign()->::interfaces::msgSignature::MergeFrom(from._internal_stsign());
    }
    if (cached_has_bits & 0x00000008u) {
      chstatus_ = from.chstatus_;
    }
    if (cached_has_bits & 0x00000010u) {
      ireqtype_ = from.ireqtype_;
    }
    if (cached_has_bits & 0x00000020u) {
      inonce_ = from.inonce_;
    }
    if (cached_has_bits & 0x00000040u) {
      ttimestamp_ = from.ttimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msgPsnymProvisionValidationRes_PVR2PCA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.msgPsnymProvisionValidationRes_PVR2PCA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgPsnymProvisionValidationRes_PVR2PCA::CopyFrom(const msgPsnymProvisionValidationRes_PVR2PCA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.msgPsnymProvisionValidationRes_PVR2PCA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgPsnymProvisionValidationRes_PVR2PCA::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_stsigner()) {
    if (!stsigner_->IsInitialized()) return false;
  }
  if (_internal_has_sterrinfo()) {
    if (!sterrinfo_->IsInitialized()) return false;
  }
  return true;
}

void msgPsnymProvisionValidationRes_PVR2PCA::InternalSwap(msgPsnymProvisionValidationRes_PVR2PCA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msgPsnymProvisionValidationRes_PVR2PCA, chstatus_)
      + sizeof(msgPsnymProvisionValidationRes_PVR2PCA::chstatus_)
      - PROTOBUF_FIELD_OFFSET(msgPsnymProvisionValidationRes_PVR2PCA, stsigner_)>(
          reinterpret_cast<char*>(&stsigner_),
          reinterpret_cast<char*>(&other->stsigner_));
  swap(ireqtype_, other->ireqtype_);
  swap(inonce_, other->inonce_);
  swap(ttimestamp_, other->ttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgPsnymProvisionValidationRes_PVR2PCA::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace interfaces
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::interfaces::msgReqProfile* Arena::CreateMaybeMessage< ::interfaces::msgReqProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgReqProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgSignature* Arena::CreateMaybeMessage< ::interfaces::msgSignature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgSignature >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgError* Arena::CreateMaybeMessage< ::interfaces::msgError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgError >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgECPublicKey* Arena::CreateMaybeMessage< ::interfaces::msgECPublicKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgECPublicKey >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgSignerIdentifierType* Arena::CreateMaybeMessage< ::interfaces::msgSignerIdentifierType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgSignerIdentifierType >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgSubType* Arena::CreateMaybeMessage< ::interfaces::msgSubType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgSubType >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgSubTypeFlags* Arena::CreateMaybeMessage< ::interfaces::msgSubTypeFlags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgSubTypeFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgAIDType* Arena::CreateMaybeMessage< ::interfaces::msgAIDType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgAIDType >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgRegionType* Arena::CreateMaybeMessage< ::interfaces::msgRegionType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgRegionType >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgWSASignerScope* Arena::CreateMaybeMessage< ::interfaces::msgWSASignerScope >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgWSASignerScope >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgRequestScopeType* Arena::CreateMaybeMessage< ::interfaces::msgRequestScopeType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgRequestScopeType >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgVoucherReq_V2LTCA* Arena::CreateMaybeMessage< ::interfaces::msgVoucherReq_V2LTCA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgVoucherReq_V2LTCA >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgVoucherRes_LTCA2V* Arena::CreateMaybeMessage< ::interfaces::msgVoucherRes_LTCA2V >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgVoucherRes_LTCA2V >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgX509CertReq_V2LTCA* Arena::CreateMaybeMessage< ::interfaces::msgX509CertReq_V2LTCA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgX509CertReq_V2LTCA >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgX509CertRes_LTCA2V* Arena::CreateMaybeMessage< ::interfaces::msgX509CertRes_LTCA2V >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgX509CertRes_LTCA2V >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgCRLType* Arena::CreateMaybeMessage< ::interfaces::msgCRLType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgCRLType >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgTwoDLocation* Arena::CreateMaybeMessage< ::interfaces::msgTwoDLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgTwoDLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgCircularRegion* Arena::CreateMaybeMessage< ::interfaces::msgCircularRegion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgCircularRegion >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgRectangularRegion* Arena::CreateMaybeMessage< ::interfaces::msgRectangularRegion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgRectangularRegion >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgApplicationID* Arena::CreateMaybeMessage< ::interfaces::msgApplicationID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgApplicationID >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgOBUIdentifiedScope* Arena::CreateMaybeMessage< ::interfaces::msgOBUIdentifiedScope >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgOBUIdentifiedScope >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgGeographicRegion* Arena::CreateMaybeMessage< ::interfaces::msgGeographicRegion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgGeographicRegion >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgIdentifiedScope* Arena::CreateMaybeMessage< ::interfaces::msgIdentifiedScope >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgIdentifiedScope >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgAppIDAndPriority* Arena::CreateMaybeMessage< ::interfaces::msgAppIDAndPriority >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgAppIDAndPriority >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgCAScope* Arena::CreateMaybeMessage< ::interfaces::msgCAScope >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgCAScope >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgCertSpecificData* Arena::CreateMaybeMessage< ::interfaces::msgCertSpecificData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgCertSpecificData >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgToBeSignedWAVECertificate* Arena::CreateMaybeMessage< ::interfaces::msgToBeSignedWAVECertificate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgToBeSignedWAVECertificate >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgPsnymCertFormat* Arena::CreateMaybeMessage< ::interfaces::msgPsnymCertFormat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgPsnymCertFormat >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgSignerInfo* Arena::CreateMaybeMessage< ::interfaces::msgSignerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgSignerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgPsnymKeysStorage* Arena::CreateMaybeMessage< ::interfaces::msgPsnymKeysStorage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgPsnymKeysStorage >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgTicketReq* Arena::CreateMaybeMessage< ::interfaces::msgTicketReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgTicketReq >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgForeignTicketReq* Arena::CreateMaybeMessage< ::interfaces::msgForeignTicketReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgForeignTicketReq >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgVehicleAttributes* Arena::CreateMaybeMessage< ::interfaces::msgVehicleAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgVehicleAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgTicketFormat* Arena::CreateMaybeMessage< ::interfaces::msgTicketFormat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgTicketFormat >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgTicketRes* Arena::CreateMaybeMessage< ::interfaces::msgTicketRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgTicketRes >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgToBeSignedCSR* Arena::CreateMaybeMessage< ::interfaces::msgToBeSignedCSR >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgToBeSignedCSR >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgWAVECertificateRequest* Arena::CreateMaybeMessage< ::interfaces::msgWAVECertificateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgWAVECertificateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgPsnymCertReq_V2PCA* Arena::CreateMaybeMessage< ::interfaces::msgPsnymCertReq_V2PCA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgPsnymCertReq_V2PCA >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgPsnymCertRes_PCA2V* Arena::CreateMaybeMessage< ::interfaces::msgPsnymCertRes_PCA2V >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgPsnymCertRes_PCA2V >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgPsnymCertAck_V2PCA* Arena::CreateMaybeMessage< ::interfaces::msgPsnymCertAck_V2PCA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgPsnymCertAck_V2PCA >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgPsnymCRLFormat* Arena::CreateMaybeMessage< ::interfaces::msgPsnymCRLFormat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgPsnymCRLFormat >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgIDAndDate* Arena::CreateMaybeMessage< ::interfaces::msgIDAndDate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgIDAndDate >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgToBeSignedCRL* Arena::CreateMaybeMessage< ::interfaces::msgToBeSignedCRL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgToBeSignedCRL >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgWAVECRL* Arena::CreateMaybeMessage< ::interfaces::msgWAVECRL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgWAVECRL >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgWAVECertificateResponse* Arena::CreateMaybeMessage< ::interfaces::msgWAVECertificateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgWAVECertificateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgPsnymCRLReq_V2PCA* Arena::CreateMaybeMessage< ::interfaces::msgPsnymCRLReq_V2PCA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgPsnymCRLReq_V2PCA >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgPsnymCRLRes_PCA2V* Arena::CreateMaybeMessage< ::interfaces::msgPsnymCRLRes_PCA2V >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgPsnymCRLRes_PCA2V >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgPsnymOCSPReq_V2PCA* Arena::CreateMaybeMessage< ::interfaces::msgPsnymOCSPReq_V2PCA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgPsnymOCSPReq_V2PCA >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgPsnymRevocationStatus* Arena::CreateMaybeMessage< ::interfaces::msgPsnymRevocationStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgPsnymRevocationStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgPsnymOCSPRes_PCA2V* Arena::CreateMaybeMessage< ::interfaces::msgPsnymOCSPRes_PCA2V >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgPsnymOCSPRes_PCA2V >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgRevokePsnymCertReq_P2RA* Arena::CreateMaybeMessage< ::interfaces::msgRevokePsnymCertReq_P2RA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgRevokePsnymCertReq_P2RA >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgRevokePsnymCertReq_RA2PCA* Arena::CreateMaybeMessage< ::interfaces::msgRevokePsnymCertReq_RA2PCA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgRevokePsnymCertReq_RA2PCA >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgRevokePsnymCertRes_PCA2RA* Arena::CreateMaybeMessage< ::interfaces::msgRevokePsnymCertRes_PCA2RA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgRevokePsnymCertRes_PCA2RA >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgRevokeX509CertReq_RA2LTCA* Arena::CreateMaybeMessage< ::interfaces::msgRevokeX509CertReq_RA2LTCA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgRevokeX509CertReq_RA2LTCA >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo* Arena::CreateMaybeMessage< ::interfaces::msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgRevokePsnymCertRes_RA2P_msgPsnymRevocationErrInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgRevokePsnymCertRes_RA2P* Arena::CreateMaybeMessage< ::interfaces::msgRevokePsnymCertRes_RA2P >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgRevokePsnymCertRes_RA2P >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgPsnymResolutionReq_Police2RA* Arena::CreateMaybeMessage< ::interfaces::msgPsnymResolutionReq_Police2RA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgPsnymResolutionReq_Police2RA >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgPsnymResolutionReq_RA2PCA* Arena::CreateMaybeMessage< ::interfaces::msgPsnymResolutionReq_RA2PCA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgPsnymResolutionReq_RA2PCA >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgPsnymResolutionRes_PCA2RA_msgPsnymResolution* Arena::CreateMaybeMessage< ::interfaces::msgPsnymResolutionRes_PCA2RA_msgPsnymResolution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgPsnymResolutionRes_PCA2RA_msgPsnymResolution >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgPsnymResolutionRes_PCA2RA* Arena::CreateMaybeMessage< ::interfaces::msgPsnymResolutionRes_PCA2RA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgPsnymResolutionRes_PCA2RA >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution* Arena::CreateMaybeMessage< ::interfaces::msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgPsnymResolutionReq_RA2LTCA_msgPsnymResolution >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgPsnymResolutionReq_RA2LTCA* Arena::CreateMaybeMessage< ::interfaces::msgPsnymResolutionReq_RA2LTCA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgPsnymResolutionReq_RA2LTCA >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution* Arena::CreateMaybeMessage< ::interfaces::msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgPsnymResolutionRes_LTCA2RA_msgPsnymResolution >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgPsnymResolutionRes_LTCA2RA* Arena::CreateMaybeMessage< ::interfaces::msgPsnymResolutionRes_LTCA2RA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgPsnymResolutionRes_LTCA2RA >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgPsnymResolutionRes_RA2Police_msgPsnymResolution* Arena::CreateMaybeMessage< ::interfaces::msgPsnymResolutionRes_RA2Police_msgPsnymResolution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgPsnymResolutionRes_RA2Police_msgPsnymResolution >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgPsnymResolutionRes_RA2Police* Arena::CreateMaybeMessage< ::interfaces::msgPsnymResolutionRes_RA2Police >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgPsnymResolutionRes_RA2Police >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgPsnymResolutionAck_Police2RA* Arena::CreateMaybeMessage< ::interfaces::msgPsnymResolutionAck_Police2RA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgPsnymResolutionAck_Police2RA >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgBanTicketsReq_Police2RA_msgBannedTickets* Arena::CreateMaybeMessage< ::interfaces::msgBanTicketsReq_Police2RA_msgBannedTickets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgBanTicketsReq_Police2RA_msgBannedTickets >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgBanTicketsReq_Police2RA* Arena::CreateMaybeMessage< ::interfaces::msgBanTicketsReq_Police2RA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgBanTicketsReq_Police2RA >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgBanTicketsReq_RA2PCA_msgBannedTickets* Arena::CreateMaybeMessage< ::interfaces::msgBanTicketsReq_RA2PCA_msgBannedTickets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgBanTicketsReq_RA2PCA_msgBannedTickets >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgBanTicketsReq_RA2PCA* Arena::CreateMaybeMessage< ::interfaces::msgBanTicketsReq_RA2PCA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgBanTicketsReq_RA2PCA >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgBanTicketsRes_PCA2RA_msgBannedTickets* Arena::CreateMaybeMessage< ::interfaces::msgBanTicketsRes_PCA2RA_msgBannedTickets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgBanTicketsRes_PCA2RA_msgBannedTickets >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgBanTicketsRes_PCA2RA* Arena::CreateMaybeMessage< ::interfaces::msgBanTicketsRes_PCA2RA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgBanTicketsRes_PCA2RA >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgBanTicketsRes_RA2Police_msgBannedTickets* Arena::CreateMaybeMessage< ::interfaces::msgBanTicketsRes_RA2Police_msgBannedTickets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgBanTicketsRes_RA2Police_msgBannedTickets >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgBanTicketsRes_RA2Police* Arena::CreateMaybeMessage< ::interfaces::msgBanTicketsRes_RA2Police >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgBanTicketsRes_RA2Police >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgBanTicketsAck_Police2RA* Arena::CreateMaybeMessage< ::interfaces::msgBanTicketsAck_Police2RA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgBanTicketsAck_Police2RA >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgVehicleConfig* Arena::CreateMaybeMessage< ::interfaces::msgVehicleConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgVehicleConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgPoliceConfig* Arena::CreateMaybeMessage< ::interfaces::msgPoliceConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgPoliceConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgVPKILibConfig_msgTicketPolicy* Arena::CreateMaybeMessage< ::interfaces::msgVPKILibConfig_msgTicketPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgVPKILibConfig_msgTicketPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgVPKILibConfig_msgPsnymPolicy* Arena::CreateMaybeMessage< ::interfaces::msgVPKILibConfig_msgPsnymPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgVPKILibConfig_msgPsnymPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgVPKILibConfig* Arena::CreateMaybeMessage< ::interfaces::msgVPKILibConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgVPKILibConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgUpgradeConfigurationReq_Client2Server* Arena::CreateMaybeMessage< ::interfaces::msgUpgradeConfigurationReq_Client2Server >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgUpgradeConfigurationReq_Client2Server >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgUpgradeConfigurationRes_Server2Client* Arena::CreateMaybeMessage< ::interfaces::msgUpgradeConfigurationRes_Server2Client >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgUpgradeConfigurationRes_Server2Client >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgReversePsnymResolutionReq_Police2RA* Arena::CreateMaybeMessage< ::interfaces::msgReversePsnymResolutionReq_Police2RA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgReversePsnymResolutionReq_Police2RA >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgReversePsnymResolutionReq_RA2LTCA* Arena::CreateMaybeMessage< ::interfaces::msgReversePsnymResolutionReq_RA2LTCA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgReversePsnymResolutionReq_RA2LTCA >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgReversePsnymResolutionRes_LTCA2RA_msgTicket* Arena::CreateMaybeMessage< ::interfaces::msgReversePsnymResolutionRes_LTCA2RA_msgTicket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgReversePsnymResolutionRes_LTCA2RA_msgTicket >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution* Arena::CreateMaybeMessage< ::interfaces::msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgReversePsnymResolutionRes_LTCA2RA_msgTicketResolution >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgReversePsnymResolutionRes_LTCA2RA* Arena::CreateMaybeMessage< ::interfaces::msgReversePsnymResolutionRes_LTCA2RA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgReversePsnymResolutionRes_LTCA2RA >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgReversePsnymResolutionReq_RA2PCA_msgTicket* Arena::CreateMaybeMessage< ::interfaces::msgReversePsnymResolutionReq_RA2PCA_msgTicket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgReversePsnymResolutionReq_RA2PCA_msgTicket >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution* Arena::CreateMaybeMessage< ::interfaces::msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgReversePsnymResolutionReq_RA2PCA_msgTicketResolution >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgReversePsnymResolutionReq_RA2PCA* Arena::CreateMaybeMessage< ::interfaces::msgReversePsnymResolutionReq_RA2PCA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgReversePsnymResolutionReq_RA2PCA >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgReversePsnymResolutionRes_PCA2RA_msgPsnym* Arena::CreateMaybeMessage< ::interfaces::msgReversePsnymResolutionRes_PCA2RA_msgPsnym >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgReversePsnymResolutionRes_PCA2RA_msgPsnym >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution* Arena::CreateMaybeMessage< ::interfaces::msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgReversePsnymResolutionRes_PCA2RA_msgTicketResolution >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution* Arena::CreateMaybeMessage< ::interfaces::msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgReversePsnymResolutionRes_PCA2RA_msgPsnymResolution >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgReversePsnymResolutionRes_PCA2RA* Arena::CreateMaybeMessage< ::interfaces::msgReversePsnymResolutionRes_PCA2RA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgReversePsnymResolutionRes_PCA2RA >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution* Arena::CreateMaybeMessage< ::interfaces::msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgReversePsnymResolutionRes_RA2Police_msgPsnymResolution >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgReversePsnymResolutionRes_RA2Police* Arena::CreateMaybeMessage< ::interfaces::msgReversePsnymResolutionRes_RA2Police >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgReversePsnymResolutionRes_RA2Police >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgTicketProvisionValidationReq_LTCA2TVR* Arena::CreateMaybeMessage< ::interfaces::msgTicketProvisionValidationReq_LTCA2TVR >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgTicketProvisionValidationReq_LTCA2TVR >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgTicketProvisionValidationRes_TVR2LTCA* Arena::CreateMaybeMessage< ::interfaces::msgTicketProvisionValidationRes_TVR2LTCA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgTicketProvisionValidationRes_TVR2LTCA >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgPsnymProvisionValidationReq_PCA2PVR* Arena::CreateMaybeMessage< ::interfaces::msgPsnymProvisionValidationReq_PCA2PVR >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgPsnymProvisionValidationReq_PCA2PVR >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::msgPsnymProvisionValidationRes_PVR2PCA* Arena::CreateMaybeMessage< ::interfaces::msgPsnymProvisionValidationRes_PVR2PCA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::msgPsnymProvisionValidationRes_PVR2PCA >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
